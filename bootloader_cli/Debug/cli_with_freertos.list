
cli_with_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003500  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003734  08003734  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003734  08003734  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003734  08003734  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800373c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000005c  08003798  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08003798  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007690  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a4  00000000  00000000  00027758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  00029100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000558  00000000  00000000  00029818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177ca  00000000  00000000  00029d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a930  00000000  00000000  0004153a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082293  00000000  00000000  0004be6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fc4  00000000  00000000  000ce100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d00c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080035f4 	.word	0x080035f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080035f4 	.word	0x080035f4

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f001 f987 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f001 f9a0 	bl	80014ba <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <MX_GPIO_Init+0x40>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <MX_GPIO_Init+0x40>)
 8000194:	f043 0320 	orr.w	r3, r3, #32
 8000198:	6193      	str	r3, [r2, #24]
 800019a:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <MX_GPIO_Init+0x40>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	f003 0320 	and.w	r3, r3, #32
 80001a2:	607b      	str	r3, [r7, #4]
 80001a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001ac:	f043 0304 	orr.w	r3, r3, #4
 80001b0:	6193      	str	r3, [r2, #24]
 80001b2:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	f003 0304 	and.w	r3, r3, #4
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	683b      	ldr	r3, [r7, #0]

}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40021000 	.word	0x40021000

080001cc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */
void sum_word(uint8_t *buf,uint8_t len,char *fmt,...);
extern HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
extern HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <HAL_UART_RxCpltCallback+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d104      	bne.n	80001ea <HAL_UART_RxCpltCallback+0x1e>
		HAL_UART_Receive_DMA(&huart1,&command_tx[0],5);
 80001e0:	2205      	movs	r2, #5
 80001e2:	4905      	ldr	r1, [pc, #20]	; (80001f8 <HAL_UART_RxCpltCallback+0x2c>)
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <HAL_UART_RxCpltCallback+0x28>)
 80001e6:	f002 f9d8 	bl	800259a <HAL_UART_Receive_DMA>
	}
	UNUSED(huart);
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	2000012c 	.word	0x2000012c
 80001f8:	20000078 	.word	0x20000078

080001fc <uart_send>:
	va_list arg;
	va_start(arg,fmt);
	vsnprintf((char *)buf,len,fmt,arg);
	va_end(arg);
}
void uart_send(uint8_t uart_num, char *fmt,...){
 80001fc:	b40e      	push	{r1, r2, r3}
 80001fe:	b580      	push	{r7, lr}
 8000200:	b085      	sub	sp, #20
 8000202:	af00      	add	r7, sp, #0
 8000204:	4603      	mov	r3, r0
 8000206:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 8000208:	f107 0320 	add.w	r3, r7, #32
 800020c:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)send_buffer,64,fmt,arg);
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	69fa      	ldr	r2, [r7, #28]
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4810      	ldr	r0, [pc, #64]	; (8000258 <uart_send+0x5c>)
 8000216:	f002 fd4d 	bl	8002cb4 <vsniprintf>
	if(uart_num==1){
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b01      	cmp	r3, #1
 800021e:	d106      	bne.n	800022e <uart_send+0x32>
		HAL_UART_Transmit(&huart1,send_buffer,64,100);
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	2240      	movs	r2, #64	; 0x40
 8000224:	490c      	ldr	r1, [pc, #48]	; (8000258 <uart_send+0x5c>)
 8000226:	480d      	ldr	r0, [pc, #52]	; (800025c <uart_send+0x60>)
 8000228:	f002 f934 	bl	8002494 <HAL_UART_Transmit>
 800022c:	e008      	b.n	8000240 <uart_send+0x44>
	}
	else if(uart_num==2){
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b02      	cmp	r3, #2
 8000232:	d105      	bne.n	8000240 <uart_send+0x44>
		HAL_UART_Transmit(&huart2,send_buffer,64,100);
 8000234:	2364      	movs	r3, #100	; 0x64
 8000236:	2240      	movs	r2, #64	; 0x40
 8000238:	4907      	ldr	r1, [pc, #28]	; (8000258 <uart_send+0x5c>)
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <uart_send+0x64>)
 800023c:	f002 f92a 	bl	8002494 <HAL_UART_Transmit>
	}
	memset(send_buffer,0,64);
 8000240:	2240      	movs	r2, #64	; 0x40
 8000242:	2100      	movs	r1, #0
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <uart_send+0x5c>)
 8000246:	f002 fd43 	bl	8002cd0 <memset>
	va_end(arg);
}
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000254:	b003      	add	sp, #12
 8000256:	4770      	bx	lr
 8000258:	20000080 	.word	0x20000080
 800025c:	2000012c 	.word	0x2000012c
 8000260:	20000174 	.word	0x20000174

08000264 <is_command>:
keytype is_command(uint8_t *buf,uint8_t i){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	460b      	mov	r3, r1
 800026e:	70fb      	strb	r3, [r7, #3]
	keytype type_key = KEY_NONE;
 8000270:	2300      	movs	r3, #0
 8000272:	73fb      	strb	r3, [r7, #15]
	switch (buf[i]){
 8000274:	78fb      	ldrb	r3, [r7, #3]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b7f      	cmp	r3, #127	; 0x7f
 800027e:	d061      	beq.n	8000344 <is_command+0xe0>
 8000280:	2b7f      	cmp	r3, #127	; 0x7f
 8000282:	dc68      	bgt.n	8000356 <is_command+0xf2>
 8000284:	2b1b      	cmp	r3, #27
 8000286:	d006      	beq.n	8000296 <is_command+0x32>
 8000288:	2b1b      	cmp	r3, #27
 800028a:	dc64      	bgt.n	8000356 <is_command+0xf2>
 800028c:	2b08      	cmp	r3, #8
 800028e:	d05c      	beq.n	800034a <is_command+0xe6>
 8000290:	2b0d      	cmp	r3, #13
 8000292:	d05d      	beq.n	8000350 <is_command+0xec>
			break;
		case 0x0d:
			type_key = ENTER;
			break;
		default:
			break;
 8000294:	e05f      	b.n	8000356 <is_command+0xf2>
			HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fff8 	bl	800128c <HAL_Delay>
			switch(buf[(i+2)%5]){
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	1c9a      	adds	r2, r3, #2
 80002a0:	4b37      	ldr	r3, [pc, #220]	; (8000380 <is_command+0x11c>)
 80002a2:	fb83 1302 	smull	r1, r3, r3, r2
 80002a6:	1059      	asrs	r1, r3, #1
 80002a8:	17d3      	asrs	r3, r2, #31
 80002aa:	1ac9      	subs	r1, r1, r3
 80002ac:	460b      	mov	r3, r1
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	440b      	add	r3, r1
 80002b2:	1ad1      	subs	r1, r2, r3
 80002b4:	460a      	mov	r2, r1
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4413      	add	r3, r2
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	3b31      	subs	r3, #49	; 0x31
 80002be:	2b13      	cmp	r3, #19
 80002c0:	d83c      	bhi.n	800033c <is_command+0xd8>
 80002c2:	a201      	add	r2, pc, #4	; (adr r2, 80002c8 <is_command+0x64>)
 80002c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c8:	08000337 	.word	0x08000337
 80002cc:	0800033d 	.word	0x0800033d
 80002d0:	0800033d 	.word	0x0800033d
 80002d4:	08000331 	.word	0x08000331
 80002d8:	0800033d 	.word	0x0800033d
 80002dc:	0800033d 	.word	0x0800033d
 80002e0:	0800033d 	.word	0x0800033d
 80002e4:	0800033d 	.word	0x0800033d
 80002e8:	0800033d 	.word	0x0800033d
 80002ec:	0800033d 	.word	0x0800033d
 80002f0:	0800033d 	.word	0x0800033d
 80002f4:	0800033d 	.word	0x0800033d
 80002f8:	0800033d 	.word	0x0800033d
 80002fc:	0800033d 	.word	0x0800033d
 8000300:	0800033d 	.word	0x0800033d
 8000304:	0800033d 	.word	0x0800033d
 8000308:	0800032b 	.word	0x0800032b
 800030c:	08000325 	.word	0x08000325
 8000310:	0800031f 	.word	0x0800031f
 8000314:	08000319 	.word	0x08000319
					type_key = LEFT;
 8000318:	2303      	movs	r3, #3
 800031a:	73fb      	strb	r3, [r7, #15]
					break;
 800031c:	e011      	b.n	8000342 <is_command+0xde>
					type_key = RIGHT;
 800031e:	2304      	movs	r3, #4
 8000320:	73fb      	strb	r3, [r7, #15]
					break;
 8000322:	e00e      	b.n	8000342 <is_command+0xde>
					type_key = DOWN;
 8000324:	2302      	movs	r3, #2
 8000326:	73fb      	strb	r3, [r7, #15]
					break;
 8000328:	e00b      	b.n	8000342 <is_command+0xde>
					type_key = UP;
 800032a:	2301      	movs	r3, #1
 800032c:	73fb      	strb	r3, [r7, #15]
					break;
 800032e:	e008      	b.n	8000342 <is_command+0xde>
					type_key = END;
 8000330:	2305      	movs	r3, #5
 8000332:	73fb      	strb	r3, [r7, #15]
					break;
 8000334:	e005      	b.n	8000342 <is_command+0xde>
					type_key = HOME;
 8000336:	2306      	movs	r3, #6
 8000338:	73fb      	strb	r3, [r7, #15]
					break;
 800033a:	e002      	b.n	8000342 <is_command+0xde>
					type_key = KEY_ERROR;
 800033c:	230b      	movs	r3, #11
 800033e:	73fb      	strb	r3, [r7, #15]
					break;
 8000340:	bf00      	nop
			break;
 8000342:	e009      	b.n	8000358 <is_command+0xf4>
			type_key = DEL;
 8000344:	2307      	movs	r3, #7
 8000346:	73fb      	strb	r3, [r7, #15]
			break;
 8000348:	e006      	b.n	8000358 <is_command+0xf4>
			type_key = BACKSPACE;
 800034a:	2308      	movs	r3, #8
 800034c:	73fb      	strb	r3, [r7, #15]
			break;
 800034e:	e003      	b.n	8000358 <is_command+0xf4>
			type_key = ENTER;
 8000350:	2309      	movs	r3, #9
 8000352:	73fb      	strb	r3, [r7, #15]
			break;
 8000354:	e000      	b.n	8000358 <is_command+0xf4>
			break;
 8000356:	bf00      	nop
	}
	if(buf[i]>=32 && buf[i]<=126){
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b1f      	cmp	r3, #31
 8000362:	d907      	bls.n	8000374 <is_command+0x110>
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	4413      	add	r3, r2
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b7e      	cmp	r3, #126	; 0x7e
 800036e:	d801      	bhi.n	8000374 <is_command+0x110>
		type_key=IS_WORD;
 8000370:	230a      	movs	r3, #10
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	return type_key;
 8000374:	7bfb      	ldrb	r3, [r7, #15]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	66666667 	.word	0x66666667

08000384 <cli_start>:

void cli_start(uint8_t *buf,uint8_t i,keytype key_input){
 8000384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
 8000390:	4613      	mov	r3, r2
 8000392:	70bb      	strb	r3, [r7, #2]
	switch (key_input){
 8000394:	78bb      	ldrb	r3, [r7, #2]
 8000396:	3b01      	subs	r3, #1
 8000398:	2b09      	cmp	r3, #9
 800039a:	f200 8421 	bhi.w	8000be0 <cli_start+0x85c>
 800039e:	a201      	add	r2, pc, #4	; (adr r2, 80003a4 <cli_start+0x20>)
 80003a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a4:	080004a3 	.word	0x080004a3
 80003a8:	08000557 	.word	0x08000557
 80003ac:	080003cd 	.word	0x080003cd
 80003b0:	0800041f 	.word	0x0800041f
 80003b4:	08000609 	.word	0x08000609
 80003b8:	080006c9 	.word	0x080006c9
 80003bc:	08000a81 	.word	0x08000a81
 80003c0:	080008f3 	.word	0x080008f3
 80003c4:	0800071f 	.word	0x0800071f
 80003c8:	0800079b 	.word	0x0800079b
		case LEFT:
			if(data[data_num].cursor_index>0){
 80003cc:	4bb5      	ldr	r3, [pc, #724]	; (80006a4 <cli_start+0x320>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	4ab5      	ldr	r2, [pc, #724]	; (80006a8 <cli_start+0x324>)
 80003d4:	460b      	mov	r3, r1
 80003d6:	011b      	lsls	r3, r3, #4
 80003d8:	440b      	add	r3, r1
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	4413      	add	r3, r2
 80003de:	3321      	adds	r3, #33	; 0x21
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	f000 83fe 	beq.w	8000be4 <cli_start+0x860>
				data[data_num].cursor_index--;
 80003e8:	4bae      	ldr	r3, [pc, #696]	; (80006a4 <cli_start+0x320>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	49ae      	ldr	r1, [pc, #696]	; (80006a8 <cli_start+0x324>)
 80003f0:	4613      	mov	r3, r2
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	4413      	add	r3, r2
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	440b      	add	r3, r1
 80003fa:	3321      	adds	r3, #33	; 0x21
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	3b01      	subs	r3, #1
 8000400:	b2d8      	uxtb	r0, r3
 8000402:	49a9      	ldr	r1, [pc, #676]	; (80006a8 <cli_start+0x324>)
 8000404:	4613      	mov	r3, r2
 8000406:	011b      	lsls	r3, r3, #4
 8000408:	4413      	add	r3, r2
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	440b      	add	r3, r1
 800040e:	3321      	adds	r3, #33	; 0x21
 8000410:	4602      	mov	r2, r0
 8000412:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1D");
 8000414:	49a5      	ldr	r1, [pc, #660]	; (80006ac <cli_start+0x328>)
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff fef0 	bl	80001fc <uart_send>
			}
			break;
 800041c:	e3e2      	b.n	8000be4 <cli_start+0x860>
		case RIGHT:
			if(data[data_num].cursor_index<32 && data[data_num].cursor_index<data[data_num].command_index){
 800041e:	4ba1      	ldr	r3, [pc, #644]	; (80006a4 <cli_start+0x320>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4619      	mov	r1, r3
 8000424:	4aa0      	ldr	r2, [pc, #640]	; (80006a8 <cli_start+0x324>)
 8000426:	460b      	mov	r3, r1
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	440b      	add	r3, r1
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	4413      	add	r3, r2
 8000430:	3321      	adds	r3, #33	; 0x21
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b1f      	cmp	r3, #31
 8000436:	f200 83d7 	bhi.w	8000be8 <cli_start+0x864>
 800043a:	4b9a      	ldr	r3, [pc, #616]	; (80006a4 <cli_start+0x320>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	4619      	mov	r1, r3
 8000440:	4a99      	ldr	r2, [pc, #612]	; (80006a8 <cli_start+0x324>)
 8000442:	460b      	mov	r3, r1
 8000444:	011b      	lsls	r3, r3, #4
 8000446:	440b      	add	r3, r1
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4413      	add	r3, r2
 800044c:	3321      	adds	r3, #33	; 0x21
 800044e:	781a      	ldrb	r2, [r3, #0]
 8000450:	4b94      	ldr	r3, [pc, #592]	; (80006a4 <cli_start+0x320>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	4994      	ldr	r1, [pc, #592]	; (80006a8 <cli_start+0x324>)
 8000458:	4603      	mov	r3, r0
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	4403      	add	r3, r0
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	440b      	add	r3, r1
 8000462:	3320      	adds	r3, #32
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	429a      	cmp	r2, r3
 8000468:	f080 83be 	bcs.w	8000be8 <cli_start+0x864>
				data[data_num].cursor_index++;
 800046c:	4b8d      	ldr	r3, [pc, #564]	; (80006a4 <cli_start+0x320>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	498d      	ldr	r1, [pc, #564]	; (80006a8 <cli_start+0x324>)
 8000474:	4613      	mov	r3, r2
 8000476:	011b      	lsls	r3, r3, #4
 8000478:	4413      	add	r3, r2
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	440b      	add	r3, r1
 800047e:	3321      	adds	r3, #33	; 0x21
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	3301      	adds	r3, #1
 8000484:	b2d8      	uxtb	r0, r3
 8000486:	4988      	ldr	r1, [pc, #544]	; (80006a8 <cli_start+0x324>)
 8000488:	4613      	mov	r3, r2
 800048a:	011b      	lsls	r3, r3, #4
 800048c:	4413      	add	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	440b      	add	r3, r1
 8000492:	3321      	adds	r3, #33	; 0x21
 8000494:	4602      	mov	r2, r0
 8000496:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1C");
 8000498:	4985      	ldr	r1, [pc, #532]	; (80006b0 <cli_start+0x32c>)
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff feae 	bl	80001fc <uart_send>
			}
			break;
 80004a0:	e3a2      	b.n	8000be8 <cli_start+0x864>
		case UP:
			if(data[data_num].cursor_index>0){
 80004a2:	4b80      	ldr	r3, [pc, #512]	; (80006a4 <cli_start+0x320>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	4a7f      	ldr	r2, [pc, #508]	; (80006a8 <cli_start+0x324>)
 80004aa:	460b      	mov	r3, r1
 80004ac:	011b      	lsls	r3, r3, #4
 80004ae:	440b      	add	r3, r1
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	4413      	add	r3, r2
 80004b4:	3321      	adds	r3, #33	; 0x21
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d00f      	beq.n	80004dc <cli_start+0x158>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 80004bc:	4b79      	ldr	r3, [pc, #484]	; (80006a4 <cli_start+0x320>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4a79      	ldr	r2, [pc, #484]	; (80006a8 <cli_start+0x324>)
 80004c4:	460b      	mov	r3, r1
 80004c6:	011b      	lsls	r3, r3, #4
 80004c8:	440b      	add	r3, r1
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	4413      	add	r3, r2
 80004ce:	3321      	adds	r3, #33	; 0x21
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	461a      	mov	r2, r3
 80004d4:	4977      	ldr	r1, [pc, #476]	; (80006b4 <cli_start+0x330>)
 80004d6:	2001      	movs	r0, #1
 80004d8:	f7ff fe90 	bl	80001fc <uart_send>
			}
			uart_send(1,"\x1B[0J");
 80004dc:	4976      	ldr	r1, [pc, #472]	; (80006b8 <cli_start+0x334>)
 80004de:	2001      	movs	r0, #1
 80004e0:	f7ff fe8c 	bl	80001fc <uart_send>
			data_num++;
 80004e4:	4b6f      	ldr	r3, [pc, #444]	; (80006a4 <cli_start+0x320>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b6d      	ldr	r3, [pc, #436]	; (80006a4 <cli_start+0x320>)
 80004ee:	701a      	strb	r2, [r3, #0]
			data_num%=3;
 80004f0:	4b6c      	ldr	r3, [pc, #432]	; (80006a4 <cli_start+0x320>)
 80004f2:	781a      	ldrb	r2, [r3, #0]
 80004f4:	4b71      	ldr	r3, [pc, #452]	; (80006bc <cli_start+0x338>)
 80004f6:	fba3 1302 	umull	r1, r3, r3, r2
 80004fa:	0859      	lsrs	r1, r3, #1
 80004fc:	460b      	mov	r3, r1
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	440b      	add	r3, r1
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b67      	ldr	r3, [pc, #412]	; (80006a4 <cli_start+0x320>)
 8000508:	701a      	strb	r2, [r3, #0]
			uart_send(1,"\x1B[4h%s\x1B[4l",data[data_num].command_buffer);
 800050a:	4b66      	ldr	r3, [pc, #408]	; (80006a4 <cli_start+0x320>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	4613      	mov	r3, r2
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	4413      	add	r3, r2
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4a63      	ldr	r2, [pc, #396]	; (80006a8 <cli_start+0x324>)
 800051a:	4413      	add	r3, r2
 800051c:	461a      	mov	r2, r3
 800051e:	4968      	ldr	r1, [pc, #416]	; (80006c0 <cli_start+0x33c>)
 8000520:	2001      	movs	r0, #1
 8000522:	f7ff fe6b 	bl	80001fc <uart_send>
			data[data_num].cursor_index=data[data_num].command_index;
 8000526:	4b5f      	ldr	r3, [pc, #380]	; (80006a4 <cli_start+0x320>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	4b5d      	ldr	r3, [pc, #372]	; (80006a4 <cli_start+0x320>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	4a5d      	ldr	r2, [pc, #372]	; (80006a8 <cli_start+0x324>)
 8000534:	4603      	mov	r3, r0
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	4403      	add	r3, r0
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	4413      	add	r3, r2
 800053e:	3320      	adds	r3, #32
 8000540:	7818      	ldrb	r0, [r3, #0]
 8000542:	4a59      	ldr	r2, [pc, #356]	; (80006a8 <cli_start+0x324>)
 8000544:	460b      	mov	r3, r1
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	440b      	add	r3, r1
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	3321      	adds	r3, #33	; 0x21
 8000550:	4602      	mov	r2, r0
 8000552:	701a      	strb	r2, [r3, #0]
			break;
 8000554:	e353      	b.n	8000bfe <cli_start+0x87a>
		case DOWN:
			if(data[data_num].cursor_index>0){
 8000556:	4b53      	ldr	r3, [pc, #332]	; (80006a4 <cli_start+0x320>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	4a52      	ldr	r2, [pc, #328]	; (80006a8 <cli_start+0x324>)
 800055e:	460b      	mov	r3, r1
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	440b      	add	r3, r1
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	3321      	adds	r3, #33	; 0x21
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00f      	beq.n	8000590 <cli_start+0x20c>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 8000570:	4b4c      	ldr	r3, [pc, #304]	; (80006a4 <cli_start+0x320>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	4a4c      	ldr	r2, [pc, #304]	; (80006a8 <cli_start+0x324>)
 8000578:	460b      	mov	r3, r1
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	440b      	add	r3, r1
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	4413      	add	r3, r2
 8000582:	3321      	adds	r3, #33	; 0x21
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	494a      	ldr	r1, [pc, #296]	; (80006b4 <cli_start+0x330>)
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff fe36 	bl	80001fc <uart_send>
			}
			uart_send(1,"\x1B[0J");
 8000590:	4949      	ldr	r1, [pc, #292]	; (80006b8 <cli_start+0x334>)
 8000592:	2001      	movs	r0, #1
 8000594:	f7ff fe32 	bl	80001fc <uart_send>
			if(data_num>0){
 8000598:	4b42      	ldr	r3, [pc, #264]	; (80006a4 <cli_start+0x320>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d006      	beq.n	80005ae <cli_start+0x22a>
				data_num--;
 80005a0:	4b40      	ldr	r3, [pc, #256]	; (80006a4 <cli_start+0x320>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b3e      	ldr	r3, [pc, #248]	; (80006a4 <cli_start+0x320>)
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	e006      	b.n	80005bc <cli_start+0x238>
			}
			else if(data_num==0){
 80005ae:	4b3d      	ldr	r3, [pc, #244]	; (80006a4 <cli_start+0x320>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <cli_start+0x238>
				data_num=2;
 80005b6:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <cli_start+0x320>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	701a      	strb	r2, [r3, #0]
			}
			uart_send(1,"\x1B[4h%s\x1B[4l",data[data_num].command_buffer);
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <cli_start+0x320>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4613      	mov	r3, r2
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	4413      	add	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a37      	ldr	r2, [pc, #220]	; (80006a8 <cli_start+0x324>)
 80005cc:	4413      	add	r3, r2
 80005ce:	461a      	mov	r2, r3
 80005d0:	493b      	ldr	r1, [pc, #236]	; (80006c0 <cli_start+0x33c>)
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff fe12 	bl	80001fc <uart_send>
			data[data_num].cursor_index=data[data_num].command_index;
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <cli_start+0x320>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <cli_start+0x320>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4a30      	ldr	r2, [pc, #192]	; (80006a8 <cli_start+0x324>)
 80005e6:	4603      	mov	r3, r0
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	4403      	add	r3, r0
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	3320      	adds	r3, #32
 80005f2:	7818      	ldrb	r0, [r3, #0]
 80005f4:	4a2c      	ldr	r2, [pc, #176]	; (80006a8 <cli_start+0x324>)
 80005f6:	460b      	mov	r3, r1
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	440b      	add	r3, r1
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	3321      	adds	r3, #33	; 0x21
 8000602:	4602      	mov	r2, r0
 8000604:	701a      	strb	r2, [r3, #0]
			break;
 8000606:	e2fa      	b.n	8000bfe <cli_start+0x87a>
		case END:
			if(data[data_num].command_index>data[data_num].cursor_index){
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <cli_start+0x320>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <cli_start+0x324>)
 8000610:	460b      	mov	r3, r1
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	440b      	add	r3, r1
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	3320      	adds	r3, #32
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <cli_start+0x320>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	4920      	ldr	r1, [pc, #128]	; (80006a8 <cli_start+0x324>)
 8000626:	4603      	mov	r3, r0
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	4403      	add	r3, r0
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	440b      	add	r3, r1
 8000630:	3321      	adds	r3, #33	; 0x21
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	f240 82d9 	bls.w	8000bec <cli_start+0x868>
				uart_send(1,"\x1B[%dC",data[data_num].command_index-data[data_num].cursor_index);
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <cli_start+0x320>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <cli_start+0x324>)
 8000642:	460b      	mov	r3, r1
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	440b      	add	r3, r1
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	3320      	adds	r3, #32
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <cli_start+0x320>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4619      	mov	r1, r3
 8000658:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <cli_start+0x324>)
 800065a:	460b      	mov	r3, r1
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	440b      	add	r3, r1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4413      	add	r3, r2
 8000664:	3321      	adds	r3, #33	; 0x21
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	1ac3      	subs	r3, r0, r3
 800066a:	461a      	mov	r2, r3
 800066c:	4915      	ldr	r1, [pc, #84]	; (80006c4 <cli_start+0x340>)
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fdc4 	bl	80001fc <uart_send>
				data[data_num].cursor_index=data[data_num].command_index;
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <cli_start+0x320>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <cli_start+0x320>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4619      	mov	r1, r3
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <cli_start+0x324>)
 8000682:	4603      	mov	r3, r0
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	4403      	add	r3, r0
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	3320      	adds	r3, #32
 800068e:	7818      	ldrb	r0, [r3, #0]
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <cli_start+0x324>)
 8000692:	460b      	mov	r3, r1
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	440b      	add	r3, r1
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	4413      	add	r3, r2
 800069c:	3321      	adds	r3, #33	; 0x21
 800069e:	4602      	mov	r2, r0
 80006a0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006a2:	e2a3      	b.n	8000bec <cli_start+0x868>
 80006a4:	20000126 	.word	0x20000126
 80006a8:	200000c0 	.word	0x200000c0
 80006ac:	0800360c 	.word	0x0800360c
 80006b0:	08003614 	.word	0x08003614
 80006b4:	0800361c 	.word	0x0800361c
 80006b8:	08003624 	.word	0x08003624
 80006bc:	aaaaaaab 	.word	0xaaaaaaab
 80006c0:	0800362c 	.word	0x0800362c
 80006c4:	08003638 	.word	0x08003638
		case HOME:
			if(data[data_num].cursor_index>0){
 80006c8:	4bbf      	ldr	r3, [pc, #764]	; (80009c8 <cli_start+0x644>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4abf      	ldr	r2, [pc, #764]	; (80009cc <cli_start+0x648>)
 80006d0:	460b      	mov	r3, r1
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	440b      	add	r3, r1
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	3321      	adds	r3, #33	; 0x21
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f000 8286 	beq.w	8000bf0 <cli_start+0x86c>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 80006e4:	4bb8      	ldr	r3, [pc, #736]	; (80009c8 <cli_start+0x644>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4ab8      	ldr	r2, [pc, #736]	; (80009cc <cli_start+0x648>)
 80006ec:	460b      	mov	r3, r1
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	440b      	add	r3, r1
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	3321      	adds	r3, #33	; 0x21
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	49b4      	ldr	r1, [pc, #720]	; (80009d0 <cli_start+0x64c>)
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff fd7c 	bl	80001fc <uart_send>
				data[data_num].cursor_index=0;
 8000704:	4bb0      	ldr	r3, [pc, #704]	; (80009c8 <cli_start+0x644>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	4ab0      	ldr	r2, [pc, #704]	; (80009cc <cli_start+0x648>)
 800070c:	460b      	mov	r3, r1
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	3321      	adds	r3, #33	; 0x21
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800071c:	e268      	b.n	8000bf0 <cli_start+0x86c>
		case ENTER:
			/*operating command when enter is pressed*/
			/*end operating*/
			uart_send(1,"\nCLI-# ");
 800071e:	49ad      	ldr	r1, [pc, #692]	; (80009d4 <cli_start+0x650>)
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff fd6b 	bl	80001fc <uart_send>
			data_num++;
 8000726:	4ba8      	ldr	r3, [pc, #672]	; (80009c8 <cli_start+0x644>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4ba6      	ldr	r3, [pc, #664]	; (80009c8 <cli_start+0x644>)
 8000730:	701a      	strb	r2, [r3, #0]
			data_num%=3;
 8000732:	4ba5      	ldr	r3, [pc, #660]	; (80009c8 <cli_start+0x644>)
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	4ba8      	ldr	r3, [pc, #672]	; (80009d8 <cli_start+0x654>)
 8000738:	fba3 1302 	umull	r1, r3, r3, r2
 800073c:	0859      	lsrs	r1, r3, #1
 800073e:	460b      	mov	r3, r1
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	440b      	add	r3, r1
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b9f      	ldr	r3, [pc, #636]	; (80009c8 <cli_start+0x644>)
 800074a:	701a      	strb	r2, [r3, #0]
			memset(data[data_num].command_buffer,0,32);
 800074c:	4b9e      	ldr	r3, [pc, #632]	; (80009c8 <cli_start+0x644>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4613      	mov	r3, r2
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	4413      	add	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4a9c      	ldr	r2, [pc, #624]	; (80009cc <cli_start+0x648>)
 800075c:	4413      	add	r3, r2
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fab4 	bl	8002cd0 <memset>
			data[data_num].command_index=0;
 8000768:	4b97      	ldr	r3, [pc, #604]	; (80009c8 <cli_start+0x644>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4a97      	ldr	r2, [pc, #604]	; (80009cc <cli_start+0x648>)
 8000770:	460b      	mov	r3, r1
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	440b      	add	r3, r1
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	4413      	add	r3, r2
 800077a:	3320      	adds	r3, #32
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
			data[data_num].cursor_index=0;
 8000780:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <cli_start+0x644>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	4a91      	ldr	r2, [pc, #580]	; (80009cc <cli_start+0x648>)
 8000788:	460b      	mov	r3, r1
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	440b      	add	r3, r1
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4413      	add	r3, r2
 8000792:	3321      	adds	r3, #33	; 0x21
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
			break;
 8000798:	e231      	b.n	8000bfe <cli_start+0x87a>
		case IS_WORD:
			if(data[data_num].command_index<32){
 800079a:	4b8b      	ldr	r3, [pc, #556]	; (80009c8 <cli_start+0x644>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4619      	mov	r1, r3
 80007a0:	4a8a      	ldr	r2, [pc, #552]	; (80009cc <cli_start+0x648>)
 80007a2:	460b      	mov	r3, r1
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	440b      	add	r3, r1
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	3320      	adds	r3, #32
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	f200 821f 	bhi.w	8000bf4 <cli_start+0x870>
				data[data_num].command_index++;
 80007b6:	4b84      	ldr	r3, [pc, #528]	; (80009c8 <cli_start+0x644>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4983      	ldr	r1, [pc, #524]	; (80009cc <cli_start+0x648>)
 80007be:	4613      	mov	r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	4413      	add	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	3320      	adds	r3, #32
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	b2d8      	uxtb	r0, r3
 80007d0:	497e      	ldr	r1, [pc, #504]	; (80009cc <cli_start+0x648>)
 80007d2:	4613      	mov	r3, r2
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	440b      	add	r3, r1
 80007dc:	3320      	adds	r3, #32
 80007de:	4602      	mov	r2, r0
 80007e0:	701a      	strb	r2, [r3, #0]
				if(data[data_num].command_index-1!=data[data_num].cursor_index){
 80007e2:	4b79      	ldr	r3, [pc, #484]	; (80009c8 <cli_start+0x644>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4a78      	ldr	r2, [pc, #480]	; (80009cc <cli_start+0x648>)
 80007ea:	460b      	mov	r3, r1
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	440b      	add	r3, r1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	3320      	adds	r3, #32
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	4b73      	ldr	r3, [pc, #460]	; (80009c8 <cli_start+0x644>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	4972      	ldr	r1, [pc, #456]	; (80009cc <cli_start+0x648>)
 8000802:	4603      	mov	r3, r0
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4403      	add	r3, r0
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	440b      	add	r3, r1
 800080c:	3321      	adds	r3, #33	; 0x21
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d03f      	beq.n	8000894 <cli_start+0x510>
					for(int8_t j=data[data_num].command_index-1;j>=data[data_num].cursor_index;j--){
 8000814:	4b6c      	ldr	r3, [pc, #432]	; (80009c8 <cli_start+0x644>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	4a6c      	ldr	r2, [pc, #432]	; (80009cc <cli_start+0x648>)
 800081c:	460b      	mov	r3, r1
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	440b      	add	r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	3320      	adds	r3, #32
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	e021      	b.n	8000876 <cli_start+0x4f2>
						data[data_num].command_buffer[j+1]=data[data_num].command_buffer[j];
 8000832:	4b65      	ldr	r3, [pc, #404]	; (80009c8 <cli_start+0x644>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461d      	mov	r5, r3
 8000838:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800083c:	4b62      	ldr	r3, [pc, #392]	; (80009c8 <cli_start+0x644>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461c      	mov	r4, r3
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	4860      	ldr	r0, [pc, #384]	; (80009cc <cli_start+0x648>)
 800084a:	462b      	mov	r3, r5
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	442b      	add	r3, r5
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4403      	add	r3, r0
 8000854:	440b      	add	r3, r1
 8000856:	7818      	ldrb	r0, [r3, #0]
 8000858:	495c      	ldr	r1, [pc, #368]	; (80009cc <cli_start+0x648>)
 800085a:	4623      	mov	r3, r4
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4423      	add	r3, r4
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	4413      	add	r3, r2
 8000866:	4602      	mov	r2, r0
 8000868:	701a      	strb	r2, [r3, #0]
					for(int8_t j=data[data_num].command_index-1;j>=data[data_num].cursor_index;j--){
 800086a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	3b01      	subs	r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800087a:	4b53      	ldr	r3, [pc, #332]	; (80009c8 <cli_start+0x644>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	4952      	ldr	r1, [pc, #328]	; (80009cc <cli_start+0x648>)
 8000882:	4603      	mov	r3, r0
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	4403      	add	r3, r0
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	440b      	add	r3, r1
 800088c:	3321      	adds	r3, #33	; 0x21
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	dace      	bge.n	8000832 <cli_start+0x4ae>
					}
				}
				data[data_num].command_buffer[data[data_num].cursor_index++]=command_tx[i];
 8000894:	78f8      	ldrb	r0, [r7, #3]
 8000896:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <cli_start+0x644>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461d      	mov	r5, r3
 800089c:	4b4a      	ldr	r3, [pc, #296]	; (80009c8 <cli_start+0x644>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	494a      	ldr	r1, [pc, #296]	; (80009cc <cli_start+0x648>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	4413      	add	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	440b      	add	r3, r1
 80008ae:	3321      	adds	r3, #33	; 0x21
 80008b0:	7819      	ldrb	r1, [r3, #0]
 80008b2:	1c4b      	adds	r3, r1, #1
 80008b4:	b2de      	uxtb	r6, r3
 80008b6:	4c45      	ldr	r4, [pc, #276]	; (80009cc <cli_start+0x648>)
 80008b8:	4613      	mov	r3, r2
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	4413      	add	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4423      	add	r3, r4
 80008c2:	3321      	adds	r3, #33	; 0x21
 80008c4:	4632      	mov	r2, r6
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	460c      	mov	r4, r1
 80008ca:	4b44      	ldr	r3, [pc, #272]	; (80009dc <cli_start+0x658>)
 80008cc:	5c19      	ldrb	r1, [r3, r0]
 80008ce:	4a3f      	ldr	r2, [pc, #252]	; (80009cc <cli_start+0x648>)
 80008d0:	462b      	mov	r3, r5
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	442b      	add	r3, r5
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	4423      	add	r3, r4
 80008dc:	460a      	mov	r2, r1
 80008de:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[4h%c\x1B[4l",command_tx[i]);
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	4a3e      	ldr	r2, [pc, #248]	; (80009dc <cli_start+0x658>)
 80008e4:	5cd3      	ldrb	r3, [r2, r3]
 80008e6:	461a      	mov	r2, r3
 80008e8:	493d      	ldr	r1, [pc, #244]	; (80009e0 <cli_start+0x65c>)
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fc86 	bl	80001fc <uart_send>
			}
			break;
 80008f0:	e180      	b.n	8000bf4 <cli_start+0x870>
		case BACKSPACE:
			if(data[data_num].command_index>0 && data[data_num].cursor_index>0){
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <cli_start+0x644>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4a34      	ldr	r2, [pc, #208]	; (80009cc <cli_start+0x648>)
 80008fa:	460b      	mov	r3, r1
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	440b      	add	r3, r1
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	3320      	adds	r3, #32
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	f000 8175 	beq.w	8000bf8 <cli_start+0x874>
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <cli_start+0x644>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	4a2d      	ldr	r2, [pc, #180]	; (80009cc <cli_start+0x648>)
 8000916:	460b      	mov	r3, r1
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	440b      	add	r3, r1
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	3321      	adds	r3, #33	; 0x21
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 8167 	beq.w	8000bf8 <cli_start+0x874>
				data[data_num].command_index--;
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <cli_start+0x644>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	4926      	ldr	r1, [pc, #152]	; (80009cc <cli_start+0x648>)
 8000932:	4613      	mov	r3, r2
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	4413      	add	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	3320      	adds	r3, #32
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	b2d8      	uxtb	r0, r3
 8000944:	4921      	ldr	r1, [pc, #132]	; (80009cc <cli_start+0x648>)
 8000946:	4613      	mov	r3, r2
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	4413      	add	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	440b      	add	r3, r1
 8000950:	3320      	adds	r3, #32
 8000952:	4602      	mov	r2, r0
 8000954:	701a      	strb	r2, [r3, #0]
				data[data_num].command_buffer[--data[data_num].cursor_index]=0;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <cli_start+0x644>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <cli_start+0x644>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	491a      	ldr	r1, [pc, #104]	; (80009cc <cli_start+0x648>)
 8000964:	4613      	mov	r3, r2
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	4413      	add	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	440b      	add	r3, r1
 800096e:	3321      	adds	r3, #33	; 0x21
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	3b01      	subs	r3, #1
 8000974:	b2dc      	uxtb	r4, r3
 8000976:	4915      	ldr	r1, [pc, #84]	; (80009cc <cli_start+0x648>)
 8000978:	4613      	mov	r3, r2
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	4413      	add	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	440b      	add	r3, r1
 8000982:	3321      	adds	r3, #33	; 0x21
 8000984:	4621      	mov	r1, r4
 8000986:	7019      	strb	r1, [r3, #0]
 8000988:	4910      	ldr	r1, [pc, #64]	; (80009cc <cli_start+0x648>)
 800098a:	4613      	mov	r3, r2
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	4413      	add	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	440b      	add	r3, r1
 8000994:	3321      	adds	r3, #33	; 0x21
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <cli_start+0x648>)
 800099c:	4603      	mov	r3, r0
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	4403      	add	r3, r0
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <cli_start+0x644>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4a06      	ldr	r2, [pc, #24]	; (80009cc <cli_start+0x648>)
 80009b4:	460b      	mov	r3, r1
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	440b      	add	r3, r1
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	3321      	adds	r3, #33	; 0x21
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	73bb      	strb	r3, [r7, #14]
 80009c4:	e030      	b.n	8000a28 <cli_start+0x6a4>
 80009c6:	bf00      	nop
 80009c8:	20000126 	.word	0x20000126
 80009cc:	200000c0 	.word	0x200000c0
 80009d0:	0800361c 	.word	0x0800361c
 80009d4:	08003640 	.word	0x08003640
 80009d8:	aaaaaaab 	.word	0xaaaaaaab
 80009dc:	20000078 	.word	0x20000078
 80009e0:	08003648 	.word	0x08003648
					data[data_num].command_buffer[j]=data[data_num].command_buffer[j+1];
 80009e4:	4bb0      	ldr	r3, [pc, #704]	; (8000ca8 <cli_start+0x924>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461d      	mov	r5, r3
 80009ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009ee:	1c59      	adds	r1, r3, #1
 80009f0:	4bad      	ldr	r3, [pc, #692]	; (8000ca8 <cli_start+0x924>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461c      	mov	r4, r3
 80009f6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80009fa:	48ac      	ldr	r0, [pc, #688]	; (8000cac <cli_start+0x928>)
 80009fc:	462b      	mov	r3, r5
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	442b      	add	r3, r5
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4403      	add	r3, r0
 8000a06:	440b      	add	r3, r1
 8000a08:	7818      	ldrb	r0, [r3, #0]
 8000a0a:	49a8      	ldr	r1, [pc, #672]	; (8000cac <cli_start+0x928>)
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	4423      	add	r3, r4
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	440b      	add	r3, r1
 8000a16:	4413      	add	r3, r2
 8000a18:	4602      	mov	r2, r0
 8000a1a:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8000a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	3301      	adds	r3, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	73bb      	strb	r3, [r7, #14]
 8000a28:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000a2c:	4b9e      	ldr	r3, [pc, #632]	; (8000ca8 <cli_start+0x924>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	499e      	ldr	r1, [pc, #632]	; (8000cac <cli_start+0x928>)
 8000a34:	4603      	mov	r3, r0
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	4403      	add	r3, r0
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	440b      	add	r3, r1
 8000a3e:	3320      	adds	r3, #32
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	dbce      	blt.n	80009e4 <cli_start+0x660>
				}
				data[data_num].command_buffer[data[data_num].command_index]=0;
 8000a46:	4b98      	ldr	r3, [pc, #608]	; (8000ca8 <cli_start+0x924>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4b96      	ldr	r3, [pc, #600]	; (8000ca8 <cli_start+0x924>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	4a96      	ldr	r2, [pc, #600]	; (8000cac <cli_start+0x928>)
 8000a54:	4603      	mov	r3, r0
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	4403      	add	r3, r0
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	3320      	adds	r3, #32
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	4a91      	ldr	r2, [pc, #580]	; (8000cac <cli_start+0x928>)
 8000a66:	460b      	mov	r3, r1
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	440b      	add	r3, r1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	4403      	add	r3, r0
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1D\x1B[1P");
 8000a76:	498e      	ldr	r1, [pc, #568]	; (8000cb0 <cli_start+0x92c>)
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fbbf 	bl	80001fc <uart_send>
			}
			break;
 8000a7e:	e0bb      	b.n	8000bf8 <cli_start+0x874>
		case DEL:
			if(data[data_num].command_index>0 && data[data_num].command_index!=data[data_num].cursor_index){
 8000a80:	4b89      	ldr	r3, [pc, #548]	; (8000ca8 <cli_start+0x924>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4a89      	ldr	r2, [pc, #548]	; (8000cac <cli_start+0x928>)
 8000a88:	460b      	mov	r3, r1
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	440b      	add	r3, r1
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	3320      	adds	r3, #32
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 80b0 	beq.w	8000bfc <cli_start+0x878>
 8000a9c:	4b82      	ldr	r3, [pc, #520]	; (8000ca8 <cli_start+0x924>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4a82      	ldr	r2, [pc, #520]	; (8000cac <cli_start+0x928>)
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	440b      	add	r3, r1
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	3320      	adds	r3, #32
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	4b7d      	ldr	r3, [pc, #500]	; (8000ca8 <cli_start+0x924>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	497c      	ldr	r1, [pc, #496]	; (8000cac <cli_start+0x928>)
 8000aba:	4603      	mov	r3, r0
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	4403      	add	r3, r0
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3321      	adds	r3, #33	; 0x21
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	f000 8097 	beq.w	8000bfc <cli_start+0x878>
				data[data_num].command_index--;
 8000ace:	4b76      	ldr	r3, [pc, #472]	; (8000ca8 <cli_start+0x924>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4975      	ldr	r1, [pc, #468]	; (8000cac <cli_start+0x928>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	4413      	add	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	440b      	add	r3, r1
 8000ae0:	3320      	adds	r3, #32
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	b2d8      	uxtb	r0, r3
 8000ae8:	4970      	ldr	r1, [pc, #448]	; (8000cac <cli_start+0x928>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	4413      	add	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	440b      	add	r3, r1
 8000af4:	3320      	adds	r3, #32
 8000af6:	4602      	mov	r2, r0
 8000af8:	701a      	strb	r2, [r3, #0]
				data[data_num].command_buffer[data[data_num].cursor_index]=0;
 8000afa:	4b6b      	ldr	r3, [pc, #428]	; (8000ca8 <cli_start+0x924>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4b69      	ldr	r3, [pc, #420]	; (8000ca8 <cli_start+0x924>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	4a69      	ldr	r2, [pc, #420]	; (8000cac <cli_start+0x928>)
 8000b08:	4603      	mov	r3, r0
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	4403      	add	r3, r0
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	3321      	adds	r3, #33	; 0x21
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	4a64      	ldr	r2, [pc, #400]	; (8000cac <cli_start+0x928>)
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	440b      	add	r3, r1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	4403      	add	r3, r0
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8000b2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ca8 <cli_start+0x924>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4a5e      	ldr	r2, [pc, #376]	; (8000cac <cli_start+0x928>)
 8000b32:	460b      	mov	r3, r1
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	440b      	add	r3, r1
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3321      	adds	r3, #33	; 0x21
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	737b      	strb	r3, [r7, #13]
 8000b42:	e021      	b.n	8000b88 <cli_start+0x804>
					data[data_num].command_buffer[j]=data[data_num].command_buffer[j+1];
 8000b44:	4b58      	ldr	r3, [pc, #352]	; (8000ca8 <cli_start+0x924>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461d      	mov	r5, r3
 8000b4a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b4e:	1c59      	adds	r1, r3, #1
 8000b50:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <cli_start+0x924>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461c      	mov	r4, r3
 8000b56:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000b5a:	4854      	ldr	r0, [pc, #336]	; (8000cac <cli_start+0x928>)
 8000b5c:	462b      	mov	r3, r5
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	442b      	add	r3, r5
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4403      	add	r3, r0
 8000b66:	440b      	add	r3, r1
 8000b68:	7818      	ldrb	r0, [r3, #0]
 8000b6a:	4950      	ldr	r1, [pc, #320]	; (8000cac <cli_start+0x928>)
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	4423      	add	r3, r4
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	440b      	add	r3, r1
 8000b76:	4413      	add	r3, r2
 8000b78:	4602      	mov	r2, r0
 8000b7a:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8000b7c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	737b      	strb	r3, [r7, #13]
 8000b88:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000b8c:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <cli_start+0x924>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	4946      	ldr	r1, [pc, #280]	; (8000cac <cli_start+0x928>)
 8000b94:	4603      	mov	r3, r0
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	4403      	add	r3, r0
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3320      	adds	r3, #32
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dbce      	blt.n	8000b44 <cli_start+0x7c0>
				}
				data[data_num].command_buffer[data[data_num].command_index]=0;
 8000ba6:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <cli_start+0x924>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <cli_start+0x924>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <cli_start+0x928>)
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	4403      	add	r3, r0
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3320      	adds	r3, #32
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	4a39      	ldr	r2, [pc, #228]	; (8000cac <cli_start+0x928>)
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	440b      	add	r3, r1
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	4403      	add	r3, r0
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1P");
 8000bd6:	4937      	ldr	r1, [pc, #220]	; (8000cb4 <cli_start+0x930>)
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff fb0f 	bl	80001fc <uart_send>
			}
			break;
 8000bde:	e00d      	b.n	8000bfc <cli_start+0x878>
		default:
			break;
 8000be0:	bf00      	nop
 8000be2:	e00c      	b.n	8000bfe <cli_start+0x87a>
			break;
 8000be4:	bf00      	nop
 8000be6:	e00a      	b.n	8000bfe <cli_start+0x87a>
			break;
 8000be8:	bf00      	nop
 8000bea:	e008      	b.n	8000bfe <cli_start+0x87a>
			break;
 8000bec:	bf00      	nop
 8000bee:	e006      	b.n	8000bfe <cli_start+0x87a>
			break;
 8000bf0:	bf00      	nop
 8000bf2:	e004      	b.n	8000bfe <cli_start+0x87a>
			break;
 8000bf4:	bf00      	nop
 8000bf6:	e002      	b.n	8000bfe <cli_start+0x87a>
			break;
 8000bf8:	bf00      	nop
 8000bfa:	e000      	b.n	8000bfe <cli_start+0x87a>
			break;
 8000bfc:	bf00      	nop
	}
	uart_send(2,"\x1B[2J");
 8000bfe:	492e      	ldr	r1, [pc, #184]	; (8000cb8 <cli_start+0x934>)
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff fafb 	bl	80001fc <uart_send>
	for (int8_t j=0;j<3;j++){
 8000c06:	2300      	movs	r3, #0
 8000c08:	733b      	strb	r3, [r7, #12]
 8000c0a:	e014      	b.n	8000c36 <cli_start+0x8b2>
		uart_send(2,"%d. buffer val:%s\n",j,data[j].command_buffer);
 8000c0c:	f997 100c 	ldrsb.w	r1, [r7, #12]
 8000c10:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8000c14:	4613      	mov	r3, r2
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4a23      	ldr	r2, [pc, #140]	; (8000cac <cli_start+0x928>)
 8000c1e:	4413      	add	r3, r2
 8000c20:	460a      	mov	r2, r1
 8000c22:	4926      	ldr	r1, [pc, #152]	; (8000cbc <cli_start+0x938>)
 8000c24:	2002      	movs	r0, #2
 8000c26:	f7ff fae9 	bl	80001fc <uart_send>
	for (int8_t j=0;j<3;j++){
 8000c2a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	733b      	strb	r3, [r7, #12]
 8000c36:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	dde6      	ble.n	8000c0c <cli_start+0x888>
	}
	uart_send(2,"\n\n\n");
 8000c3e:	4920      	ldr	r1, [pc, #128]	; (8000cc0 <cli_start+0x93c>)
 8000c40:	2002      	movs	r0, #2
 8000c42:	f7ff fadb 	bl	80001fc <uart_send>
	uart_send(2,"num %d command buffer val:%s\n",data_num,data[data_num].command_buffer);
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <cli_start+0x924>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <cli_start+0x924>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4613      	mov	r3, r2
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	4413      	add	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <cli_start+0x928>)
 8000c5c:	4413      	add	r3, r2
 8000c5e:	460a      	mov	r2, r1
 8000c60:	4918      	ldr	r1, [pc, #96]	; (8000cc4 <cli_start+0x940>)
 8000c62:	2002      	movs	r0, #2
 8000c64:	f7ff faca 	bl	80001fc <uart_send>
	uart_send(2,"command index:%d cursor index:%d\n",data[data_num].command_index,data[data_num].cursor_index);
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <cli_start+0x924>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <cli_start+0x928>)
 8000c70:	460b      	mov	r3, r1
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	440b      	add	r3, r1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	3320      	adds	r3, #32
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <cli_start+0x924>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <cli_start+0x928>)
 8000c88:	460b      	mov	r3, r1
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	440b      	add	r3, r1
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	3321      	adds	r3, #33	; 0x21
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4602      	mov	r2, r0
 8000c98:	490b      	ldr	r1, [pc, #44]	; (8000cc8 <cli_start+0x944>)
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f7ff faae 	bl	80001fc <uart_send>
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca8:	20000126 	.word	0x20000126
 8000cac:	200000c0 	.word	0x200000c0
 8000cb0:	08003654 	.word	0x08003654
 8000cb4:	08003660 	.word	0x08003660
 8000cb8:	08003668 	.word	0x08003668
 8000cbc:	08003670 	.word	0x08003670
 8000cc0:	08003684 	.word	0x08003684
 8000cc4:	08003688 	.word	0x08003688
 8000cc8:	080036a8 	.word	0x080036a8

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f000 fa79 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 f865 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f7ff fa55 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cde:	f7ff fa35 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ce2:	f000 f949 	bl	8000f78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ce6:	f000 f971 	bl	8000fcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1,&command_tx[0],5);
 8000cea:	2205      	movs	r2, #5
 8000cec:	4927      	ldr	r1, [pc, #156]	; (8000d8c <main+0xc0>)
 8000cee:	4828      	ldr	r0, [pc, #160]	; (8000d90 <main+0xc4>)
 8000cf0:	f001 fe02 	bl	80028f8 <UART_Start_Receive_DMA>
  for (int8_t i=0;i<3;i++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	e012      	b.n	8000d20 <main+0x54>
	  memset(data[i].command_buffer,0,32);
 8000cfa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	4413      	add	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <main+0xc8>)
 8000d08:	4413      	add	r3, r2
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 ffde 	bl	8002cd0 <memset>
  for (int8_t i=0;i<3;i++){
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	dde8      	ble.n	8000cfa <main+0x2e>
  }
  memset(send_buffer,0,32);
 8000d28:	2220      	movs	r2, #32
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	481a      	ldr	r0, [pc, #104]	; (8000d98 <main+0xcc>)
 8000d2e:	f001 ffcf 	bl	8002cd0 <memset>
  uart_send(1,"CLI-# ");
 8000d32:	491a      	ldr	r1, [pc, #104]	; (8000d9c <main+0xd0>)
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fa61 	bl	80001fc <uart_send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t i=0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71bb      	strb	r3, [r7, #6]
	keytype key=KEY_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	717b      	strb	r3, [r7, #5]
	for (;;){
		i=i%5;
 8000d42:	79ba      	ldrb	r2, [r7, #6]
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <main+0xd4>)
 8000d46:	fba3 1302 	umull	r1, r3, r3, r2
 8000d4a:	0899      	lsrs	r1, r3, #2
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	71bb      	strb	r3, [r7, #6]
		key=is_command(&command_tx[0],i);
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <main+0xc0>)
 8000d5c:	f7ff fa82 	bl	8000264 <is_command>
 8000d60:	4603      	mov	r3, r0
 8000d62:	717b      	strb	r3, [r7, #5]
		if (key!=KEY_NONE){
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d103      	bne.n	8000d72 <main+0xa6>
			break;
		}
		i++;
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	71bb      	strb	r3, [r7, #6]
		i=i%5;
 8000d70:	e7e7      	b.n	8000d42 <main+0x76>
			break;
 8000d72:	bf00      	nop
	  }
	cli_start(&command_tx[0],i,key);
 8000d74:	797a      	ldrb	r2, [r7, #5]
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <main+0xc0>)
 8000d7c:	f7ff fb02 	bl	8000384 <cli_start>
	memset(command_tx,0,5);
 8000d80:	2205      	movs	r2, #5
 8000d82:	2100      	movs	r1, #0
 8000d84:	4801      	ldr	r0, [pc, #4]	; (8000d8c <main+0xc0>)
 8000d86:	f001 ffa3 	bl	8002cd0 <memset>
  {
 8000d8a:	e7d6      	b.n	8000d3a <main+0x6e>
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	2000012c 	.word	0x2000012c
 8000d94:	200000c0 	.word	0x200000c0
 8000d98:	20000080 	.word	0x20000080
 8000d9c:	080036cc 	.word	0x080036cc
 8000da0:	cccccccd 	.word	0xcccccccd

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b090      	sub	sp, #64	; 0x40
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 ff8c 	bl	8002cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000de2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fef1 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000df8:	f000 f819 	bl	8000e2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	2302      	movs	r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2102      	movs	r1, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 f95e 	bl	80020d8 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e22:	f000 f804 	bl	8000e2e <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3740      	adds	r7, #64	; 0x40
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e32:	b672      	cpsid	i
}
 8000e34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <Error_Handler+0x8>

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x60>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_MspInit+0x60>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f000 f9b7 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA1_Channel5_IRQHandler+0x10>)
 8000ef2:	f000 fbb7 	bl	8001664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001bc 	.word	0x200001bc

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f001 fed6 	bl	8002ce0 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20005000 	.word	0x20005000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000128 	.word	0x20000128
 8000f68:	20000350 	.word	0x20000350

08000f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_USART1_UART_Init+0x50>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	f001 fa20 	bl	80023f4 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fba:	f7ff ff38 	bl	8000e2e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000012c 	.word	0x2000012c
 8000fc8:	40013800 	.word	0x40013800

08000fcc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART2_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART2_UART_Init+0x4c>)
 8001004:	f001 f9f6 	bl	80023f4 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f7ff ff0e 	bl	8000e2e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000174 	.word	0x20000174
 800101c:	40004400 	.word	0x40004400

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a4a      	ldr	r2, [pc, #296]	; (8001164 <HAL_UART_MspInit+0x144>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d158      	bne.n	80010f2 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001040:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HAL_UART_MspInit+0x148>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_UART_MspInit+0x148>)
 8001046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_UART_MspInit+0x148>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_UART_MspInit+0x148>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a42      	ldr	r2, [pc, #264]	; (8001168 <HAL_UART_MspInit+0x148>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b40      	ldr	r3, [pc, #256]	; (8001168 <HAL_UART_MspInit+0x148>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	4619      	mov	r1, r3
 8001084:	4839      	ldr	r0, [pc, #228]	; (800116c <HAL_UART_MspInit+0x14c>)
 8001086:	f000 fc21 	bl	80018cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800108a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	4619      	mov	r1, r3
 800109e:	4833      	ldr	r0, [pc, #204]	; (800116c <HAL_UART_MspInit+0x14c>)
 80010a0:	f000 fc14 	bl	80018cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010a6:	4a33      	ldr	r2, [pc, #204]	; (8001174 <HAL_UART_MspInit+0x154>)
 80010a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010ca:	2220      	movs	r2, #32
 80010cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010d4:	4826      	ldr	r0, [pc, #152]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010d6:	f000 fa0b 	bl	80014f0 <HAL_DMA_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80010e0:	f7ff fea5 	bl	8000e2e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a22      	ldr	r2, [pc, #136]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80010ea:	4a21      	ldr	r2, [pc, #132]	; (8001170 <HAL_UART_MspInit+0x150>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010f0:	e034      	b.n	800115c <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a20      	ldr	r2, [pc, #128]	; (8001178 <HAL_UART_MspInit+0x158>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d12f      	bne.n	800115c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_UART_MspInit+0x148>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <HAL_UART_MspInit+0x148>)
 8001102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001106:	61d3      	str	r3, [r2, #28]
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x148>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0x148>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_UART_MspInit+0x148>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_UART_MspInit+0x148>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800112c:	2304      	movs	r3, #4
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4619      	mov	r1, r3
 800113e:	480b      	ldr	r0, [pc, #44]	; (800116c <HAL_UART_MspInit+0x14c>)
 8001140:	f000 fbc4 	bl	80018cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001144:	2308      	movs	r3, #8
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4619      	mov	r1, r3
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_UART_MspInit+0x14c>)
 8001158:	f000 fbb8 	bl	80018cc <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40013800 	.word	0x40013800
 8001168:	40021000 	.word	0x40021000
 800116c:	40010800 	.word	0x40010800
 8001170:	200001bc 	.word	0x200001bc
 8001174:	40020058 	.word	0x40020058
 8001178:	40004400 	.word	0x40004400

0800117c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff fef6 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001182:	490c      	ldr	r1, [pc, #48]	; (80011b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001198:	4c09      	ldr	r4, [pc, #36]	; (80011c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f001 fda1 	bl	8002cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff fd8f 	bl	8000ccc <main>
  bx lr
 80011ae:	4770      	bx	lr
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011b8:	0800373c 	.word	0x0800373c
  ldr r2, =_sbss
 80011bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011c0:	2000034c 	.word	0x2000034c

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x28>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f947 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fe28 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f95f 	bl	80014d6 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f927 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x1c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x20>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a03      	ldr	r2, [pc, #12]	; (8001274 <HAL_IncTick+0x20>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000008 	.word	0x20000008
 8001274:	20000200 	.word	0x20000200

08001278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <HAL_GetTick+0x10>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000200 	.word	0x20000200

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff fff0 	bl	8001278 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffe0 	bl	8001278 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4906      	ldr	r1, [pc, #24]	; (800136c <__NVIC_EnableIRQ+0x34>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff90 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff2d 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff42 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff35 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e043      	b.n	800158e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_DMA_Init+0xa8>)
 800150e:	4413      	add	r3, r2
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <HAL_DMA_Init+0xac>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	009a      	lsls	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_DMA_Init+0xb0>)
 8001522:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800153a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800153e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	bffdfff8 	.word	0xbffdfff8
 800159c:	cccccccd 	.word	0xcccccccd
 80015a0:	40020000 	.word	0x40020000

080015a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_DMA_Start_IT+0x20>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e04b      	b.n	800165c <HAL_DMA_Start_IT+0xb8>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d13a      	bne.n	800164e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f937 	bl	8001870 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 020e 	orr.w	r2, r2, #14
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e00f      	b.n	800163c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0204 	bic.w	r2, r2, #4
 800162a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 020a 	orr.w	r2, r2, #10
 800163a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e005      	b.n	800165a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001656:	2302      	movs	r3, #2
 8001658:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800165a:	7dfb      	ldrb	r3, [r7, #23]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2204      	movs	r2, #4
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d04f      	beq.n	800172c <HAL_DMA_IRQHandler+0xc8>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	d04a      	beq.n	800172c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a66      	ldr	r2, [pc, #408]	; (8001854 <HAL_DMA_IRQHandler+0x1f0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d029      	beq.n	8001712 <HAL_DMA_IRQHandler+0xae>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a65      	ldr	r2, [pc, #404]	; (8001858 <HAL_DMA_IRQHandler+0x1f4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d022      	beq.n	800170e <HAL_DMA_IRQHandler+0xaa>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a63      	ldr	r2, [pc, #396]	; (800185c <HAL_DMA_IRQHandler+0x1f8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01a      	beq.n	8001708 <HAL_DMA_IRQHandler+0xa4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a62      	ldr	r2, [pc, #392]	; (8001860 <HAL_DMA_IRQHandler+0x1fc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d012      	beq.n	8001702 <HAL_DMA_IRQHandler+0x9e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a60      	ldr	r2, [pc, #384]	; (8001864 <HAL_DMA_IRQHandler+0x200>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00a      	beq.n	80016fc <HAL_DMA_IRQHandler+0x98>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a5f      	ldr	r2, [pc, #380]	; (8001868 <HAL_DMA_IRQHandler+0x204>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <HAL_DMA_IRQHandler+0x92>
 80016f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f4:	e00e      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 80016f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016fa:	e00b      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 80016fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001700:	e008      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001706:	e005      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170c:	e002      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	e000      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001712:	2304      	movs	r3, #4
 8001714:	4a55      	ldr	r2, [pc, #340]	; (800186c <HAL_DMA_IRQHandler+0x208>)
 8001716:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8094 	beq.w	800184a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800172a:	e08e      	b.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2202      	movs	r2, #2
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d056      	beq.n	80017ea <HAL_DMA_IRQHandler+0x186>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d051      	beq.n	80017ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10b      	bne.n	800176c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 020a 	bic.w	r2, r2, #10
 8001762:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a38      	ldr	r2, [pc, #224]	; (8001854 <HAL_DMA_IRQHandler+0x1f0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d029      	beq.n	80017ca <HAL_DMA_IRQHandler+0x166>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a37      	ldr	r2, [pc, #220]	; (8001858 <HAL_DMA_IRQHandler+0x1f4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d022      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x162>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a35      	ldr	r2, [pc, #212]	; (800185c <HAL_DMA_IRQHandler+0x1f8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01a      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x15c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a34      	ldr	r2, [pc, #208]	; (8001860 <HAL_DMA_IRQHandler+0x1fc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d012      	beq.n	80017ba <HAL_DMA_IRQHandler+0x156>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a32      	ldr	r2, [pc, #200]	; (8001864 <HAL_DMA_IRQHandler+0x200>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x150>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a31      	ldr	r2, [pc, #196]	; (8001868 <HAL_DMA_IRQHandler+0x204>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d102      	bne.n	80017ae <HAL_DMA_IRQHandler+0x14a>
 80017a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017ac:	e00e      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b2:	e00b      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b8:	e008      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	e005      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c4:	e002      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017c6:	2320      	movs	r3, #32
 80017c8:	e000      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ca:	2302      	movs	r3, #2
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_DMA_IRQHandler+0x208>)
 80017ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d034      	beq.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017e8:	e02f      	b.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2208      	movs	r2, #8
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d028      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d023      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020e 	bic.w	r2, r2, #14
 8001812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	2b00      	cmp	r3, #0
 8001840:	d004      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
    }
  }
  return;
 800184a:	bf00      	nop
 800184c:	bf00      	nop
}
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40020008 	.word	0x40020008
 8001858:	4002001c 	.word	0x4002001c
 800185c:	40020030 	.word	0x40020030
 8001860:	40020044 	.word	0x40020044
 8001864:	40020058 	.word	0x40020058
 8001868:	4002006c 	.word	0x4002006c
 800186c:	40020000 	.word	0x40020000

08001870 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d108      	bne.n	80018b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018ae:	e007      	b.n	80018c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	e169      	b.n	8001bb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e0:	2201      	movs	r2, #1
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8158 	bne.w	8001bae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a9a      	ldr	r2, [pc, #616]	; (8001b6c <HAL_GPIO_Init+0x2a0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d05e      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001908:	4a98      	ldr	r2, [pc, #608]	; (8001b6c <HAL_GPIO_Init+0x2a0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d875      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800190e:	4a98      	ldr	r2, [pc, #608]	; (8001b70 <HAL_GPIO_Init+0x2a4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d058      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001914:	4a96      	ldr	r2, [pc, #600]	; (8001b70 <HAL_GPIO_Init+0x2a4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d86f      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800191a:	4a96      	ldr	r2, [pc, #600]	; (8001b74 <HAL_GPIO_Init+0x2a8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d052      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001920:	4a94      	ldr	r2, [pc, #592]	; (8001b74 <HAL_GPIO_Init+0x2a8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d869      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001926:	4a94      	ldr	r2, [pc, #592]	; (8001b78 <HAL_GPIO_Init+0x2ac>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d04c      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 800192c:	4a92      	ldr	r2, [pc, #584]	; (8001b78 <HAL_GPIO_Init+0x2ac>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d863      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001932:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d046      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001938:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d85d      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800193e:	2b12      	cmp	r3, #18
 8001940:	d82a      	bhi.n	8001998 <HAL_GPIO_Init+0xcc>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d859      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <HAL_GPIO_Init+0x80>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019a1 	.word	0x080019a1
 8001954:	080019b3 	.word	0x080019b3
 8001958:	080019f5 	.word	0x080019f5
 800195c:	080019fb 	.word	0x080019fb
 8001960:	080019fb 	.word	0x080019fb
 8001964:	080019fb 	.word	0x080019fb
 8001968:	080019fb 	.word	0x080019fb
 800196c:	080019fb 	.word	0x080019fb
 8001970:	080019fb 	.word	0x080019fb
 8001974:	080019fb 	.word	0x080019fb
 8001978:	080019fb 	.word	0x080019fb
 800197c:	080019fb 	.word	0x080019fb
 8001980:	080019fb 	.word	0x080019fb
 8001984:	080019fb 	.word	0x080019fb
 8001988:	080019fb 	.word	0x080019fb
 800198c:	080019fb 	.word	0x080019fb
 8001990:	080019a9 	.word	0x080019a9
 8001994:	080019bd 	.word	0x080019bd
 8001998:	4a79      	ldr	r2, [pc, #484]	; (8001b80 <HAL_GPIO_Init+0x2b4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199e:	e02c      	b.n	80019fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e029      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	3304      	adds	r3, #4
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e024      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	3308      	adds	r3, #8
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e01f      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	330c      	adds	r3, #12
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e01a      	b.n	80019fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ce:	2304      	movs	r3, #4
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e013      	b.n	80019fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	611a      	str	r2, [r3, #16]
          break;
 80019e6:	e009      	b.n	80019fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	615a      	str	r2, [r3, #20]
          break;
 80019f2:	e003      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x130>
          break;
 80019fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d801      	bhi.n	8001a06 <HAL_GPIO_Init+0x13a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_Init+0x13e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2bff      	cmp	r3, #255	; 0xff
 8001a10:	d802      	bhi.n	8001a18 <HAL_GPIO_Init+0x14c>
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x152>
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	3b08      	subs	r3, #8
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	210f      	movs	r1, #15
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	6a39      	ldr	r1, [r7, #32]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80b1 	beq.w	8001bae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4c:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	; (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_GPIO_Init+0x2bc>)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a40      	ldr	r2, [pc, #256]	; (8001b8c <HAL_GPIO_Init+0x2c0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d013      	beq.n	8001ab8 <HAL_GPIO_Init+0x1ec>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3f      	ldr	r2, [pc, #252]	; (8001b90 <HAL_GPIO_Init+0x2c4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d00d      	beq.n	8001ab4 <HAL_GPIO_Init+0x1e8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a3e      	ldr	r2, [pc, #248]	; (8001b94 <HAL_GPIO_Init+0x2c8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d007      	beq.n	8001ab0 <HAL_GPIO_Init+0x1e4>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3d      	ldr	r2, [pc, #244]	; (8001b98 <HAL_GPIO_Init+0x2cc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_GPIO_Init+0x1e0>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001aac:	2304      	movs	r3, #4
 8001aae:	e004      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e002      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abc:	f002 0203 	and.w	r2, r2, #3
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	4093      	lsls	r3, r2
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aca:	492f      	ldr	r1, [pc, #188]	; (8001b88 <HAL_GPIO_Init+0x2bc>)
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	492c      	ldr	r1, [pc, #176]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4928      	ldr	r1, [pc, #160]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	4922      	ldr	r1, [pc, #136]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	491e      	ldr	r1, [pc, #120]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4918      	ldr	r1, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4914      	ldr	r1, [pc, #80]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d021      	beq.n	8001ba0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	490e      	ldr	r1, [pc, #56]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e021      	b.n	8001bae <HAL_GPIO_Init+0x2e2>
 8001b6a:	bf00      	nop
 8001b6c:	10320000 	.word	0x10320000
 8001b70:	10310000 	.word	0x10310000
 8001b74:	10220000 	.word	0x10220000
 8001b78:	10210000 	.word	0x10210000
 8001b7c:	10120000 	.word	0x10120000
 8001b80:	10110000 	.word	0x10110000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40010800 	.word	0x40010800
 8001b90:	40010c00 	.word	0x40010c00
 8001b94:	40011000 	.word	0x40011000
 8001b98:	40011400 	.word	0x40011400
 8001b9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4909      	ldr	r1, [pc, #36]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f47f ae8e 	bne.w	80018e0 <HAL_GPIO_Init+0x14>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	372c      	adds	r7, #44	; 0x2c
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e272      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8087 	beq.w	8001d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d00c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c00:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d112      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
 8001c0c:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d10b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d06c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x12c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d168      	bne.n	8001d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e24c      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x76>
 8001c3c:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a7f      	ldr	r2, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e02e      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b7b      	ldr	r3, [pc, #492]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7a      	ldr	r2, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e01d      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0xbc>
 8001c76:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a71      	ldr	r2, [pc, #452]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c90:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fae2 	bl	8001278 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fade 	bl	8001278 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e200      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xe4>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff face 	bl	8001278 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff faca 	bl	8001278 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1ec      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x10c>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d063      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d11c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1c0      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4939      	ldr	r1, [pc, #228]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	e03a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fa83 	bl	8001278 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff fa7f 	bl	8001278 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1a1      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fa62 	bl	8001278 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff fa5e 	bl	8001278 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e180      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03a      	beq.n	8001e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d019      	beq.n	8001e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fa42 	bl	8001278 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fa3e 	bl	8001278 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e160      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 face 	bl	80023b8 <RCC_Delay>
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fa28 	bl	8001278 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fa24 	bl	8001278 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d908      	bls.n	8001e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e146      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	42420000 	.word	0x42420000
 8001e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b92      	ldr	r3, [pc, #584]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e9      	bne.n	8001e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a6 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b8b      	ldr	r3, [pc, #556]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a87      	ldr	r2, [pc, #540]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b82      	ldr	r3, [pc, #520]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d118      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7e      	ldr	r2, [pc, #504]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f9e5 	bl	8001278 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7ff f9e1 	bl	8001278 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	; 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e103      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b75      	ldr	r3, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x312>
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e02d      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x334>
 8001eee:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a69      	ldr	r2, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	e01c      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x356>
 8001f10:	4b61      	ldr	r3, [pc, #388]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a60      	ldr	r2, [pc, #384]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a5d      	ldr	r2, [pc, #372]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a5a      	ldr	r2, [pc, #360]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b58      	ldr	r3, [pc, #352]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a57      	ldr	r2, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f995 	bl	8001278 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff f991 	bl	8001278 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0b1      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ee      	beq.n	8001f52 <HAL_RCC_OscConfig+0x37e>
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7ff f97f 	bl	8001278 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff f97b 	bl	8001278 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e09b      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	4b40      	ldr	r3, [pc, #256]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8087 	beq.w	80020ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fbc:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d061      	beq.n	800208c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d146      	bne.n	800205e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff f94f 	bl	8001278 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff f94b 	bl	8001278 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e06d      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d108      	bne.n	8002018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4921      	ldr	r1, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002018:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a19      	ldr	r1, [r3, #32]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	430b      	orrs	r3, r1
 800202a:	491b      	ldr	r1, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff f91f 	bl	8001278 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff f91b 	bl	8001278 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e03d      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x46a>
 800205c:	e035      	b.n	80020ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff f908 	bl	8001278 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff f904 	bl	8001278 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e026      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x498>
 800208a:	e01e      	b.n	80020ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e019      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
 80020a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_OscConfig+0x500>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0d0      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d910      	bls.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4965      	ldr	r1, [pc, #404]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a58      	ldr	r2, [pc, #352]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800213e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a52      	ldr	r2, [pc, #328]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d040      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d115      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e073      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e06b      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4936      	ldr	r1, [pc, #216]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c8:	f7ff f856 	bl	8001278 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7ff f852 	bl	8001278 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e053      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d210      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4922      	ldr	r1, [pc, #136]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	490a      	ldr	r1, [pc, #40]	; (80022a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	5ccb      	ldrb	r3, [r1, r3]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe ffb4 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40022000 	.word	0x40022000
 800229c:	40021000 	.word	0x40021000
 80022a0:	080036d4 	.word	0x080036d4
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000004 	.word	0x20000004

080022ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x30>
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x36>
 80022da:	e027      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 80022de:	613b      	str	r3, [r7, #16]
      break;
 80022e0:	e027      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	4a17      	ldr	r2, [pc, #92]	; (8002348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ec:	5cd3      	ldrb	r3, [r2, r3]
 80022ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d010      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0c5b      	lsrs	r3, r3, #17
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	fb03 f202 	mul.w	r2, r3, r2
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e004      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	613b      	str	r3, [r7, #16]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 800232e:	613b      	str	r3, [r7, #16]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	693b      	ldr	r3, [r7, #16]
}
 8002334:	4618      	mov	r0, r3
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	007a1200 	.word	0x007a1200
 8002348:	080036ec 	.word	0x080036ec
 800234c:	080036fc 	.word	0x080036fc
 8002350:	003d0900 	.word	0x003d0900

08002354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_RCC_GetHCLKFreq+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000000 	.word	0x20000000

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff2 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	080036e4 	.word	0x080036e4

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002394:	f7ff ffde 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	080036e4 	.word	0x080036e4

080023b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <RCC_Delay+0x34>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <RCC_Delay+0x38>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d4:	bf00      	nop
  }
  while (Delay --);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <RCC_Delay+0x1c>
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000000 	.word	0x20000000
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e042      	b.n	800248c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fe00 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fb81 	bl	8002b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800244c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800245c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800246c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d16d      	bne.n	8002590 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_UART_Transmit+0x2c>
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e066      	b.n	8002592 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2221      	movs	r2, #33	; 0x21
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024d2:	f7fe fed1 	bl	8001278 <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	88fa      	ldrh	r2, [r7, #6]
 80024dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ec:	d108      	bne.n	8002500 <HAL_UART_Transmit+0x6c>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d104      	bne.n	8002500 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	e003      	b.n	8002508 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002508:	e02a      	b.n	8002560 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f980 	bl	800281a <UART_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e036      	b.n	8002592 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10b      	bne.n	8002542 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3302      	adds	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e007      	b.n	8002552 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3301      	adds	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1cf      	bne.n	800250a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f950 	bl	800281a <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e006      	b.n	8002592 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	4613      	mov	r3, r2
 80025a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d112      	bne.n	80025da <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_UART_Receive_DMA+0x26>
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e00b      	b.n	80025dc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	461a      	mov	r2, r3
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f991 	bl	80028f8 <UART_Start_Receive_DMA>
 80025d6:	4603      	mov	r3, r0
 80025d8:	e000      	b.n	80025dc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b09c      	sub	sp, #112	; 0x70
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d172      	bne.n	8002720 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800263a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263c:	2200      	movs	r2, #0
 800263e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002656:	66bb      	str	r3, [r7, #104]	; 0x68
 8002658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002660:	65ba      	str	r2, [r7, #88]	; 0x58
 8002662:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800266e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	e853 3f00 	ldrex	r3, [r3]
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	667b      	str	r3, [r7, #100]	; 0x64
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3314      	adds	r3, #20
 8002692:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002694:	647a      	str	r2, [r7, #68]	; 0x44
 8002696:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800269a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800269c:	e841 2300 	strex	r3, r2, [r1]
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e5      	bne.n	8002674 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3314      	adds	r3, #20
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	e853 3f00 	ldrex	r3, [r3]
 80026b6:	623b      	str	r3, [r7, #32]
   return(result);
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026be:	663b      	str	r3, [r7, #96]	; 0x60
 80026c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3314      	adds	r3, #20
 80026c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026c8:	633a      	str	r2, [r7, #48]	; 0x30
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d0:	e841 2300 	strex	r3, r2, [r1]
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e5      	bne.n	80026a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d119      	bne.n	8002720 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	330c      	adds	r3, #12
 80026f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	e853 3f00 	ldrex	r3, [r3]
 80026fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0310 	bic.w	r3, r3, #16
 8002702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800270c:	61fa      	str	r2, [r7, #28]
 800270e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002710:	69b9      	ldr	r1, [r7, #24]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	e841 2300 	strex	r3, r2, [r1]
 8002718:	617b      	str	r3, [r7, #20]
   return(result);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e5      	bne.n	80026ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	2200      	movs	r2, #0
 8002724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	2b01      	cmp	r3, #1
 800272c:	d106      	bne.n	800273c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002732:	4619      	mov	r1, r3
 8002734:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002736:	f7ff ff67 	bl	8002608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800273a:	e002      	b.n	8002742 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800273c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800273e:	f7fd fd45 	bl	80001cc <HAL_UART_RxCpltCallback>
}
 8002742:	bf00      	nop
 8002744:	3770      	adds	r7, #112	; 0x70
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	b29b      	uxth	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ff49 	bl	8002608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002776:	e002      	b.n	800277e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ff33 	bl	80025e4 <HAL_UART_RxHalfCpltCallback>
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b21      	cmp	r3, #33	; 0x21
 80027b8:	d108      	bne.n	80027cc <UART_DMAError+0x46>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80027c6:	68b8      	ldr	r0, [r7, #8]
 80027c8:	f000 f930 	bl	8002a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b22      	cmp	r3, #34	; 0x22
 80027ec:	d108      	bne.n	8002800 <UART_DMAError+0x7a>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80027fa:	68b8      	ldr	r0, [r7, #8]
 80027fc:	f000 f93d 	bl	8002a7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f043 0210 	orr.w	r2, r3, #16
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800280c:	68b8      	ldr	r0, [r7, #8]
 800280e:	f7ff fef2 	bl	80025f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b090      	sub	sp, #64	; 0x40
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282a:	e050      	b.n	80028ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d04c      	beq.n	80028ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <UART_WaitOnFlagUntilTimeout+0x30>
 800283a:	f7fe fd1d 	bl	8001278 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002846:	429a      	cmp	r2, r3
 8002848:	d241      	bcs.n	80028ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800286a:	637a      	str	r2, [r7, #52]	; 0x34
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3314      	adds	r3, #20
 8002884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	e853 3f00 	ldrex	r3, [r3]
 800288c:	613b      	str	r3, [r7, #16]
   return(result);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	63bb      	str	r3, [r7, #56]	; 0x38
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3314      	adds	r3, #20
 800289c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800289e:	623a      	str	r2, [r7, #32]
 80028a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	69f9      	ldr	r1, [r7, #28]
 80028a4:	6a3a      	ldr	r2, [r7, #32]
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e5      	bne.n	800287e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e00f      	b.n	80028ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d09f      	beq.n	800282c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3740      	adds	r7, #64	; 0x40
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b098      	sub	sp, #96	; 0x60
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	88fa      	ldrh	r2, [r7, #6]
 8002910:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2222      	movs	r2, #34	; 0x22
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	4a3e      	ldr	r2, [pc, #248]	; (8002a20 <UART_Start_Receive_DMA+0x128>)
 8002926:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	4a3d      	ldr	r2, [pc, #244]	; (8002a24 <UART_Start_Receive_DMA+0x12c>)
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <UART_Start_Receive_DMA+0x130>)
 8002936:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	2200      	movs	r2, #0
 800293e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002940:	f107 0308 	add.w	r3, r7, #8
 8002944:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3304      	adds	r3, #4
 8002950:	4619      	mov	r1, r3
 8002952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	f7fe fe24 	bl	80015a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d019      	beq.n	80029ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002984:	e853 3f00 	ldrex	r3, [r3]
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	65bb      	str	r3, [r7, #88]	; 0x58
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800299a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800299c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80029a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029a2:	e841 2300 	strex	r3, r2, [r1]
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80029a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1e5      	bne.n	800297a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3314      	adds	r3, #20
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	657b      	str	r3, [r7, #84]	; 0x54
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3314      	adds	r3, #20
 80029cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029d6:	e841 2300 	strex	r3, r2, [r1]
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e5      	bne.n	80029ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3314      	adds	r3, #20
 80029e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	e853 3f00 	ldrex	r3, [r3]
 80029f0:	617b      	str	r3, [r7, #20]
   return(result);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f8:	653b      	str	r3, [r7, #80]	; 0x50
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3314      	adds	r3, #20
 8002a00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a02:	627a      	str	r2, [r7, #36]	; 0x24
 8002a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a06:	6a39      	ldr	r1, [r7, #32]
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	e841 2300 	strex	r3, r2, [r1]
 8002a0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1e5      	bne.n	80029e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3760      	adds	r7, #96	; 0x60
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	0800261f 	.word	0x0800261f
 8002a24:	0800274b 	.word	0x0800274b
 8002a28:	08002787 	.word	0x08002787

08002a2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	61ba      	str	r2, [r7, #24]
 8002a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	6979      	ldr	r1, [r7, #20]
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	613b      	str	r3, [r7, #16]
   return(result);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e5      	bne.n	8002a34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002a70:	bf00      	nop
 8002a72:	3724      	adds	r7, #36	; 0x24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b095      	sub	sp, #84	; 0x54
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	330c      	adds	r3, #12
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8c:	e853 3f00 	ldrex	r3, [r3]
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aa2:	643a      	str	r2, [r7, #64]	; 0x40
 8002aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002aaa:	e841 2300 	strex	r3, r2, [r1]
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e5      	bne.n	8002a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1e5      	bne.n	8002ab6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d119      	bne.n	8002b26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f023 0310 	bic.w	r3, r3, #16
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b12:	61ba      	str	r2, [r7, #24]
 8002b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	6979      	ldr	r1, [r7, #20]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e5      	bne.n	8002af2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b34:	bf00      	nop
 8002b36:	3754      	adds	r7, #84	; 0x54
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
	...

08002b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b7a:	f023 030c 	bic.w	r3, r3, #12
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <UART_SetConfig+0x114>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d103      	bne.n	8002bb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7ff fbf2 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	e002      	b.n	8002bb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bb0:	f7ff fbda 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8002bb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009a      	lsls	r2, r3, #2
 8002bc0:	441a      	add	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <UART_SetConfig+0x118>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	0119      	lsls	r1, r3, #4
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009a      	lsls	r2, r3, #2
 8002be0:	441a      	add	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <UART_SetConfig+0x118>)
 8002bee:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2064      	movs	r0, #100	; 0x64
 8002bf6:	fb00 f303 	mul.w	r3, r0, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	3332      	adds	r3, #50	; 0x32
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <UART_SetConfig+0x118>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0c:	4419      	add	r1, r3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	009a      	lsls	r2, r3, #2
 8002c18:	441a      	add	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <UART_SetConfig+0x118>)
 8002c26:	fba3 0302 	umull	r0, r3, r3, r2
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2064      	movs	r0, #100	; 0x64
 8002c2e:	fb00 f303 	mul.w	r3, r0, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	3332      	adds	r3, #50	; 0x32
 8002c38:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <UART_SetConfig+0x118>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	440a      	add	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40013800 	.word	0x40013800
 8002c58:	51eb851f 	.word	0x51eb851f

08002c5c <_vsniprintf_r>:
 8002c5c:	b530      	push	{r4, r5, lr}
 8002c5e:	4614      	mov	r4, r2
 8002c60:	2c00      	cmp	r4, #0
 8002c62:	4605      	mov	r5, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	b09b      	sub	sp, #108	; 0x6c
 8002c68:	da05      	bge.n	8002c76 <_vsniprintf_r+0x1a>
 8002c6a:	238b      	movs	r3, #139	; 0x8b
 8002c6c:	6003      	str	r3, [r0, #0]
 8002c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c72:	b01b      	add	sp, #108	; 0x6c
 8002c74:	bd30      	pop	{r4, r5, pc}
 8002c76:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002c7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002c7e:	bf0c      	ite	eq
 8002c80:	4623      	moveq	r3, r4
 8002c82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002c86:	9302      	str	r3, [sp, #8]
 8002c88:	9305      	str	r3, [sp, #20]
 8002c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c8e:	9100      	str	r1, [sp, #0]
 8002c90:	9104      	str	r1, [sp, #16]
 8002c92:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002c96:	4669      	mov	r1, sp
 8002c98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002c9a:	f000 f99b 	bl	8002fd4 <_svfiprintf_r>
 8002c9e:	1c43      	adds	r3, r0, #1
 8002ca0:	bfbc      	itt	lt
 8002ca2:	238b      	movlt	r3, #139	; 0x8b
 8002ca4:	602b      	strlt	r3, [r5, #0]
 8002ca6:	2c00      	cmp	r4, #0
 8002ca8:	d0e3      	beq.n	8002c72 <_vsniprintf_r+0x16>
 8002caa:	2200      	movs	r2, #0
 8002cac:	9b00      	ldr	r3, [sp, #0]
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e7df      	b.n	8002c72 <_vsniprintf_r+0x16>
	...

08002cb4 <vsniprintf>:
 8002cb4:	b507      	push	{r0, r1, r2, lr}
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	460a      	mov	r2, r1
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	4803      	ldr	r0, [pc, #12]	; (8002ccc <vsniprintf+0x18>)
 8002cc0:	6800      	ldr	r0, [r0, #0]
 8002cc2:	f7ff ffcb 	bl	8002c5c <_vsniprintf_r>
 8002cc6:	b003      	add	sp, #12
 8002cc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ccc:	20000058 	.word	0x20000058

08002cd0 <memset>:
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4402      	add	r2, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <memset+0xa>
 8002cd8:	4770      	bx	lr
 8002cda:	f803 1b01 	strb.w	r1, [r3], #1
 8002cde:	e7f9      	b.n	8002cd4 <memset+0x4>

08002ce0 <__errno>:
 8002ce0:	4b01      	ldr	r3, [pc, #4]	; (8002ce8 <__errno+0x8>)
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000058 	.word	0x20000058

08002cec <__libc_init_array>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	2600      	movs	r6, #0
 8002cf0:	4d0c      	ldr	r5, [pc, #48]	; (8002d24 <__libc_init_array+0x38>)
 8002cf2:	4c0d      	ldr	r4, [pc, #52]	; (8002d28 <__libc_init_array+0x3c>)
 8002cf4:	1b64      	subs	r4, r4, r5
 8002cf6:	10a4      	asrs	r4, r4, #2
 8002cf8:	42a6      	cmp	r6, r4
 8002cfa:	d109      	bne.n	8002d10 <__libc_init_array+0x24>
 8002cfc:	f000 fc7a 	bl	80035f4 <_init>
 8002d00:	2600      	movs	r6, #0
 8002d02:	4d0a      	ldr	r5, [pc, #40]	; (8002d2c <__libc_init_array+0x40>)
 8002d04:	4c0a      	ldr	r4, [pc, #40]	; (8002d30 <__libc_init_array+0x44>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	42a6      	cmp	r6, r4
 8002d0c:	d105      	bne.n	8002d1a <__libc_init_array+0x2e>
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d14:	4798      	blx	r3
 8002d16:	3601      	adds	r6, #1
 8002d18:	e7ee      	b.n	8002cf8 <__libc_init_array+0xc>
 8002d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1e:	4798      	blx	r3
 8002d20:	3601      	adds	r6, #1
 8002d22:	e7f2      	b.n	8002d0a <__libc_init_array+0x1e>
 8002d24:	08003734 	.word	0x08003734
 8002d28:	08003734 	.word	0x08003734
 8002d2c:	08003734 	.word	0x08003734
 8002d30:	08003738 	.word	0x08003738

08002d34 <__retarget_lock_acquire_recursive>:
 8002d34:	4770      	bx	lr

08002d36 <__retarget_lock_release_recursive>:
 8002d36:	4770      	bx	lr

08002d38 <_free_r>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	4605      	mov	r5, r0
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	d040      	beq.n	8002dc2 <_free_r+0x8a>
 8002d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d44:	1f0c      	subs	r4, r1, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bfb8      	it	lt
 8002d4a:	18e4      	addlt	r4, r4, r3
 8002d4c:	f000 f8dc 	bl	8002f08 <__malloc_lock>
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <_free_r+0x8c>)
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	b933      	cbnz	r3, 8002d64 <_free_r+0x2c>
 8002d56:	6063      	str	r3, [r4, #4]
 8002d58:	6014      	str	r4, [r2, #0]
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d60:	f000 b8d8 	b.w	8002f14 <__malloc_unlock>
 8002d64:	42a3      	cmp	r3, r4
 8002d66:	d908      	bls.n	8002d7a <_free_r+0x42>
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	1821      	adds	r1, r4, r0
 8002d6c:	428b      	cmp	r3, r1
 8002d6e:	bf01      	itttt	eq
 8002d70:	6819      	ldreq	r1, [r3, #0]
 8002d72:	685b      	ldreq	r3, [r3, #4]
 8002d74:	1809      	addeq	r1, r1, r0
 8002d76:	6021      	streq	r1, [r4, #0]
 8002d78:	e7ed      	b.n	8002d56 <_free_r+0x1e>
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	b10b      	cbz	r3, 8002d84 <_free_r+0x4c>
 8002d80:	42a3      	cmp	r3, r4
 8002d82:	d9fa      	bls.n	8002d7a <_free_r+0x42>
 8002d84:	6811      	ldr	r1, [r2, #0]
 8002d86:	1850      	adds	r0, r2, r1
 8002d88:	42a0      	cmp	r0, r4
 8002d8a:	d10b      	bne.n	8002da4 <_free_r+0x6c>
 8002d8c:	6820      	ldr	r0, [r4, #0]
 8002d8e:	4401      	add	r1, r0
 8002d90:	1850      	adds	r0, r2, r1
 8002d92:	4283      	cmp	r3, r0
 8002d94:	6011      	str	r1, [r2, #0]
 8002d96:	d1e0      	bne.n	8002d5a <_free_r+0x22>
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4408      	add	r0, r1
 8002d9e:	6010      	str	r0, [r2, #0]
 8002da0:	6053      	str	r3, [r2, #4]
 8002da2:	e7da      	b.n	8002d5a <_free_r+0x22>
 8002da4:	d902      	bls.n	8002dac <_free_r+0x74>
 8002da6:	230c      	movs	r3, #12
 8002da8:	602b      	str	r3, [r5, #0]
 8002daa:	e7d6      	b.n	8002d5a <_free_r+0x22>
 8002dac:	6820      	ldr	r0, [r4, #0]
 8002dae:	1821      	adds	r1, r4, r0
 8002db0:	428b      	cmp	r3, r1
 8002db2:	bf01      	itttt	eq
 8002db4:	6819      	ldreq	r1, [r3, #0]
 8002db6:	685b      	ldreq	r3, [r3, #4]
 8002db8:	1809      	addeq	r1, r1, r0
 8002dba:	6021      	streq	r1, [r4, #0]
 8002dbc:	6063      	str	r3, [r4, #4]
 8002dbe:	6054      	str	r4, [r2, #4]
 8002dc0:	e7cb      	b.n	8002d5a <_free_r+0x22>
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	20000344 	.word	0x20000344

08002dc8 <sbrk_aligned>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	4e0e      	ldr	r6, [pc, #56]	; (8002e04 <sbrk_aligned+0x3c>)
 8002dcc:	460c      	mov	r4, r1
 8002dce:	6831      	ldr	r1, [r6, #0]
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	b911      	cbnz	r1, 8002dda <sbrk_aligned+0x12>
 8002dd4:	f000 fbaa 	bl	800352c <_sbrk_r>
 8002dd8:	6030      	str	r0, [r6, #0]
 8002dda:	4621      	mov	r1, r4
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f000 fba5 	bl	800352c <_sbrk_r>
 8002de2:	1c43      	adds	r3, r0, #1
 8002de4:	d00a      	beq.n	8002dfc <sbrk_aligned+0x34>
 8002de6:	1cc4      	adds	r4, r0, #3
 8002de8:	f024 0403 	bic.w	r4, r4, #3
 8002dec:	42a0      	cmp	r0, r4
 8002dee:	d007      	beq.n	8002e00 <sbrk_aligned+0x38>
 8002df0:	1a21      	subs	r1, r4, r0
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 fb9a 	bl	800352c <_sbrk_r>
 8002df8:	3001      	adds	r0, #1
 8002dfa:	d101      	bne.n	8002e00 <sbrk_aligned+0x38>
 8002dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8002e00:	4620      	mov	r0, r4
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	20000348 	.word	0x20000348

08002e08 <_malloc_r>:
 8002e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e0c:	1ccd      	adds	r5, r1, #3
 8002e0e:	f025 0503 	bic.w	r5, r5, #3
 8002e12:	3508      	adds	r5, #8
 8002e14:	2d0c      	cmp	r5, #12
 8002e16:	bf38      	it	cc
 8002e18:	250c      	movcc	r5, #12
 8002e1a:	2d00      	cmp	r5, #0
 8002e1c:	4607      	mov	r7, r0
 8002e1e:	db01      	blt.n	8002e24 <_malloc_r+0x1c>
 8002e20:	42a9      	cmp	r1, r5
 8002e22:	d905      	bls.n	8002e30 <_malloc_r+0x28>
 8002e24:	230c      	movs	r3, #12
 8002e26:	2600      	movs	r6, #0
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f04 <_malloc_r+0xfc>
 8002e34:	f000 f868 	bl	8002f08 <__malloc_lock>
 8002e38:	f8d8 3000 	ldr.w	r3, [r8]
 8002e3c:	461c      	mov	r4, r3
 8002e3e:	bb5c      	cbnz	r4, 8002e98 <_malloc_r+0x90>
 8002e40:	4629      	mov	r1, r5
 8002e42:	4638      	mov	r0, r7
 8002e44:	f7ff ffc0 	bl	8002dc8 <sbrk_aligned>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	d155      	bne.n	8002efa <_malloc_r+0xf2>
 8002e4e:	f8d8 4000 	ldr.w	r4, [r8]
 8002e52:	4626      	mov	r6, r4
 8002e54:	2e00      	cmp	r6, #0
 8002e56:	d145      	bne.n	8002ee4 <_malloc_r+0xdc>
 8002e58:	2c00      	cmp	r4, #0
 8002e5a:	d048      	beq.n	8002eee <_malloc_r+0xe6>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	4631      	mov	r1, r6
 8002e60:	4638      	mov	r0, r7
 8002e62:	eb04 0903 	add.w	r9, r4, r3
 8002e66:	f000 fb61 	bl	800352c <_sbrk_r>
 8002e6a:	4581      	cmp	r9, r0
 8002e6c:	d13f      	bne.n	8002eee <_malloc_r+0xe6>
 8002e6e:	6821      	ldr	r1, [r4, #0]
 8002e70:	4638      	mov	r0, r7
 8002e72:	1a6d      	subs	r5, r5, r1
 8002e74:	4629      	mov	r1, r5
 8002e76:	f7ff ffa7 	bl	8002dc8 <sbrk_aligned>
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	d037      	beq.n	8002eee <_malloc_r+0xe6>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	442b      	add	r3, r5
 8002e82:	6023      	str	r3, [r4, #0]
 8002e84:	f8d8 3000 	ldr.w	r3, [r8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d038      	beq.n	8002efe <_malloc_r+0xf6>
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	42a2      	cmp	r2, r4
 8002e90:	d12b      	bne.n	8002eea <_malloc_r+0xe2>
 8002e92:	2200      	movs	r2, #0
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	e00f      	b.n	8002eb8 <_malloc_r+0xb0>
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	1b52      	subs	r2, r2, r5
 8002e9c:	d41f      	bmi.n	8002ede <_malloc_r+0xd6>
 8002e9e:	2a0b      	cmp	r2, #11
 8002ea0:	d917      	bls.n	8002ed2 <_malloc_r+0xca>
 8002ea2:	1961      	adds	r1, r4, r5
 8002ea4:	42a3      	cmp	r3, r4
 8002ea6:	6025      	str	r5, [r4, #0]
 8002ea8:	bf18      	it	ne
 8002eaa:	6059      	strne	r1, [r3, #4]
 8002eac:	6863      	ldr	r3, [r4, #4]
 8002eae:	bf08      	it	eq
 8002eb0:	f8c8 1000 	streq.w	r1, [r8]
 8002eb4:	5162      	str	r2, [r4, r5]
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f104 060b 	add.w	r6, r4, #11
 8002ebe:	f000 f829 	bl	8002f14 <__malloc_unlock>
 8002ec2:	f026 0607 	bic.w	r6, r6, #7
 8002ec6:	1d23      	adds	r3, r4, #4
 8002ec8:	1af2      	subs	r2, r6, r3
 8002eca:	d0ae      	beq.n	8002e2a <_malloc_r+0x22>
 8002ecc:	1b9b      	subs	r3, r3, r6
 8002ece:	50a3      	str	r3, [r4, r2]
 8002ed0:	e7ab      	b.n	8002e2a <_malloc_r+0x22>
 8002ed2:	42a3      	cmp	r3, r4
 8002ed4:	6862      	ldr	r2, [r4, #4]
 8002ed6:	d1dd      	bne.n	8002e94 <_malloc_r+0x8c>
 8002ed8:	f8c8 2000 	str.w	r2, [r8]
 8002edc:	e7ec      	b.n	8002eb8 <_malloc_r+0xb0>
 8002ede:	4623      	mov	r3, r4
 8002ee0:	6864      	ldr	r4, [r4, #4]
 8002ee2:	e7ac      	b.n	8002e3e <_malloc_r+0x36>
 8002ee4:	4634      	mov	r4, r6
 8002ee6:	6876      	ldr	r6, [r6, #4]
 8002ee8:	e7b4      	b.n	8002e54 <_malloc_r+0x4c>
 8002eea:	4613      	mov	r3, r2
 8002eec:	e7cc      	b.n	8002e88 <_malloc_r+0x80>
 8002eee:	230c      	movs	r3, #12
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	f000 f80e 	bl	8002f14 <__malloc_unlock>
 8002ef8:	e797      	b.n	8002e2a <_malloc_r+0x22>
 8002efa:	6025      	str	r5, [r4, #0]
 8002efc:	e7dc      	b.n	8002eb8 <_malloc_r+0xb0>
 8002efe:	605b      	str	r3, [r3, #4]
 8002f00:	deff      	udf	#255	; 0xff
 8002f02:	bf00      	nop
 8002f04:	20000344 	.word	0x20000344

08002f08 <__malloc_lock>:
 8002f08:	4801      	ldr	r0, [pc, #4]	; (8002f10 <__malloc_lock+0x8>)
 8002f0a:	f7ff bf13 	b.w	8002d34 <__retarget_lock_acquire_recursive>
 8002f0e:	bf00      	nop
 8002f10:	20000340 	.word	0x20000340

08002f14 <__malloc_unlock>:
 8002f14:	4801      	ldr	r0, [pc, #4]	; (8002f1c <__malloc_unlock+0x8>)
 8002f16:	f7ff bf0e 	b.w	8002d36 <__retarget_lock_release_recursive>
 8002f1a:	bf00      	nop
 8002f1c:	20000340 	.word	0x20000340

08002f20 <__ssputs_r>:
 8002f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f24:	461f      	mov	r7, r3
 8002f26:	688e      	ldr	r6, [r1, #8]
 8002f28:	4682      	mov	sl, r0
 8002f2a:	42be      	cmp	r6, r7
 8002f2c:	460c      	mov	r4, r1
 8002f2e:	4690      	mov	r8, r2
 8002f30:	680b      	ldr	r3, [r1, #0]
 8002f32:	d82c      	bhi.n	8002f8e <__ssputs_r+0x6e>
 8002f34:	898a      	ldrh	r2, [r1, #12]
 8002f36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f3a:	d026      	beq.n	8002f8a <__ssputs_r+0x6a>
 8002f3c:	6965      	ldr	r5, [r4, #20]
 8002f3e:	6909      	ldr	r1, [r1, #16]
 8002f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f44:	eba3 0901 	sub.w	r9, r3, r1
 8002f48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f4c:	1c7b      	adds	r3, r7, #1
 8002f4e:	444b      	add	r3, r9
 8002f50:	106d      	asrs	r5, r5, #1
 8002f52:	429d      	cmp	r5, r3
 8002f54:	bf38      	it	cc
 8002f56:	461d      	movcc	r5, r3
 8002f58:	0553      	lsls	r3, r2, #21
 8002f5a:	d527      	bpl.n	8002fac <__ssputs_r+0x8c>
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	f7ff ff53 	bl	8002e08 <_malloc_r>
 8002f62:	4606      	mov	r6, r0
 8002f64:	b360      	cbz	r0, 8002fc0 <__ssputs_r+0xa0>
 8002f66:	464a      	mov	r2, r9
 8002f68:	6921      	ldr	r1, [r4, #16]
 8002f6a:	f000 fafd 	bl	8003568 <memcpy>
 8002f6e:	89a3      	ldrh	r3, [r4, #12]
 8002f70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	6126      	str	r6, [r4, #16]
 8002f7c:	444e      	add	r6, r9
 8002f7e:	6026      	str	r6, [r4, #0]
 8002f80:	463e      	mov	r6, r7
 8002f82:	6165      	str	r5, [r4, #20]
 8002f84:	eba5 0509 	sub.w	r5, r5, r9
 8002f88:	60a5      	str	r5, [r4, #8]
 8002f8a:	42be      	cmp	r6, r7
 8002f8c:	d900      	bls.n	8002f90 <__ssputs_r+0x70>
 8002f8e:	463e      	mov	r6, r7
 8002f90:	4632      	mov	r2, r6
 8002f92:	4641      	mov	r1, r8
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	f000 faaf 	bl	80034f8 <memmove>
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	68a3      	ldr	r3, [r4, #8]
 8002f9e:	1b9b      	subs	r3, r3, r6
 8002fa0:	60a3      	str	r3, [r4, #8]
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	4433      	add	r3, r6
 8002fa6:	6023      	str	r3, [r4, #0]
 8002fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fac:	462a      	mov	r2, r5
 8002fae:	f000 fae9 	bl	8003584 <_realloc_r>
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d1e0      	bne.n	8002f7a <__ssputs_r+0x5a>
 8002fb8:	4650      	mov	r0, sl
 8002fba:	6921      	ldr	r1, [r4, #16]
 8002fbc:	f7ff febc 	bl	8002d38 <_free_r>
 8002fc0:	230c      	movs	r3, #12
 8002fc2:	f8ca 3000 	str.w	r3, [sl]
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd0:	81a3      	strh	r3, [r4, #12]
 8002fd2:	e7e9      	b.n	8002fa8 <__ssputs_r+0x88>

08002fd4 <_svfiprintf_r>:
 8002fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd8:	4698      	mov	r8, r3
 8002fda:	898b      	ldrh	r3, [r1, #12]
 8002fdc:	4607      	mov	r7, r0
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	460d      	mov	r5, r1
 8002fe2:	4614      	mov	r4, r2
 8002fe4:	b09d      	sub	sp, #116	; 0x74
 8002fe6:	d50e      	bpl.n	8003006 <_svfiprintf_r+0x32>
 8002fe8:	690b      	ldr	r3, [r1, #16]
 8002fea:	b963      	cbnz	r3, 8003006 <_svfiprintf_r+0x32>
 8002fec:	2140      	movs	r1, #64	; 0x40
 8002fee:	f7ff ff0b 	bl	8002e08 <_malloc_r>
 8002ff2:	6028      	str	r0, [r5, #0]
 8002ff4:	6128      	str	r0, [r5, #16]
 8002ff6:	b920      	cbnz	r0, 8003002 <_svfiprintf_r+0x2e>
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	e0d0      	b.n	80031a4 <_svfiprintf_r+0x1d0>
 8003002:	2340      	movs	r3, #64	; 0x40
 8003004:	616b      	str	r3, [r5, #20]
 8003006:	2300      	movs	r3, #0
 8003008:	9309      	str	r3, [sp, #36]	; 0x24
 800300a:	2320      	movs	r3, #32
 800300c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003010:	2330      	movs	r3, #48	; 0x30
 8003012:	f04f 0901 	mov.w	r9, #1
 8003016:	f8cd 800c 	str.w	r8, [sp, #12]
 800301a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80031bc <_svfiprintf_r+0x1e8>
 800301e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003022:	4623      	mov	r3, r4
 8003024:	469a      	mov	sl, r3
 8003026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800302a:	b10a      	cbz	r2, 8003030 <_svfiprintf_r+0x5c>
 800302c:	2a25      	cmp	r2, #37	; 0x25
 800302e:	d1f9      	bne.n	8003024 <_svfiprintf_r+0x50>
 8003030:	ebba 0b04 	subs.w	fp, sl, r4
 8003034:	d00b      	beq.n	800304e <_svfiprintf_r+0x7a>
 8003036:	465b      	mov	r3, fp
 8003038:	4622      	mov	r2, r4
 800303a:	4629      	mov	r1, r5
 800303c:	4638      	mov	r0, r7
 800303e:	f7ff ff6f 	bl	8002f20 <__ssputs_r>
 8003042:	3001      	adds	r0, #1
 8003044:	f000 80a9 	beq.w	800319a <_svfiprintf_r+0x1c6>
 8003048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800304a:	445a      	add	r2, fp
 800304c:	9209      	str	r2, [sp, #36]	; 0x24
 800304e:	f89a 3000 	ldrb.w	r3, [sl]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a1 	beq.w	800319a <_svfiprintf_r+0x1c6>
 8003058:	2300      	movs	r3, #0
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003062:	f10a 0a01 	add.w	sl, sl, #1
 8003066:	9304      	str	r3, [sp, #16]
 8003068:	9307      	str	r3, [sp, #28]
 800306a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800306e:	931a      	str	r3, [sp, #104]	; 0x68
 8003070:	4654      	mov	r4, sl
 8003072:	2205      	movs	r2, #5
 8003074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003078:	4850      	ldr	r0, [pc, #320]	; (80031bc <_svfiprintf_r+0x1e8>)
 800307a:	f000 fa67 	bl	800354c <memchr>
 800307e:	9a04      	ldr	r2, [sp, #16]
 8003080:	b9d8      	cbnz	r0, 80030ba <_svfiprintf_r+0xe6>
 8003082:	06d0      	lsls	r0, r2, #27
 8003084:	bf44      	itt	mi
 8003086:	2320      	movmi	r3, #32
 8003088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800308c:	0711      	lsls	r1, r2, #28
 800308e:	bf44      	itt	mi
 8003090:	232b      	movmi	r3, #43	; 0x2b
 8003092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003096:	f89a 3000 	ldrb.w	r3, [sl]
 800309a:	2b2a      	cmp	r3, #42	; 0x2a
 800309c:	d015      	beq.n	80030ca <_svfiprintf_r+0xf6>
 800309e:	4654      	mov	r4, sl
 80030a0:	2000      	movs	r0, #0
 80030a2:	f04f 0c0a 	mov.w	ip, #10
 80030a6:	9a07      	ldr	r2, [sp, #28]
 80030a8:	4621      	mov	r1, r4
 80030aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030ae:	3b30      	subs	r3, #48	; 0x30
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	d94d      	bls.n	8003150 <_svfiprintf_r+0x17c>
 80030b4:	b1b0      	cbz	r0, 80030e4 <_svfiprintf_r+0x110>
 80030b6:	9207      	str	r2, [sp, #28]
 80030b8:	e014      	b.n	80030e4 <_svfiprintf_r+0x110>
 80030ba:	eba0 0308 	sub.w	r3, r0, r8
 80030be:	fa09 f303 	lsl.w	r3, r9, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	46a2      	mov	sl, r4
 80030c6:	9304      	str	r3, [sp, #16]
 80030c8:	e7d2      	b.n	8003070 <_svfiprintf_r+0x9c>
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	1d19      	adds	r1, r3, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	9103      	str	r1, [sp, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bfbb      	ittet	lt
 80030d6:	425b      	neglt	r3, r3
 80030d8:	f042 0202 	orrlt.w	r2, r2, #2
 80030dc:	9307      	strge	r3, [sp, #28]
 80030de:	9307      	strlt	r3, [sp, #28]
 80030e0:	bfb8      	it	lt
 80030e2:	9204      	strlt	r2, [sp, #16]
 80030e4:	7823      	ldrb	r3, [r4, #0]
 80030e6:	2b2e      	cmp	r3, #46	; 0x2e
 80030e8:	d10c      	bne.n	8003104 <_svfiprintf_r+0x130>
 80030ea:	7863      	ldrb	r3, [r4, #1]
 80030ec:	2b2a      	cmp	r3, #42	; 0x2a
 80030ee:	d134      	bne.n	800315a <_svfiprintf_r+0x186>
 80030f0:	9b03      	ldr	r3, [sp, #12]
 80030f2:	3402      	adds	r4, #2
 80030f4:	1d1a      	adds	r2, r3, #4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	9203      	str	r2, [sp, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bfb8      	it	lt
 80030fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003102:	9305      	str	r3, [sp, #20]
 8003104:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80031c0 <_svfiprintf_r+0x1ec>
 8003108:	2203      	movs	r2, #3
 800310a:	4650      	mov	r0, sl
 800310c:	7821      	ldrb	r1, [r4, #0]
 800310e:	f000 fa1d 	bl	800354c <memchr>
 8003112:	b138      	cbz	r0, 8003124 <_svfiprintf_r+0x150>
 8003114:	2240      	movs	r2, #64	; 0x40
 8003116:	9b04      	ldr	r3, [sp, #16]
 8003118:	eba0 000a 	sub.w	r0, r0, sl
 800311c:	4082      	lsls	r2, r0
 800311e:	4313      	orrs	r3, r2
 8003120:	3401      	adds	r4, #1
 8003122:	9304      	str	r3, [sp, #16]
 8003124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003128:	2206      	movs	r2, #6
 800312a:	4826      	ldr	r0, [pc, #152]	; (80031c4 <_svfiprintf_r+0x1f0>)
 800312c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003130:	f000 fa0c 	bl	800354c <memchr>
 8003134:	2800      	cmp	r0, #0
 8003136:	d038      	beq.n	80031aa <_svfiprintf_r+0x1d6>
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <_svfiprintf_r+0x1f4>)
 800313a:	bb1b      	cbnz	r3, 8003184 <_svfiprintf_r+0x1b0>
 800313c:	9b03      	ldr	r3, [sp, #12]
 800313e:	3307      	adds	r3, #7
 8003140:	f023 0307 	bic.w	r3, r3, #7
 8003144:	3308      	adds	r3, #8
 8003146:	9303      	str	r3, [sp, #12]
 8003148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800314a:	4433      	add	r3, r6
 800314c:	9309      	str	r3, [sp, #36]	; 0x24
 800314e:	e768      	b.n	8003022 <_svfiprintf_r+0x4e>
 8003150:	460c      	mov	r4, r1
 8003152:	2001      	movs	r0, #1
 8003154:	fb0c 3202 	mla	r2, ip, r2, r3
 8003158:	e7a6      	b.n	80030a8 <_svfiprintf_r+0xd4>
 800315a:	2300      	movs	r3, #0
 800315c:	f04f 0c0a 	mov.w	ip, #10
 8003160:	4619      	mov	r1, r3
 8003162:	3401      	adds	r4, #1
 8003164:	9305      	str	r3, [sp, #20]
 8003166:	4620      	mov	r0, r4
 8003168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800316c:	3a30      	subs	r2, #48	; 0x30
 800316e:	2a09      	cmp	r2, #9
 8003170:	d903      	bls.n	800317a <_svfiprintf_r+0x1a6>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0c6      	beq.n	8003104 <_svfiprintf_r+0x130>
 8003176:	9105      	str	r1, [sp, #20]
 8003178:	e7c4      	b.n	8003104 <_svfiprintf_r+0x130>
 800317a:	4604      	mov	r4, r0
 800317c:	2301      	movs	r3, #1
 800317e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003182:	e7f0      	b.n	8003166 <_svfiprintf_r+0x192>
 8003184:	ab03      	add	r3, sp, #12
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	462a      	mov	r2, r5
 800318a:	4638      	mov	r0, r7
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <_svfiprintf_r+0x1f8>)
 800318e:	a904      	add	r1, sp, #16
 8003190:	f3af 8000 	nop.w
 8003194:	1c42      	adds	r2, r0, #1
 8003196:	4606      	mov	r6, r0
 8003198:	d1d6      	bne.n	8003148 <_svfiprintf_r+0x174>
 800319a:	89ab      	ldrh	r3, [r5, #12]
 800319c:	065b      	lsls	r3, r3, #25
 800319e:	f53f af2d 	bmi.w	8002ffc <_svfiprintf_r+0x28>
 80031a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031a4:	b01d      	add	sp, #116	; 0x74
 80031a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031aa:	ab03      	add	r3, sp, #12
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	462a      	mov	r2, r5
 80031b0:	4638      	mov	r0, r7
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <_svfiprintf_r+0x1f8>)
 80031b4:	a904      	add	r1, sp, #16
 80031b6:	f000 f87d 	bl	80032b4 <_printf_i>
 80031ba:	e7eb      	b.n	8003194 <_svfiprintf_r+0x1c0>
 80031bc:	080036fe 	.word	0x080036fe
 80031c0:	08003704 	.word	0x08003704
 80031c4:	08003708 	.word	0x08003708
 80031c8:	00000000 	.word	0x00000000
 80031cc:	08002f21 	.word	0x08002f21

080031d0 <_printf_common>:
 80031d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d4:	4616      	mov	r6, r2
 80031d6:	4699      	mov	r9, r3
 80031d8:	688a      	ldr	r2, [r1, #8]
 80031da:	690b      	ldr	r3, [r1, #16]
 80031dc:	4607      	mov	r7, r0
 80031de:	4293      	cmp	r3, r2
 80031e0:	bfb8      	it	lt
 80031e2:	4613      	movlt	r3, r2
 80031e4:	6033      	str	r3, [r6, #0]
 80031e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031ea:	460c      	mov	r4, r1
 80031ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031f0:	b10a      	cbz	r2, 80031f6 <_printf_common+0x26>
 80031f2:	3301      	adds	r3, #1
 80031f4:	6033      	str	r3, [r6, #0]
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	0699      	lsls	r1, r3, #26
 80031fa:	bf42      	ittt	mi
 80031fc:	6833      	ldrmi	r3, [r6, #0]
 80031fe:	3302      	addmi	r3, #2
 8003200:	6033      	strmi	r3, [r6, #0]
 8003202:	6825      	ldr	r5, [r4, #0]
 8003204:	f015 0506 	ands.w	r5, r5, #6
 8003208:	d106      	bne.n	8003218 <_printf_common+0x48>
 800320a:	f104 0a19 	add.w	sl, r4, #25
 800320e:	68e3      	ldr	r3, [r4, #12]
 8003210:	6832      	ldr	r2, [r6, #0]
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	42ab      	cmp	r3, r5
 8003216:	dc2b      	bgt.n	8003270 <_printf_common+0xa0>
 8003218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800321c:	1e13      	subs	r3, r2, #0
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	bf18      	it	ne
 8003222:	2301      	movne	r3, #1
 8003224:	0692      	lsls	r2, r2, #26
 8003226:	d430      	bmi.n	800328a <_printf_common+0xba>
 8003228:	4649      	mov	r1, r9
 800322a:	4638      	mov	r0, r7
 800322c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003230:	47c0      	blx	r8
 8003232:	3001      	adds	r0, #1
 8003234:	d023      	beq.n	800327e <_printf_common+0xae>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	6922      	ldr	r2, [r4, #16]
 800323a:	f003 0306 	and.w	r3, r3, #6
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf14      	ite	ne
 8003242:	2500      	movne	r5, #0
 8003244:	6833      	ldreq	r3, [r6, #0]
 8003246:	f04f 0600 	mov.w	r6, #0
 800324a:	bf08      	it	eq
 800324c:	68e5      	ldreq	r5, [r4, #12]
 800324e:	f104 041a 	add.w	r4, r4, #26
 8003252:	bf08      	it	eq
 8003254:	1aed      	subeq	r5, r5, r3
 8003256:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800325a:	bf08      	it	eq
 800325c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003260:	4293      	cmp	r3, r2
 8003262:	bfc4      	itt	gt
 8003264:	1a9b      	subgt	r3, r3, r2
 8003266:	18ed      	addgt	r5, r5, r3
 8003268:	42b5      	cmp	r5, r6
 800326a:	d11a      	bne.n	80032a2 <_printf_common+0xd2>
 800326c:	2000      	movs	r0, #0
 800326e:	e008      	b.n	8003282 <_printf_common+0xb2>
 8003270:	2301      	movs	r3, #1
 8003272:	4652      	mov	r2, sl
 8003274:	4649      	mov	r1, r9
 8003276:	4638      	mov	r0, r7
 8003278:	47c0      	blx	r8
 800327a:	3001      	adds	r0, #1
 800327c:	d103      	bne.n	8003286 <_printf_common+0xb6>
 800327e:	f04f 30ff 	mov.w	r0, #4294967295
 8003282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003286:	3501      	adds	r5, #1
 8003288:	e7c1      	b.n	800320e <_printf_common+0x3e>
 800328a:	2030      	movs	r0, #48	; 0x30
 800328c:	18e1      	adds	r1, r4, r3
 800328e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003298:	4422      	add	r2, r4
 800329a:	3302      	adds	r3, #2
 800329c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032a0:	e7c2      	b.n	8003228 <_printf_common+0x58>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4622      	mov	r2, r4
 80032a6:	4649      	mov	r1, r9
 80032a8:	4638      	mov	r0, r7
 80032aa:	47c0      	blx	r8
 80032ac:	3001      	adds	r0, #1
 80032ae:	d0e6      	beq.n	800327e <_printf_common+0xae>
 80032b0:	3601      	adds	r6, #1
 80032b2:	e7d9      	b.n	8003268 <_printf_common+0x98>

080032b4 <_printf_i>:
 80032b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b8:	7e0f      	ldrb	r7, [r1, #24]
 80032ba:	4691      	mov	r9, r2
 80032bc:	2f78      	cmp	r7, #120	; 0x78
 80032be:	4680      	mov	r8, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	469a      	mov	sl, r3
 80032c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032ca:	d807      	bhi.n	80032dc <_printf_i+0x28>
 80032cc:	2f62      	cmp	r7, #98	; 0x62
 80032ce:	d80a      	bhi.n	80032e6 <_printf_i+0x32>
 80032d0:	2f00      	cmp	r7, #0
 80032d2:	f000 80d5 	beq.w	8003480 <_printf_i+0x1cc>
 80032d6:	2f58      	cmp	r7, #88	; 0x58
 80032d8:	f000 80c1 	beq.w	800345e <_printf_i+0x1aa>
 80032dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032e4:	e03a      	b.n	800335c <_printf_i+0xa8>
 80032e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ea:	2b15      	cmp	r3, #21
 80032ec:	d8f6      	bhi.n	80032dc <_printf_i+0x28>
 80032ee:	a101      	add	r1, pc, #4	; (adr r1, 80032f4 <_printf_i+0x40>)
 80032f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032f4:	0800334d 	.word	0x0800334d
 80032f8:	08003361 	.word	0x08003361
 80032fc:	080032dd 	.word	0x080032dd
 8003300:	080032dd 	.word	0x080032dd
 8003304:	080032dd 	.word	0x080032dd
 8003308:	080032dd 	.word	0x080032dd
 800330c:	08003361 	.word	0x08003361
 8003310:	080032dd 	.word	0x080032dd
 8003314:	080032dd 	.word	0x080032dd
 8003318:	080032dd 	.word	0x080032dd
 800331c:	080032dd 	.word	0x080032dd
 8003320:	08003467 	.word	0x08003467
 8003324:	0800338d 	.word	0x0800338d
 8003328:	08003421 	.word	0x08003421
 800332c:	080032dd 	.word	0x080032dd
 8003330:	080032dd 	.word	0x080032dd
 8003334:	08003489 	.word	0x08003489
 8003338:	080032dd 	.word	0x080032dd
 800333c:	0800338d 	.word	0x0800338d
 8003340:	080032dd 	.word	0x080032dd
 8003344:	080032dd 	.word	0x080032dd
 8003348:	08003429 	.word	0x08003429
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	602a      	str	r2, [r5, #0]
 8003354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800335c:	2301      	movs	r3, #1
 800335e:	e0a0      	b.n	80034a2 <_printf_i+0x1ee>
 8003360:	6820      	ldr	r0, [r4, #0]
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	0607      	lsls	r7, r0, #24
 8003366:	f103 0104 	add.w	r1, r3, #4
 800336a:	6029      	str	r1, [r5, #0]
 800336c:	d501      	bpl.n	8003372 <_printf_i+0xbe>
 800336e:	681e      	ldr	r6, [r3, #0]
 8003370:	e003      	b.n	800337a <_printf_i+0xc6>
 8003372:	0646      	lsls	r6, r0, #25
 8003374:	d5fb      	bpl.n	800336e <_printf_i+0xba>
 8003376:	f9b3 6000 	ldrsh.w	r6, [r3]
 800337a:	2e00      	cmp	r6, #0
 800337c:	da03      	bge.n	8003386 <_printf_i+0xd2>
 800337e:	232d      	movs	r3, #45	; 0x2d
 8003380:	4276      	negs	r6, r6
 8003382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003386:	230a      	movs	r3, #10
 8003388:	4859      	ldr	r0, [pc, #356]	; (80034f0 <_printf_i+0x23c>)
 800338a:	e012      	b.n	80033b2 <_printf_i+0xfe>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	1d19      	adds	r1, r3, #4
 8003392:	6029      	str	r1, [r5, #0]
 8003394:	0605      	lsls	r5, r0, #24
 8003396:	d501      	bpl.n	800339c <_printf_i+0xe8>
 8003398:	681e      	ldr	r6, [r3, #0]
 800339a:	e002      	b.n	80033a2 <_printf_i+0xee>
 800339c:	0641      	lsls	r1, r0, #25
 800339e:	d5fb      	bpl.n	8003398 <_printf_i+0xe4>
 80033a0:	881e      	ldrh	r6, [r3, #0]
 80033a2:	2f6f      	cmp	r7, #111	; 0x6f
 80033a4:	bf0c      	ite	eq
 80033a6:	2308      	moveq	r3, #8
 80033a8:	230a      	movne	r3, #10
 80033aa:	4851      	ldr	r0, [pc, #324]	; (80034f0 <_printf_i+0x23c>)
 80033ac:	2100      	movs	r1, #0
 80033ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033b2:	6865      	ldr	r5, [r4, #4]
 80033b4:	2d00      	cmp	r5, #0
 80033b6:	bfa8      	it	ge
 80033b8:	6821      	ldrge	r1, [r4, #0]
 80033ba:	60a5      	str	r5, [r4, #8]
 80033bc:	bfa4      	itt	ge
 80033be:	f021 0104 	bicge.w	r1, r1, #4
 80033c2:	6021      	strge	r1, [r4, #0]
 80033c4:	b90e      	cbnz	r6, 80033ca <_printf_i+0x116>
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	d04b      	beq.n	8003462 <_printf_i+0x1ae>
 80033ca:	4615      	mov	r5, r2
 80033cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80033d0:	fb03 6711 	mls	r7, r3, r1, r6
 80033d4:	5dc7      	ldrb	r7, [r0, r7]
 80033d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033da:	4637      	mov	r7, r6
 80033dc:	42bb      	cmp	r3, r7
 80033de:	460e      	mov	r6, r1
 80033e0:	d9f4      	bls.n	80033cc <_printf_i+0x118>
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d10b      	bne.n	80033fe <_printf_i+0x14a>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	07de      	lsls	r6, r3, #31
 80033ea:	d508      	bpl.n	80033fe <_printf_i+0x14a>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	6861      	ldr	r1, [r4, #4]
 80033f0:	4299      	cmp	r1, r3
 80033f2:	bfde      	ittt	le
 80033f4:	2330      	movle	r3, #48	; 0x30
 80033f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033fe:	1b52      	subs	r2, r2, r5
 8003400:	6122      	str	r2, [r4, #16]
 8003402:	464b      	mov	r3, r9
 8003404:	4621      	mov	r1, r4
 8003406:	4640      	mov	r0, r8
 8003408:	f8cd a000 	str.w	sl, [sp]
 800340c:	aa03      	add	r2, sp, #12
 800340e:	f7ff fedf 	bl	80031d0 <_printf_common>
 8003412:	3001      	adds	r0, #1
 8003414:	d14a      	bne.n	80034ac <_printf_i+0x1f8>
 8003416:	f04f 30ff 	mov.w	r0, #4294967295
 800341a:	b004      	add	sp, #16
 800341c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	f043 0320 	orr.w	r3, r3, #32
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	2778      	movs	r7, #120	; 0x78
 800342a:	4832      	ldr	r0, [pc, #200]	; (80034f4 <_printf_i+0x240>)
 800342c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	6829      	ldr	r1, [r5, #0]
 8003434:	061f      	lsls	r7, r3, #24
 8003436:	f851 6b04 	ldr.w	r6, [r1], #4
 800343a:	d402      	bmi.n	8003442 <_printf_i+0x18e>
 800343c:	065f      	lsls	r7, r3, #25
 800343e:	bf48      	it	mi
 8003440:	b2b6      	uxthmi	r6, r6
 8003442:	07df      	lsls	r7, r3, #31
 8003444:	bf48      	it	mi
 8003446:	f043 0320 	orrmi.w	r3, r3, #32
 800344a:	6029      	str	r1, [r5, #0]
 800344c:	bf48      	it	mi
 800344e:	6023      	strmi	r3, [r4, #0]
 8003450:	b91e      	cbnz	r6, 800345a <_printf_i+0x1a6>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	f023 0320 	bic.w	r3, r3, #32
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	2310      	movs	r3, #16
 800345c:	e7a6      	b.n	80033ac <_printf_i+0xf8>
 800345e:	4824      	ldr	r0, [pc, #144]	; (80034f0 <_printf_i+0x23c>)
 8003460:	e7e4      	b.n	800342c <_printf_i+0x178>
 8003462:	4615      	mov	r5, r2
 8003464:	e7bd      	b.n	80033e2 <_printf_i+0x12e>
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	6826      	ldr	r6, [r4, #0]
 800346a:	1d18      	adds	r0, r3, #4
 800346c:	6961      	ldr	r1, [r4, #20]
 800346e:	6028      	str	r0, [r5, #0]
 8003470:	0635      	lsls	r5, r6, #24
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	d501      	bpl.n	800347a <_printf_i+0x1c6>
 8003476:	6019      	str	r1, [r3, #0]
 8003478:	e002      	b.n	8003480 <_printf_i+0x1cc>
 800347a:	0670      	lsls	r0, r6, #25
 800347c:	d5fb      	bpl.n	8003476 <_printf_i+0x1c2>
 800347e:	8019      	strh	r1, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	4615      	mov	r5, r2
 8003484:	6123      	str	r3, [r4, #16]
 8003486:	e7bc      	b.n	8003402 <_printf_i+0x14e>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	2100      	movs	r1, #0
 800348c:	1d1a      	adds	r2, r3, #4
 800348e:	602a      	str	r2, [r5, #0]
 8003490:	681d      	ldr	r5, [r3, #0]
 8003492:	6862      	ldr	r2, [r4, #4]
 8003494:	4628      	mov	r0, r5
 8003496:	f000 f859 	bl	800354c <memchr>
 800349a:	b108      	cbz	r0, 80034a0 <_printf_i+0x1ec>
 800349c:	1b40      	subs	r0, r0, r5
 800349e:	6060      	str	r0, [r4, #4]
 80034a0:	6863      	ldr	r3, [r4, #4]
 80034a2:	6123      	str	r3, [r4, #16]
 80034a4:	2300      	movs	r3, #0
 80034a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034aa:	e7aa      	b.n	8003402 <_printf_i+0x14e>
 80034ac:	462a      	mov	r2, r5
 80034ae:	4649      	mov	r1, r9
 80034b0:	4640      	mov	r0, r8
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	47d0      	blx	sl
 80034b6:	3001      	adds	r0, #1
 80034b8:	d0ad      	beq.n	8003416 <_printf_i+0x162>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	079b      	lsls	r3, r3, #30
 80034be:	d413      	bmi.n	80034e8 <_printf_i+0x234>
 80034c0:	68e0      	ldr	r0, [r4, #12]
 80034c2:	9b03      	ldr	r3, [sp, #12]
 80034c4:	4298      	cmp	r0, r3
 80034c6:	bfb8      	it	lt
 80034c8:	4618      	movlt	r0, r3
 80034ca:	e7a6      	b.n	800341a <_printf_i+0x166>
 80034cc:	2301      	movs	r3, #1
 80034ce:	4632      	mov	r2, r6
 80034d0:	4649      	mov	r1, r9
 80034d2:	4640      	mov	r0, r8
 80034d4:	47d0      	blx	sl
 80034d6:	3001      	adds	r0, #1
 80034d8:	d09d      	beq.n	8003416 <_printf_i+0x162>
 80034da:	3501      	adds	r5, #1
 80034dc:	68e3      	ldr	r3, [r4, #12]
 80034de:	9903      	ldr	r1, [sp, #12]
 80034e0:	1a5b      	subs	r3, r3, r1
 80034e2:	42ab      	cmp	r3, r5
 80034e4:	dcf2      	bgt.n	80034cc <_printf_i+0x218>
 80034e6:	e7eb      	b.n	80034c0 <_printf_i+0x20c>
 80034e8:	2500      	movs	r5, #0
 80034ea:	f104 0619 	add.w	r6, r4, #25
 80034ee:	e7f5      	b.n	80034dc <_printf_i+0x228>
 80034f0:	0800370f 	.word	0x0800370f
 80034f4:	08003720 	.word	0x08003720

080034f8 <memmove>:
 80034f8:	4288      	cmp	r0, r1
 80034fa:	b510      	push	{r4, lr}
 80034fc:	eb01 0402 	add.w	r4, r1, r2
 8003500:	d902      	bls.n	8003508 <memmove+0x10>
 8003502:	4284      	cmp	r4, r0
 8003504:	4623      	mov	r3, r4
 8003506:	d807      	bhi.n	8003518 <memmove+0x20>
 8003508:	1e43      	subs	r3, r0, #1
 800350a:	42a1      	cmp	r1, r4
 800350c:	d008      	beq.n	8003520 <memmove+0x28>
 800350e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003516:	e7f8      	b.n	800350a <memmove+0x12>
 8003518:	4601      	mov	r1, r0
 800351a:	4402      	add	r2, r0
 800351c:	428a      	cmp	r2, r1
 800351e:	d100      	bne.n	8003522 <memmove+0x2a>
 8003520:	bd10      	pop	{r4, pc}
 8003522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800352a:	e7f7      	b.n	800351c <memmove+0x24>

0800352c <_sbrk_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	2300      	movs	r3, #0
 8003530:	4d05      	ldr	r5, [pc, #20]	; (8003548 <_sbrk_r+0x1c>)
 8003532:	4604      	mov	r4, r0
 8003534:	4608      	mov	r0, r1
 8003536:	602b      	str	r3, [r5, #0]
 8003538:	f7fd fce2 	bl	8000f00 <_sbrk>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	d102      	bne.n	8003546 <_sbrk_r+0x1a>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	b103      	cbz	r3, 8003546 <_sbrk_r+0x1a>
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	2000033c 	.word	0x2000033c

0800354c <memchr>:
 800354c:	4603      	mov	r3, r0
 800354e:	b510      	push	{r4, lr}
 8003550:	b2c9      	uxtb	r1, r1
 8003552:	4402      	add	r2, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	4618      	mov	r0, r3
 8003558:	d101      	bne.n	800355e <memchr+0x12>
 800355a:	2000      	movs	r0, #0
 800355c:	e003      	b.n	8003566 <memchr+0x1a>
 800355e:	7804      	ldrb	r4, [r0, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	428c      	cmp	r4, r1
 8003564:	d1f6      	bne.n	8003554 <memchr+0x8>
 8003566:	bd10      	pop	{r4, pc}

08003568 <memcpy>:
 8003568:	440a      	add	r2, r1
 800356a:	4291      	cmp	r1, r2
 800356c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003570:	d100      	bne.n	8003574 <memcpy+0xc>
 8003572:	4770      	bx	lr
 8003574:	b510      	push	{r4, lr}
 8003576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800357a:	4291      	cmp	r1, r2
 800357c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003580:	d1f9      	bne.n	8003576 <memcpy+0xe>
 8003582:	bd10      	pop	{r4, pc}

08003584 <_realloc_r>:
 8003584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003588:	4680      	mov	r8, r0
 800358a:	4614      	mov	r4, r2
 800358c:	460e      	mov	r6, r1
 800358e:	b921      	cbnz	r1, 800359a <_realloc_r+0x16>
 8003590:	4611      	mov	r1, r2
 8003592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003596:	f7ff bc37 	b.w	8002e08 <_malloc_r>
 800359a:	b92a      	cbnz	r2, 80035a8 <_realloc_r+0x24>
 800359c:	f7ff fbcc 	bl	8002d38 <_free_r>
 80035a0:	4625      	mov	r5, r4
 80035a2:	4628      	mov	r0, r5
 80035a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a8:	f000 f81b 	bl	80035e2 <_malloc_usable_size_r>
 80035ac:	4284      	cmp	r4, r0
 80035ae:	4607      	mov	r7, r0
 80035b0:	d802      	bhi.n	80035b8 <_realloc_r+0x34>
 80035b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035b6:	d812      	bhi.n	80035de <_realloc_r+0x5a>
 80035b8:	4621      	mov	r1, r4
 80035ba:	4640      	mov	r0, r8
 80035bc:	f7ff fc24 	bl	8002e08 <_malloc_r>
 80035c0:	4605      	mov	r5, r0
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d0ed      	beq.n	80035a2 <_realloc_r+0x1e>
 80035c6:	42bc      	cmp	r4, r7
 80035c8:	4622      	mov	r2, r4
 80035ca:	4631      	mov	r1, r6
 80035cc:	bf28      	it	cs
 80035ce:	463a      	movcs	r2, r7
 80035d0:	f7ff ffca 	bl	8003568 <memcpy>
 80035d4:	4631      	mov	r1, r6
 80035d6:	4640      	mov	r0, r8
 80035d8:	f7ff fbae 	bl	8002d38 <_free_r>
 80035dc:	e7e1      	b.n	80035a2 <_realloc_r+0x1e>
 80035de:	4635      	mov	r5, r6
 80035e0:	e7df      	b.n	80035a2 <_realloc_r+0x1e>

080035e2 <_malloc_usable_size_r>:
 80035e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035e6:	1f18      	subs	r0, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bfbc      	itt	lt
 80035ec:	580b      	ldrlt	r3, [r1, r0]
 80035ee:	18c0      	addlt	r0, r0, r3
 80035f0:	4770      	bx	lr
	...

080035f4 <_init>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr

08003600 <_fini>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	bf00      	nop
 8003604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003606:	bc08      	pop	{r3}
 8003608:	469e      	mov	lr, r3
 800360a:	4770      	bx	lr
