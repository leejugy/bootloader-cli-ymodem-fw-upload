
cli_with_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c0  080032c0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080032c0  080032c0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c0  080032c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080032c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003330  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003330  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b33  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad6  00000000  00000000  00027c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  000296e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c4  00000000  00000000  00029e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018480  00000000  00000000  0002a454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae69  00000000  00000000  000428d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083e48  00000000  00000000  0004d73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024c0  00000000  00000000  000d1588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d3a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080031d4 	.word	0x080031d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080031d4 	.word	0x080031d4

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f000 fca9 	bl	8000ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f000 fcc2 	bl	8000afe <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <MX_GPIO_Init+0x40>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <MX_GPIO_Init+0x40>)
 8000194:	f043 0320 	orr.w	r3, r3, #32
 8000198:	6193      	str	r3, [r2, #24]
 800019a:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <MX_GPIO_Init+0x40>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	f003 0320 	and.w	r3, r3, #32
 80001a2:	607b      	str	r3, [r7, #4]
 80001a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001ac:	f043 0304 	orr.w	r3, r3, #4
 80001b0:	6193      	str	r3, [r2, #24]
 80001b2:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	f003 0304 	and.w	r3, r3, #4
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	683b      	ldr	r3, [r7, #0]

}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40021000 	.word	0x40021000

080001cc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */
void sum_word(uint8_t *buf,uint8_t len,char *fmt,...);
extern HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
extern HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <HAL_UART_RxCpltCallback+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d104      	bne.n	80001ea <HAL_UART_RxCpltCallback+0x1e>
		HAL_UART_Receive_DMA(&huart1,&command_tx[0],5);
 80001e0:	2205      	movs	r2, #5
 80001e2:	4905      	ldr	r1, [pc, #20]	; (80001f8 <HAL_UART_RxCpltCallback+0x2c>)
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <HAL_UART_RxCpltCallback+0x28>)
 80001e6:	f001 fcfa 	bl	8001bde <HAL_UART_Receive_DMA>
	}
	UNUSED(huart);
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000090 	.word	0x20000090
 80001f8:	20000084 	.word	0x20000084

080001fc <__io_putchar>:
	va_list arg;
	va_start(arg,fmt);
	vsnprintf((char *)buf,len,fmt,arg);
	va_end(arg);
}
int __io_putchar(int ch){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,100);
 8000204:	1d39      	adds	r1, r7, #4
 8000206:	2364      	movs	r3, #100	; 0x64
 8000208:	2201      	movs	r2, #1
 800020a:	4804      	ldr	r0, [pc, #16]	; (800021c <__io_putchar+0x20>)
 800020c:	f001 fc64 	bl	8001ad8 <HAL_UART_Transmit>
	return 0;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000090 	.word	0x20000090

08000220 <is_command>:
keytype is_command(uint8_t *buf,uint8_t i){
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	460b      	mov	r3, r1
 800022a:	70fb      	strb	r3, [r7, #3]
	keytype type_key = KEY_NONE;
 800022c:	2300      	movs	r3, #0
 800022e:	73fb      	strb	r3, [r7, #15]
	switch (buf[i]){
 8000230:	78fb      	ldrb	r3, [r7, #3]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b7f      	cmp	r3, #127	; 0x7f
 800023a:	d072      	beq.n	8000322 <is_command+0x102>
 800023c:	2b7f      	cmp	r3, #127	; 0x7f
 800023e:	dc7c      	bgt.n	800033a <is_command+0x11a>
 8000240:	2b08      	cmp	r3, #8
 8000242:	d074      	beq.n	800032e <is_command+0x10e>
 8000244:	2b1b      	cmp	r3, #27
 8000246:	d178      	bne.n	800033a <is_command+0x11a>
		case 0x1b:
			printf("is command!\n");
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <is_command+0x144>)
 800024a:	f002 f951 	bl	80024f0 <puts>
			switch(buf[(i+2)%5]){
 800024e:	78fb      	ldrb	r3, [r7, #3]
 8000250:	1c9a      	adds	r2, r3, #2
 8000252:	4b45      	ldr	r3, [pc, #276]	; (8000368 <is_command+0x148>)
 8000254:	fb83 1302 	smull	r1, r3, r3, r2
 8000258:	1059      	asrs	r1, r3, #1
 800025a:	17d3      	asrs	r3, r2, #31
 800025c:	1ac9      	subs	r1, r1, r3
 800025e:	460b      	mov	r3, r1
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	440b      	add	r3, r1
 8000264:	1ad1      	subs	r1, r2, r3
 8000266:	460a      	mov	r2, r1
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	3b31      	subs	r3, #49	; 0x31
 8000270:	2b13      	cmp	r3, #19
 8000272:	d84f      	bhi.n	8000314 <is_command+0xf4>
 8000274:	a201      	add	r2, pc, #4	; (adr r2, 800027c <is_command+0x5c>)
 8000276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027a:	bf00      	nop
 800027c:	08000309 	.word	0x08000309
 8000280:	08000315 	.word	0x08000315
 8000284:	08000315 	.word	0x08000315
 8000288:	080002fd 	.word	0x080002fd
 800028c:	08000315 	.word	0x08000315
 8000290:	08000315 	.word	0x08000315
 8000294:	08000315 	.word	0x08000315
 8000298:	08000315 	.word	0x08000315
 800029c:	08000315 	.word	0x08000315
 80002a0:	08000315 	.word	0x08000315
 80002a4:	08000315 	.word	0x08000315
 80002a8:	08000315 	.word	0x08000315
 80002ac:	08000315 	.word	0x08000315
 80002b0:	08000315 	.word	0x08000315
 80002b4:	08000315 	.word	0x08000315
 80002b8:	08000315 	.word	0x08000315
 80002bc:	080002f1 	.word	0x080002f1
 80002c0:	080002e5 	.word	0x080002e5
 80002c4:	080002d9 	.word	0x080002d9
 80002c8:	080002cd 	.word	0x080002cd
				case 0x44:
					printf("is left\n");
 80002cc:	4827      	ldr	r0, [pc, #156]	; (800036c <is_command+0x14c>)
 80002ce:	f002 f90f 	bl	80024f0 <puts>
					type_key = LEFT;
 80002d2:	2303      	movs	r3, #3
 80002d4:	73fb      	strb	r3, [r7, #15]
					break;
 80002d6:	e023      	b.n	8000320 <is_command+0x100>
				case 0x43:
					printf("is right\n");
 80002d8:	4825      	ldr	r0, [pc, #148]	; (8000370 <is_command+0x150>)
 80002da:	f002 f909 	bl	80024f0 <puts>
					type_key = RIGHT;
 80002de:	2304      	movs	r3, #4
 80002e0:	73fb      	strb	r3, [r7, #15]
					break;
 80002e2:	e01d      	b.n	8000320 <is_command+0x100>
				case 0x42:
					printf("is donw\n");
 80002e4:	4823      	ldr	r0, [pc, #140]	; (8000374 <is_command+0x154>)
 80002e6:	f002 f903 	bl	80024f0 <puts>
					type_key = DOWN;
 80002ea:	2302      	movs	r3, #2
 80002ec:	73fb      	strb	r3, [r7, #15]
					break;
 80002ee:	e017      	b.n	8000320 <is_command+0x100>
				case 0x41:
					printf("is up\n");
 80002f0:	4821      	ldr	r0, [pc, #132]	; (8000378 <is_command+0x158>)
 80002f2:	f002 f8fd 	bl	80024f0 <puts>
					type_key = UP;
 80002f6:	2301      	movs	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
					break;
 80002fa:	e011      	b.n	8000320 <is_command+0x100>
				case 0x34:
					printf("is end\n");
 80002fc:	481f      	ldr	r0, [pc, #124]	; (800037c <is_command+0x15c>)
 80002fe:	f002 f8f7 	bl	80024f0 <puts>
					type_key = END;
 8000302:	2305      	movs	r3, #5
 8000304:	73fb      	strb	r3, [r7, #15]
					break;
 8000306:	e00b      	b.n	8000320 <is_command+0x100>
				case 0x31:
					printf("is home\n");
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <is_command+0x160>)
 800030a:	f002 f8f1 	bl	80024f0 <puts>
					type_key = HOME;
 800030e:	2306      	movs	r3, #6
 8000310:	73fb      	strb	r3, [r7, #15]
					break;
 8000312:	e005      	b.n	8000320 <is_command+0x100>
				default:
					printf("error!\n");
 8000314:	481b      	ldr	r0, [pc, #108]	; (8000384 <is_command+0x164>)
 8000316:	f002 f8eb 	bl	80024f0 <puts>
					type_key = KEY_ERROR;
 800031a:	230a      	movs	r3, #10
 800031c:	73fb      	strb	r3, [r7, #15]
					break;
 800031e:	bf00      	nop
			}
			break;
 8000320:	e00c      	b.n	800033c <is_command+0x11c>
		case 0x7f:
			printf("is delete!\n");
 8000322:	4819      	ldr	r0, [pc, #100]	; (8000388 <is_command+0x168>)
 8000324:	f002 f8e4 	bl	80024f0 <puts>
			type_key = DEL;
 8000328:	2307      	movs	r3, #7
 800032a:	73fb      	strb	r3, [r7, #15]
			break;
 800032c:	e006      	b.n	800033c <is_command+0x11c>
		case 0x08:
			printf("is backsapce!\n");
 800032e:	4817      	ldr	r0, [pc, #92]	; (800038c <is_command+0x16c>)
 8000330:	f002 f8de 	bl	80024f0 <puts>
			type_key = BACKSPACE;
 8000334:	2308      	movs	r3, #8
 8000336:	73fb      	strb	r3, [r7, #15]
			break;
 8000338:	e000      	b.n	800033c <is_command+0x11c>
		default:
			break;
 800033a:	bf00      	nop
	}
	if(buf[i]>=32 && buf[i]<=126){
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b1f      	cmp	r3, #31
 8000346:	d907      	bls.n	8000358 <is_command+0x138>
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b7e      	cmp	r3, #126	; 0x7e
 8000352:	d801      	bhi.n	8000358 <is_command+0x138>
		type_key=IS_WORD;
 8000354:	2309      	movs	r3, #9
 8000356:	73fb      	strb	r3, [r7, #15]
	}
	return type_key;
 8000358:	7bfb      	ldrb	r3, [r7, #15]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	080031ec 	.word	0x080031ec
 8000368:	66666667 	.word	0x66666667
 800036c:	080031f8 	.word	0x080031f8
 8000370:	08003200 	.word	0x08003200
 8000374:	0800320c 	.word	0x0800320c
 8000378:	08003214 	.word	0x08003214
 800037c:	0800321c 	.word	0x0800321c
 8000380:	08003224 	.word	0x08003224
 8000384:	0800322c 	.word	0x0800322c
 8000388:	08003234 	.word	0x08003234
 800038c:	08003240 	.word	0x08003240

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fa5d 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f841 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f7ff fef3 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 80003a2:	f7ff fed3 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003a6:	f000 f98f 	bl	80006c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1,&command_tx[0],5);
 80003aa:	2205      	movs	r2, #5
 80003ac:	4918      	ldr	r1, [pc, #96]	; (8000410 <main+0x80>)
 80003ae:	4819      	ldr	r0, [pc, #100]	; (8000414 <main+0x84>)
 80003b0:	f001 fdc4 	bl	8001f3c <UART_Start_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t i=0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	71fb      	strb	r3, [r7, #7]
	keytype key=KEY_NONE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	71bb      	strb	r3, [r7, #6]
	for (;;){
		i=i%5;
 80003bc:	79fa      	ldrb	r2, [r7, #7]
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <main+0x88>)
 80003c0:	fba3 1302 	umull	r1, r3, r3, r2
 80003c4:	0899      	lsrs	r1, r3, #2
 80003c6:	460b      	mov	r3, r1
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	440b      	add	r3, r1
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	71fb      	strb	r3, [r7, #7]
		key=is_command(&command_tx[0],i);
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	4619      	mov	r1, r3
 80003d4:	480e      	ldr	r0, [pc, #56]	; (8000410 <main+0x80>)
 80003d6:	f7ff ff23 	bl	8000220 <is_command>
 80003da:	4603      	mov	r3, r0
 80003dc:	71bb      	strb	r3, [r7, #6]
		if (key!=KEY_NONE){
 80003de:	79bb      	ldrb	r3, [r7, #6]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d103      	bne.n	80003ec <main+0x5c>
			break;
		}
		i++;
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	3301      	adds	r3, #1
 80003e8:	71fb      	strb	r3, [r7, #7]
		i=i%5;
 80003ea:	e7e7      	b.n	80003bc <main+0x2c>
			break;
 80003ec:	bf00      	nop
	  }
	if(key==IS_WORD){
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	2b09      	cmp	r3, #9
 80003f2:	d106      	bne.n	8000402 <main+0x72>
		printf("sand_val:%c\n",command_tx[i]);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4a06      	ldr	r2, [pc, #24]	; (8000410 <main+0x80>)
 80003f8:	5cd3      	ldrb	r3, [r2, r3]
 80003fa:	4619      	mov	r1, r3
 80003fc:	4807      	ldr	r0, [pc, #28]	; (800041c <main+0x8c>)
 80003fe:	f002 f811 	bl	8002424 <iprintf>
	}
	memset(command_tx,0,5);
 8000402:	2205      	movs	r2, #5
 8000404:	2100      	movs	r1, #0
 8000406:	4802      	ldr	r0, [pc, #8]	; (8000410 <main+0x80>)
 8000408:	f002 f952 	bl	80026b0 <memset>
  {
 800040c:	e7d2      	b.n	80003b4 <main+0x24>
 800040e:	bf00      	nop
 8000410:	20000084 	.word	0x20000084
 8000414:	20000090 	.word	0x20000090
 8000418:	cccccccd 	.word	0xcccccccd
 800041c:	08003250 	.word	0x08003250

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b090      	sub	sp, #64	; 0x40
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2228      	movs	r2, #40	; 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f002 f93e 	bl	80026b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2302      	movs	r3, #2
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4618      	mov	r0, r3
 800046a:	f000 fed5 	bl	8001218 <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000474:	f000 f819 	bl	80004aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
 800047a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2302      	movs	r3, #2
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f001 f942 	bl	800171c <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049e:	f000 f804 	bl	80004aa <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3740      	adds	r7, #64	; 0x40
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ae:	b672      	cpsid	i
}
 80004b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a14      	ldr	r2, [pc, #80]	; (8000510 <HAL_MspInit+0x5c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <HAL_MspInit+0x5c>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <HAL_MspInit+0x60>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <HAL_MspInit+0x60>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010000 	.word	0x40010000

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800051c:	e7fe      	b.n	800051c <NMI_Handler+0x4>

0800051e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler+0x4>

0800052a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler+0x4>

08000536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f9bf 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <DMA1_Channel5_IRQHandler+0x10>)
 800056e:	f000 fb9b 	bl	8000ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000d8 	.word	0x200000d8

0800057c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e00a      	b.n	80005a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800058e:	f3af 8000 	nop.w
 8000592:	4601      	mov	r1, r0
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	dbf0      	blt.n	800058e <_read+0x12>
  }

  return len;
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e009      	b.n	80005dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe13 	bl	80001fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf1      	blt.n	80005c8 <_write+0x12>
  }
  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_close>:

int _close(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000614:	605a      	str	r2, [r3, #4]
  return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <_isatty>:

int _isatty(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f002 f864 	bl	800274c <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20005000 	.word	0x20005000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	20000270 	.word	0x20000270

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART1_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 8000700:	f001 f99a 	bl	8001a38 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f7ff fece 	bl	80004aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000090 	.word	0x20000090
 8000718:	40013800 	.word	0x40013800

0800071c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <HAL_UART_MspInit+0xd8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d157      	bne.n	80007ec <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800073c:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <HAL_UART_MspInit+0xdc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <HAL_UART_MspInit+0xdc>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <HAL_UART_MspInit+0xdc>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <HAL_UART_MspInit+0xdc>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <HAL_UART_MspInit+0xdc>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <HAL_UART_MspInit+0xdc>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800076c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	481e      	ldr	r0, [pc, #120]	; (80007fc <HAL_UART_MspInit+0xe0>)
 8000782:	f000 fbc5 	bl	8000f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	4818      	ldr	r0, [pc, #96]	; (80007fc <HAL_UART_MspInit+0xe0>)
 800079c:	f000 fbb8 	bl	8000f10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <HAL_UART_MspInit+0xe8>)
 80007a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007d2:	f000 f9af 	bl	8000b34 <HAL_DMA_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80007dc:	f7ff fe65 	bl	80004aa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80007e6:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_UART_MspInit+0xe4>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800
 8000800:	200000d8 	.word	0x200000d8
 8000804:	40020058 	.word	0x40020058

08000808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000808:	f7ff ff58 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800080e:	490c      	ldr	r1, [pc, #48]	; (8000840 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a09      	ldr	r2, [pc, #36]	; (8000848 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000824:	4c09      	ldr	r4, [pc, #36]	; (800084c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000832:	f001 ff91 	bl	8002758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fdab 	bl	8000390 <main>
  bx lr
 800083a:	4770      	bx	lr
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000844:	080032c8 	.word	0x080032c8
  ldr r2, =_sbss
 8000848:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800084c:	2000026c 	.word	0x2000026c

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_Init+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_Init+0x28>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f923 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	200f      	movs	r0, #15
 800086c:	f000 f808 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fe20 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_InitTick+0x54>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x58>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	fbb3 f3f1 	udiv	r3, r3, r1
 800089a:	fbb2 f3f3 	udiv	r3, r2, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f93b 	bl	8000b1a <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00e      	b.n	80008cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d80a      	bhi.n	80008ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f000 f903 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_InitTick+0x5c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000004 	.word	0x20000004

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_IncTick+0x1c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x20>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a03      	ldr	r2, [pc, #12]	; (8000900 <HAL_IncTick+0x20>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000008 	.word	0x20000008
 8000900:	2000011c 	.word	0x2000011c

08000904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b02      	ldr	r3, [pc, #8]	; (8000914 <HAL_GetTick+0x10>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	2000011c 	.word	0x2000011c

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	60d3      	str	r3, [r2, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4906      	ldr	r1, [pc, #24]	; (80009b0 <__NVIC_EnableIRQ+0x34>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff90 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff2d 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff42 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff90 	bl	8000a08 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5f 	bl	80009b4 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff35 	bl	800097c <__NVIC_EnableIRQ>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffa2 	bl	8000a6c <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e043      	b.n	8000bd2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <HAL_DMA_Init+0xa8>)
 8000b52:	4413      	add	r3, r2
 8000b54:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <HAL_DMA_Init+0xac>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	009a      	lsls	r2, r3, #2
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <HAL_DMA_Init+0xb0>)
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	bffdfff8 	.word	0xbffdfff8
 8000be0:	cccccccd 	.word	0xcccccccd
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d101      	bne.n	8000c08 <HAL_DMA_Start_IT+0x20>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e04b      	b.n	8000ca0 <HAL_DMA_Start_IT+0xb8>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d13a      	bne.n	8000c92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2202      	movs	r2, #2
 8000c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2200      	movs	r2, #0
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	68b9      	ldr	r1, [r7, #8]
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f000 f937 	bl	8000eb4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d008      	beq.n	8000c60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f042 020e 	orr.w	r2, r2, #14
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e00f      	b.n	8000c80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0204 	bic.w	r2, r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f042 020a 	orr.w	r2, r2, #10
 8000c7e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 0201 	orr.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	e005      	b.n	8000c9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d04f      	beq.n	8000d70 <HAL_DMA_IRQHandler+0xc8>
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d04a      	beq.n	8000d70 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d107      	bne.n	8000cf8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0204 	bic.w	r2, r2, #4
 8000cf6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a66      	ldr	r2, [pc, #408]	; (8000e98 <HAL_DMA_IRQHandler+0x1f0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d029      	beq.n	8000d56 <HAL_DMA_IRQHandler+0xae>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a65      	ldr	r2, [pc, #404]	; (8000e9c <HAL_DMA_IRQHandler+0x1f4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d022      	beq.n	8000d52 <HAL_DMA_IRQHandler+0xaa>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a63      	ldr	r2, [pc, #396]	; (8000ea0 <HAL_DMA_IRQHandler+0x1f8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d01a      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xa4>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a62      	ldr	r2, [pc, #392]	; (8000ea4 <HAL_DMA_IRQHandler+0x1fc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d012      	beq.n	8000d46 <HAL_DMA_IRQHandler+0x9e>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a60      	ldr	r2, [pc, #384]	; (8000ea8 <HAL_DMA_IRQHandler+0x200>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00a      	beq.n	8000d40 <HAL_DMA_IRQHandler+0x98>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a5f      	ldr	r2, [pc, #380]	; (8000eac <HAL_DMA_IRQHandler+0x204>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d102      	bne.n	8000d3a <HAL_DMA_IRQHandler+0x92>
 8000d34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d38:	e00e      	b.n	8000d58 <HAL_DMA_IRQHandler+0xb0>
 8000d3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d3e:	e00b      	b.n	8000d58 <HAL_DMA_IRQHandler+0xb0>
 8000d40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d44:	e008      	b.n	8000d58 <HAL_DMA_IRQHandler+0xb0>
 8000d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d4a:	e005      	b.n	8000d58 <HAL_DMA_IRQHandler+0xb0>
 8000d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d50:	e002      	b.n	8000d58 <HAL_DMA_IRQHandler+0xb0>
 8000d52:	2340      	movs	r3, #64	; 0x40
 8000d54:	e000      	b.n	8000d58 <HAL_DMA_IRQHandler+0xb0>
 8000d56:	2304      	movs	r3, #4
 8000d58:	4a55      	ldr	r2, [pc, #340]	; (8000eb0 <HAL_DMA_IRQHandler+0x208>)
 8000d5a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 8094 	beq.w	8000e8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d6e:	e08e      	b.n	8000e8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	2202      	movs	r2, #2
 8000d76:	409a      	lsls	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d056      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x186>
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d051      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0320 	and.w	r3, r3, #32
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10b      	bne.n	8000db0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 020a 	bic.w	r2, r2, #10
 8000da6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a38      	ldr	r2, [pc, #224]	; (8000e98 <HAL_DMA_IRQHandler+0x1f0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d029      	beq.n	8000e0e <HAL_DMA_IRQHandler+0x166>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a37      	ldr	r2, [pc, #220]	; (8000e9c <HAL_DMA_IRQHandler+0x1f4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d022      	beq.n	8000e0a <HAL_DMA_IRQHandler+0x162>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a35      	ldr	r2, [pc, #212]	; (8000ea0 <HAL_DMA_IRQHandler+0x1f8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d01a      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x15c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a34      	ldr	r2, [pc, #208]	; (8000ea4 <HAL_DMA_IRQHandler+0x1fc>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d012      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x156>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a32      	ldr	r2, [pc, #200]	; (8000ea8 <HAL_DMA_IRQHandler+0x200>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00a      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x150>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a31      	ldr	r2, [pc, #196]	; (8000eac <HAL_DMA_IRQHandler+0x204>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d102      	bne.n	8000df2 <HAL_DMA_IRQHandler+0x14a>
 8000dec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000df0:	e00e      	b.n	8000e10 <HAL_DMA_IRQHandler+0x168>
 8000df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000df6:	e00b      	b.n	8000e10 <HAL_DMA_IRQHandler+0x168>
 8000df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfc:	e008      	b.n	8000e10 <HAL_DMA_IRQHandler+0x168>
 8000dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e02:	e005      	b.n	8000e10 <HAL_DMA_IRQHandler+0x168>
 8000e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e08:	e002      	b.n	8000e10 <HAL_DMA_IRQHandler+0x168>
 8000e0a:	2320      	movs	r3, #32
 8000e0c:	e000      	b.n	8000e10 <HAL_DMA_IRQHandler+0x168>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <HAL_DMA_IRQHandler+0x208>)
 8000e12:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d034      	beq.n	8000e8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e2c:	e02f      	b.n	8000e8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	2208      	movs	r2, #8
 8000e34:	409a      	lsls	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d028      	beq.n	8000e90 <HAL_DMA_IRQHandler+0x1e8>
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d023      	beq.n	8000e90 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 020e 	bic.w	r2, r2, #14
 8000e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	4798      	blx	r3
    }
  }
  return;
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
}
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40020008 	.word	0x40020008
 8000e9c:	4002001c 	.word	0x4002001c
 8000ea0:	40020030 	.word	0x40020030
 8000ea4:	40020044 	.word	0x40020044
 8000ea8:	40020058 	.word	0x40020058
 8000eac:	4002006c 	.word	0x4002006c
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b10      	cmp	r3, #16
 8000ee0:	d108      	bne.n	8000ef4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ef2:	e007      	b.n	8000f04 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b08b      	sub	sp, #44	; 0x2c
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f22:	e169      	b.n	80011f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f24:	2201      	movs	r2, #1
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	69fa      	ldr	r2, [r7, #28]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f040 8158 	bne.w	80011f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a9a      	ldr	r2, [pc, #616]	; (80011b0 <HAL_GPIO_Init+0x2a0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d05e      	beq.n	800100a <HAL_GPIO_Init+0xfa>
 8000f4c:	4a98      	ldr	r2, [pc, #608]	; (80011b0 <HAL_GPIO_Init+0x2a0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d875      	bhi.n	800103e <HAL_GPIO_Init+0x12e>
 8000f52:	4a98      	ldr	r2, [pc, #608]	; (80011b4 <HAL_GPIO_Init+0x2a4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d058      	beq.n	800100a <HAL_GPIO_Init+0xfa>
 8000f58:	4a96      	ldr	r2, [pc, #600]	; (80011b4 <HAL_GPIO_Init+0x2a4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d86f      	bhi.n	800103e <HAL_GPIO_Init+0x12e>
 8000f5e:	4a96      	ldr	r2, [pc, #600]	; (80011b8 <HAL_GPIO_Init+0x2a8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d052      	beq.n	800100a <HAL_GPIO_Init+0xfa>
 8000f64:	4a94      	ldr	r2, [pc, #592]	; (80011b8 <HAL_GPIO_Init+0x2a8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d869      	bhi.n	800103e <HAL_GPIO_Init+0x12e>
 8000f6a:	4a94      	ldr	r2, [pc, #592]	; (80011bc <HAL_GPIO_Init+0x2ac>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d04c      	beq.n	800100a <HAL_GPIO_Init+0xfa>
 8000f70:	4a92      	ldr	r2, [pc, #584]	; (80011bc <HAL_GPIO_Init+0x2ac>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d863      	bhi.n	800103e <HAL_GPIO_Init+0x12e>
 8000f76:	4a92      	ldr	r2, [pc, #584]	; (80011c0 <HAL_GPIO_Init+0x2b0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d046      	beq.n	800100a <HAL_GPIO_Init+0xfa>
 8000f7c:	4a90      	ldr	r2, [pc, #576]	; (80011c0 <HAL_GPIO_Init+0x2b0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d85d      	bhi.n	800103e <HAL_GPIO_Init+0x12e>
 8000f82:	2b12      	cmp	r3, #18
 8000f84:	d82a      	bhi.n	8000fdc <HAL_GPIO_Init+0xcc>
 8000f86:	2b12      	cmp	r3, #18
 8000f88:	d859      	bhi.n	800103e <HAL_GPIO_Init+0x12e>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <HAL_GPIO_Init+0x80>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	0800100b 	.word	0x0800100b
 8000f94:	08000fe5 	.word	0x08000fe5
 8000f98:	08000ff7 	.word	0x08000ff7
 8000f9c:	08001039 	.word	0x08001039
 8000fa0:	0800103f 	.word	0x0800103f
 8000fa4:	0800103f 	.word	0x0800103f
 8000fa8:	0800103f 	.word	0x0800103f
 8000fac:	0800103f 	.word	0x0800103f
 8000fb0:	0800103f 	.word	0x0800103f
 8000fb4:	0800103f 	.word	0x0800103f
 8000fb8:	0800103f 	.word	0x0800103f
 8000fbc:	0800103f 	.word	0x0800103f
 8000fc0:	0800103f 	.word	0x0800103f
 8000fc4:	0800103f 	.word	0x0800103f
 8000fc8:	0800103f 	.word	0x0800103f
 8000fcc:	0800103f 	.word	0x0800103f
 8000fd0:	0800103f 	.word	0x0800103f
 8000fd4:	08000fed 	.word	0x08000fed
 8000fd8:	08001001 	.word	0x08001001
 8000fdc:	4a79      	ldr	r2, [pc, #484]	; (80011c4 <HAL_GPIO_Init+0x2b4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fe2:	e02c      	b.n	800103e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	623b      	str	r3, [r7, #32]
          break;
 8000fea:	e029      	b.n	8001040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	623b      	str	r3, [r7, #32]
          break;
 8000ff4:	e024      	b.n	8001040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	623b      	str	r3, [r7, #32]
          break;
 8000ffe:	e01f      	b.n	8001040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	330c      	adds	r3, #12
 8001006:	623b      	str	r3, [r7, #32]
          break;
 8001008:	e01a      	b.n	8001040 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001012:	2304      	movs	r3, #4
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e013      	b.n	8001040 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d105      	bne.n	800102c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001020:	2308      	movs	r3, #8
 8001022:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	611a      	str	r2, [r3, #16]
          break;
 800102a:	e009      	b.n	8001040 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800102c:	2308      	movs	r3, #8
 800102e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	615a      	str	r2, [r3, #20]
          break;
 8001036:	e003      	b.n	8001040 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
          break;
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x130>
          break;
 800103e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	2bff      	cmp	r3, #255	; 0xff
 8001044:	d801      	bhi.n	800104a <HAL_GPIO_Init+0x13a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	e001      	b.n	800104e <HAL_GPIO_Init+0x13e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3304      	adds	r3, #4
 800104e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2bff      	cmp	r3, #255	; 0xff
 8001054:	d802      	bhi.n	800105c <HAL_GPIO_Init+0x14c>
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	e002      	b.n	8001062 <HAL_GPIO_Init+0x152>
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	3b08      	subs	r3, #8
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	210f      	movs	r1, #15
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	6a39      	ldr	r1, [r7, #32]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	431a      	orrs	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80b1 	beq.w	80011f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001090:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <HAL_GPIO_Init+0x2b8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_GPIO_Init+0x2b8>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b4a      	ldr	r3, [pc, #296]	; (80011c8 <HAL_GPIO_Init+0x2b8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <HAL_GPIO_Init+0x2bc>)
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a40      	ldr	r2, [pc, #256]	; (80011d0 <HAL_GPIO_Init+0x2c0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d013      	beq.n	80010fc <HAL_GPIO_Init+0x1ec>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a3f      	ldr	r2, [pc, #252]	; (80011d4 <HAL_GPIO_Init+0x2c4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d00d      	beq.n	80010f8 <HAL_GPIO_Init+0x1e8>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a3e      	ldr	r2, [pc, #248]	; (80011d8 <HAL_GPIO_Init+0x2c8>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d007      	beq.n	80010f4 <HAL_GPIO_Init+0x1e4>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3d      	ldr	r2, [pc, #244]	; (80011dc <HAL_GPIO_Init+0x2cc>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d101      	bne.n	80010f0 <HAL_GPIO_Init+0x1e0>
 80010ec:	2303      	movs	r3, #3
 80010ee:	e006      	b.n	80010fe <HAL_GPIO_Init+0x1ee>
 80010f0:	2304      	movs	r3, #4
 80010f2:	e004      	b.n	80010fe <HAL_GPIO_Init+0x1ee>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x1ee>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_Init+0x1ee>
 80010fc:	2300      	movs	r3, #0
 80010fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001100:	f002 0203 	and.w	r2, r2, #3
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	4093      	lsls	r3, r2
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800110e:	492f      	ldr	r1, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x2bc>)
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	492c      	ldr	r1, [pc, #176]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	43db      	mvns	r3, r3
 800113e:	4928      	ldr	r1, [pc, #160]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 8001140:	4013      	ands	r3, r2
 8001142:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	4922      	ldr	r1, [pc, #136]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	60cb      	str	r3, [r1, #12]
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	43db      	mvns	r3, r3
 8001166:	491e      	ldr	r1, [pc, #120]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 8001168:	4013      	ands	r3, r2
 800116a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4918      	ldr	r1, [pc, #96]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	43db      	mvns	r3, r3
 800118e:	4914      	ldr	r1, [pc, #80]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 8001190:	4013      	ands	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d021      	beq.n	80011e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	490e      	ldr	r1, [pc, #56]	; (80011e0 <HAL_GPIO_Init+0x2d0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
 80011ac:	e021      	b.n	80011f2 <HAL_GPIO_Init+0x2e2>
 80011ae:	bf00      	nop
 80011b0:	10320000 	.word	0x10320000
 80011b4:	10310000 	.word	0x10310000
 80011b8:	10220000 	.word	0x10220000
 80011bc:	10210000 	.word	0x10210000
 80011c0:	10120000 	.word	0x10120000
 80011c4:	10110000 	.word	0x10110000
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000
 80011d0:	40010800 	.word	0x40010800
 80011d4:	40010c00 	.word	0x40010c00
 80011d8:	40011000 	.word	0x40011000
 80011dc:	40011400 	.word	0x40011400
 80011e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_GPIO_Init+0x304>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4909      	ldr	r1, [pc, #36]	; (8001214 <HAL_GPIO_Init+0x304>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	3301      	adds	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f47f ae8e 	bne.w	8000f24 <HAL_GPIO_Init+0x14>
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	372c      	adds	r7, #44	; 0x2c
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e272      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8087 	beq.w	8001346 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001238:	4b92      	ldr	r3, [pc, #584]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b04      	cmp	r3, #4
 8001242:	d00c      	beq.n	800125e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001244:	4b8f      	ldr	r3, [pc, #572]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	d112      	bne.n	8001276 <HAL_RCC_OscConfig+0x5e>
 8001250:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125c:	d10b      	bne.n	8001276 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125e:	4b89      	ldr	r3, [pc, #548]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d06c      	beq.n	8001344 <HAL_RCC_OscConfig+0x12c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d168      	bne.n	8001344 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e24c      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x76>
 8001280:	4b80      	ldr	r3, [pc, #512]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a7f      	ldr	r2, [pc, #508]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e02e      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x98>
 8001296:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a7a      	ldr	r2, [pc, #488]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 800129c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b78      	ldr	r3, [pc, #480]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a77      	ldr	r2, [pc, #476]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0xbc>
 80012ba:	4b72      	ldr	r3, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a71      	ldr	r2, [pc, #452]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6e      	ldr	r2, [pc, #440]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 80012d4:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a6a      	ldr	r2, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b68      	ldr	r3, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a67      	ldr	r2, [pc, #412]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb06 	bl	8000904 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fb02 	bl	8000904 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e200      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xe4>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff faf2 	bl	8000904 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff faee 	bl	8000904 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1ec      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b53      	ldr	r3, [pc, #332]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x10c>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001352:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800135e:	4b49      	ldr	r3, [pc, #292]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x18c>
 800136a:	4b46      	ldr	r3, [pc, #280]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b43      	ldr	r3, [pc, #268]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x176>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c0      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4939      	ldr	r1, [pc, #228]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff faa7 	bl	8000904 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff faa3 	bl	8000904 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a1      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4927      	ldr	r1, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa86 	bl	8000904 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fa82 	bl	8000904 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e180      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03a      	beq.n	800149c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d019      	beq.n	8001462 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_RCC_OscConfig+0x274>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff fa66 	bl	8000904 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fa62 	bl	8000904 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e160      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f000 face 	bl	80019fc <RCC_Delay>
 8001460:	e01c      	b.n	800149c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_RCC_OscConfig+0x274>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff fa4c 	bl	8000904 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146e:	e00f      	b.n	8001490 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fa48 	bl	8000904 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d908      	bls.n	8001490 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e146      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	42420000 	.word	0x42420000
 800148c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b92      	ldr	r3, [pc, #584]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1e9      	bne.n	8001470 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a6 	beq.w	80015f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b8b      	ldr	r3, [pc, #556]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10d      	bne.n	80014d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b88      	ldr	r3, [pc, #544]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a87      	ldr	r2, [pc, #540]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b85      	ldr	r3, [pc, #532]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b82      	ldr	r3, [pc, #520]	; (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	4b7f      	ldr	r3, [pc, #508]	; (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a7e      	ldr	r2, [pc, #504]	; (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fa09 	bl	8000904 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff fa05 	bl	8000904 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b64      	cmp	r3, #100	; 0x64
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e103      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	4b75      	ldr	r3, [pc, #468]	; (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x312>
 800151c:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	e02d      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x334>
 8001532:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a69      	ldr	r2, [pc, #420]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	4b67      	ldr	r3, [pc, #412]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a66      	ldr	r2, [pc, #408]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	e01c      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b05      	cmp	r3, #5
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0x356>
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a60      	ldr	r2, [pc, #384]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a5d      	ldr	r2, [pc, #372]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a5a      	ldr	r2, [pc, #360]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6213      	str	r3, [r2, #32]
 800157a:	4b58      	ldr	r3, [pc, #352]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a57      	ldr	r2, [pc, #348]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d015      	beq.n	80015ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff f9b9 	bl	8000904 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff f9b5 	bl	8000904 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0b1      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ee      	beq.n	8001596 <HAL_RCC_OscConfig+0x37e>
 80015b8:	e014      	b.n	80015e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f9a3 	bl	8000904 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff f99f 	bl	8000904 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e09b      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	4b40      	ldr	r3, [pc, #256]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d105      	bne.n	80015f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ea:	4b3c      	ldr	r3, [pc, #240]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a3b      	ldr	r2, [pc, #236]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8087 	beq.w	800170e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001600:	4b36      	ldr	r3, [pc, #216]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d061      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d146      	bne.n	80016a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff f973 	bl	8000904 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff f96f 	bl	8000904 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e06d      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001648:	d108      	bne.n	800165c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	4921      	ldr	r1, [pc, #132]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a19      	ldr	r1, [r3, #32]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	430b      	orrs	r3, r1
 800166e:	491b      	ldr	r1, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff f943 	bl	8000904 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff f93f 	bl	8000904 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x46a>
 80016a0:	e035      	b.n	800170e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff f92c 	bl	8000904 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff f928 	bl	8000904 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e026      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x498>
 80016ce:	e01e      	b.n	800170e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e019      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
 80016e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_OscConfig+0x500>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0d0      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d910      	bls.n	8001760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0207 	bic.w	r2, r3, #7
 8001746:	4965      	ldr	r1, [pc, #404]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800179a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d040      	beq.n	800183c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d115      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e073      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06b      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4936      	ldr	r1, [pc, #216]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff f87a 	bl	8000904 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	e00a      	b.n	800182a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7ff f876 	bl	8000904 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e053      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 020c 	and.w	r2, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1eb      	bne.n	8001814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d210      	bcs.n	800186c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0207 	bic.w	r2, r3, #7
 8001852:	4922      	ldr	r1, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1cc>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1d0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe ffd8 	bl	8000880 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08003260 	.word	0x08003260
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <HAL_RCC_GetSysClockFreq+0x94>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b04      	cmp	r3, #4
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x30>
 800191a:	2b08      	cmp	r3, #8
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x36>
 800191e:	e027      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001922:	613b      	str	r3, [r7, #16]
      break;
 8001924:	e027      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_RCC_GetSysClockFreq+0x94>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	0c5b      	lsrs	r3, r3, #17
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_RCC_GetSysClockFreq+0xa0>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001952:	fb03 f202 	mul.w	r2, r3, r2
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e004      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	613b      	str	r3, [r7, #16]
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001972:	613b      	str	r3, [r7, #16]
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	693b      	ldr	r3, [r7, #16]
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	007a1200 	.word	0x007a1200
 800198c:	08003278 	.word	0x08003278
 8001990:	08003288 	.word	0x08003288
 8001994:	003d0900 	.word	0x003d0900

08001998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000000 	.word	0x20000000

080019ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b0:	f7ff fff2 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	08003270 	.word	0x08003270

080019d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d8:	f7ff ffde 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	0adb      	lsrs	r3, r3, #11
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4903      	ldr	r1, [pc, #12]	; (80019f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	08003270 	.word	0x08003270

080019fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <RCC_Delay+0x34>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <RCC_Delay+0x38>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0a5b      	lsrs	r3, r3, #9
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a18:	bf00      	nop
  }
  while (Delay --);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	60fa      	str	r2, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f9      	bne.n	8001a18 <RCC_Delay+0x1c>
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000000 	.word	0x20000000
 8001a34:	10624dd3 	.word	0x10624dd3

08001a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e042      	b.n	8001ad0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fe5c 	bl	800071c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2224      	movs	r2, #36	; 0x24
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fb81 	bl	8002184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d16d      	bne.n	8001bd4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_UART_Transmit+0x2c>
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e066      	b.n	8001bd6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2221      	movs	r2, #33	; 0x21
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b16:	f7fe fef5 	bl	8000904 <HAL_GetTick>
 8001b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	88fa      	ldrh	r2, [r7, #6]
 8001b20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b30:	d108      	bne.n	8001b44 <HAL_UART_Transmit+0x6c>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d104      	bne.n	8001b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	e003      	b.n	8001b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b4c:	e02a      	b.n	8001ba4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2200      	movs	r2, #0
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f980 	bl	8001e5e <UART_WaitOnFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e036      	b.n	8001bd6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10b      	bne.n	8001b86 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	3302      	adds	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	e007      	b.n	8001b96 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3301      	adds	r3, #1
 8001b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1cf      	bne.n	8001b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f950 	bl	8001e5e <UART_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e006      	b.n	8001bd6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d112      	bne.n	8001c1e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_UART_Receive_DMA+0x26>
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e00b      	b.n	8001c20 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	461a      	mov	r2, r3
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f991 	bl	8001f3c <UART_Start_Receive_DMA>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	e000      	b.n	8001c20 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
  }
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b09c      	sub	sp, #112	; 0x70
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d172      	bne.n	8001d64 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c80:	2200      	movs	r2, #0
 8001c82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c8e:	e853 3f00 	ldrex	r3, [r3]
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ca4:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cac:	e841 2300 	strex	r3, r2, [r1]
 8001cb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e5      	bne.n	8001c84 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3314      	adds	r3, #20
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc2:	e853 3f00 	ldrex	r3, [r3]
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	667b      	str	r3, [r7, #100]	; 0x64
 8001cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3314      	adds	r3, #20
 8001cd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001cd8:	647a      	str	r2, [r7, #68]	; 0x44
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ce0:	e841 2300 	strex	r3, r2, [r1]
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e5      	bne.n	8001cb8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3314      	adds	r3, #20
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	e853 3f00 	ldrex	r3, [r3]
 8001cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d02:	663b      	str	r3, [r7, #96]	; 0x60
 8001d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3314      	adds	r3, #20
 8001d0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d0c:	633a      	str	r2, [r7, #48]	; 0x30
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d14:	e841 2300 	strex	r3, r2, [r1]
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e5      	bne.n	8001cec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d119      	bne.n	8001d64 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	330c      	adds	r3, #12
 8001d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	e853 3f00 	ldrex	r3, [r3]
 8001d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f023 0310 	bic.w	r3, r3, #16
 8001d46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	330c      	adds	r3, #12
 8001d4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d50:	61fa      	str	r2, [r7, #28]
 8001d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d54:	69b9      	ldr	r1, [r7, #24]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	e841 2300 	strex	r3, r2, [r1]
 8001d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e5      	bne.n	8001d30 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d66:	2200      	movs	r2, #0
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d106      	bne.n	8001d80 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d76:	4619      	mov	r1, r3
 8001d78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001d7a:	f7ff ff67 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001d7e:	e002      	b.n	8001d86 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8001d80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001d82:	f7fe fa23 	bl	80001cc <HAL_UART_RxCpltCallback>
}
 8001d86:	bf00      	nop
 8001d88:	3770      	adds	r7, #112	; 0x70
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d108      	bne.n	8001dbc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f7ff ff49 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001dba:	e002      	b.n	8001dc2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff ff33 	bl	8001c28 <HAL_UART_RxHalfCpltCallback>
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b21      	cmp	r3, #33	; 0x21
 8001dfc:	d108      	bne.n	8001e10 <UART_DMAError+0x46>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2200      	movs	r2, #0
 8001e08:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001e0a:	68b8      	ldr	r0, [r7, #8]
 8001e0c:	f000 f930 	bl	8002070 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf14      	ite	ne
 8001e1e:	2301      	movne	r3, #1
 8001e20:	2300      	moveq	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b22      	cmp	r3, #34	; 0x22
 8001e30:	d108      	bne.n	8001e44 <UART_DMAError+0x7a>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001e3e:	68b8      	ldr	r0, [r7, #8]
 8001e40:	f000 f93d 	bl	80020be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	f043 0210 	orr.w	r2, r3, #16
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e50:	68b8      	ldr	r0, [r7, #8]
 8001e52:	f7ff fef2 	bl	8001c3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b090      	sub	sp, #64	; 0x40
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e6e:	e050      	b.n	8001f12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e76:	d04c      	beq.n	8001f12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <UART_WaitOnFlagUntilTimeout+0x30>
 8001e7e:	f7fe fd41 	bl	8000904 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d241      	bcs.n	8001f12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	330c      	adds	r3, #12
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e98:	e853 3f00 	ldrex	r3, [r3]
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	330c      	adds	r3, #12
 8001eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eae:	637a      	str	r2, [r7, #52]	; 0x34
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb6:	e841 2300 	strex	r3, r2, [r1]
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1e5      	bne.n	8001e8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	e853 3f00 	ldrex	r3, [r3]
 8001ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ee2:	623a      	str	r2, [r7, #32]
 8001ee4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee6:	69f9      	ldr	r1, [r7, #28]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	e841 2300 	strex	r3, r2, [r1]
 8001eee:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e5      	bne.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e00f      	b.n	8001f32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d09f      	beq.n	8001e70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3740      	adds	r7, #64	; 0x40
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b098      	sub	sp, #96	; 0x60
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2222      	movs	r2, #34	; 0x22
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	4a3e      	ldr	r2, [pc, #248]	; (8002064 <UART_Start_Receive_DMA+0x128>)
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <UART_Start_Receive_DMA+0x12c>)
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	4a3c      	ldr	r2, [pc, #240]	; (800206c <UART_Start_Receive_DMA+0x130>)
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	2200      	movs	r2, #0
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8001f84:	f107 0308 	add.w	r3, r7, #8
 8001f88:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	f7fe fe24 	bl	8000be8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d019      	beq.n	8001ff2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	330c      	adds	r3, #12
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc8:	e853 3f00 	ldrex	r3, [r3]
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe6:	e841 2300 	strex	r3, r2, [r1]
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1e5      	bne.n	8001fbe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3314      	adds	r3, #20
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	e853 3f00 	ldrex	r3, [r3]
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	657b      	str	r3, [r7, #84]	; 0x54
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3314      	adds	r3, #20
 8002010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002012:	63ba      	str	r2, [r7, #56]	; 0x38
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800201a:	e841 2300 	strex	r3, r2, [r1]
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e5      	bne.n	8001ff2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3314      	adds	r3, #20
 800202c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	e853 3f00 	ldrex	r3, [r3]
 8002034:	617b      	str	r3, [r7, #20]
   return(result);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800203c:	653b      	str	r3, [r7, #80]	; 0x50
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3314      	adds	r3, #20
 8002044:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002046:	627a      	str	r2, [r7, #36]	; 0x24
 8002048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204a:	6a39      	ldr	r1, [r7, #32]
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	e841 2300 	strex	r3, r2, [r1]
 8002052:	61fb      	str	r3, [r7, #28]
   return(result);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e5      	bne.n	8002026 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3760      	adds	r7, #96	; 0x60
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	08001c63 	.word	0x08001c63
 8002068:	08001d8f 	.word	0x08001d8f
 800206c:	08001dcb 	.word	0x08001dcb

08002070 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	e853 3f00 	ldrex	r3, [r3]
 8002086:	60bb      	str	r3, [r7, #8]
   return(result);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	61ba      	str	r2, [r7, #24]
 800209a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	e841 2300 	strex	r3, r2, [r1]
 80020a4:	613b      	str	r3, [r7, #16]
   return(result);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e5      	bne.n	8002078 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80020b4:	bf00      	nop
 80020b6:	3724      	adds	r7, #36	; 0x24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020be:	b480      	push	{r7}
 80020c0:	b095      	sub	sp, #84	; 0x54
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	e853 3f00 	ldrex	r3, [r3]
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020e6:	643a      	str	r2, [r7, #64]	; 0x40
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ee:	e841 2300 	strex	r3, r2, [r1]
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e5      	bne.n	80020c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3314      	adds	r3, #20
 8002100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	e853 3f00 	ldrex	r3, [r3]
 8002108:	61fb      	str	r3, [r7, #28]
   return(result);
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	64bb      	str	r3, [r7, #72]	; 0x48
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3314      	adds	r3, #20
 8002118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800211a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002122:	e841 2300 	strex	r3, r2, [r1]
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e5      	bne.n	80020fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	2b01      	cmp	r3, #1
 8002134:	d119      	bne.n	800216a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	60bb      	str	r3, [r7, #8]
   return(result);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f023 0310 	bic.w	r3, r3, #16
 800214c:	647b      	str	r3, [r7, #68]	; 0x44
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002156:	61ba      	str	r2, [r7, #24]
 8002158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	e841 2300 	strex	r3, r2, [r1]
 8002162:	613b      	str	r3, [r7, #16]
   return(result);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e5      	bne.n	8002136 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002178:	bf00      	nop
 800217a:	3754      	adds	r7, #84	; 0x54
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
	...

08002184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021be:	f023 030c 	bic.w	r3, r3, #12
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <UART_SetConfig+0x114>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d103      	bne.n	80021f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021ec:	f7ff fbf2 	bl	80019d4 <HAL_RCC_GetPCLK2Freq>
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	e002      	b.n	80021fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021f4:	f7ff fbda 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 80021f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009a      	lsls	r2, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <UART_SetConfig+0x118>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	0119      	lsls	r1, r3, #4
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <UART_SetConfig+0x118>)
 8002232:	fba3 0302 	umull	r0, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <UART_SetConfig+0x118>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002250:	4419      	add	r1, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	009a      	lsls	r2, r3, #2
 800225c:	441a      	add	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fbb2 f2f3 	udiv	r2, r2, r3
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <UART_SetConfig+0x118>)
 800226a:	fba3 0302 	umull	r0, r3, r3, r2
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2064      	movs	r0, #100	; 0x64
 8002272:	fb00 f303 	mul.w	r3, r0, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	3332      	adds	r3, #50	; 0x32
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <UART_SetConfig+0x118>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	440a      	add	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40013800 	.word	0x40013800
 800229c:	51eb851f 	.word	0x51eb851f

080022a0 <std>:
 80022a0:	2300      	movs	r3, #0
 80022a2:	b510      	push	{r4, lr}
 80022a4:	4604      	mov	r4, r0
 80022a6:	e9c0 3300 	strd	r3, r3, [r0]
 80022aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022ae:	6083      	str	r3, [r0, #8]
 80022b0:	8181      	strh	r1, [r0, #12]
 80022b2:	6643      	str	r3, [r0, #100]	; 0x64
 80022b4:	81c2      	strh	r2, [r0, #14]
 80022b6:	6183      	str	r3, [r0, #24]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2208      	movs	r2, #8
 80022bc:	305c      	adds	r0, #92	; 0x5c
 80022be:	f000 f9f7 	bl	80026b0 <memset>
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <std+0x58>)
 80022c4:	6224      	str	r4, [r4, #32]
 80022c6:	6263      	str	r3, [r4, #36]	; 0x24
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <std+0x5c>)
 80022ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <std+0x60>)
 80022ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <std+0x64>)
 80022d2:	6323      	str	r3, [r4, #48]	; 0x30
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <std+0x68>)
 80022d6:	429c      	cmp	r4, r3
 80022d8:	d006      	beq.n	80022e8 <std+0x48>
 80022da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80022de:	4294      	cmp	r4, r2
 80022e0:	d002      	beq.n	80022e8 <std+0x48>
 80022e2:	33d0      	adds	r3, #208	; 0xd0
 80022e4:	429c      	cmp	r4, r3
 80022e6:	d105      	bne.n	80022f4 <std+0x54>
 80022e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f0:	f000 ba56 	b.w	80027a0 <__retarget_lock_init_recursive>
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	bf00      	nop
 80022f8:	08002501 	.word	0x08002501
 80022fc:	08002523 	.word	0x08002523
 8002300:	0800255b 	.word	0x0800255b
 8002304:	0800257f 	.word	0x0800257f
 8002308:	20000120 	.word	0x20000120

0800230c <stdio_exit_handler>:
 800230c:	4a02      	ldr	r2, [pc, #8]	; (8002318 <stdio_exit_handler+0xc>)
 800230e:	4903      	ldr	r1, [pc, #12]	; (800231c <stdio_exit_handler+0x10>)
 8002310:	4803      	ldr	r0, [pc, #12]	; (8002320 <stdio_exit_handler+0x14>)
 8002312:	f000 b869 	b.w	80023e8 <_fwalk_sglue>
 8002316:	bf00      	nop
 8002318:	2000000c 	.word	0x2000000c
 800231c:	08003041 	.word	0x08003041
 8002320:	20000018 	.word	0x20000018

08002324 <cleanup_stdio>:
 8002324:	6841      	ldr	r1, [r0, #4]
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <cleanup_stdio+0x34>)
 8002328:	b510      	push	{r4, lr}
 800232a:	4299      	cmp	r1, r3
 800232c:	4604      	mov	r4, r0
 800232e:	d001      	beq.n	8002334 <cleanup_stdio+0x10>
 8002330:	f000 fe86 	bl	8003040 <_fflush_r>
 8002334:	68a1      	ldr	r1, [r4, #8]
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <cleanup_stdio+0x38>)
 8002338:	4299      	cmp	r1, r3
 800233a:	d002      	beq.n	8002342 <cleanup_stdio+0x1e>
 800233c:	4620      	mov	r0, r4
 800233e:	f000 fe7f 	bl	8003040 <_fflush_r>
 8002342:	68e1      	ldr	r1, [r4, #12]
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <cleanup_stdio+0x3c>)
 8002346:	4299      	cmp	r1, r3
 8002348:	d004      	beq.n	8002354 <cleanup_stdio+0x30>
 800234a:	4620      	mov	r0, r4
 800234c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002350:	f000 be76 	b.w	8003040 <_fflush_r>
 8002354:	bd10      	pop	{r4, pc}
 8002356:	bf00      	nop
 8002358:	20000120 	.word	0x20000120
 800235c:	20000188 	.word	0x20000188
 8002360:	200001f0 	.word	0x200001f0

08002364 <global_stdio_init.part.0>:
 8002364:	b510      	push	{r4, lr}
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <global_stdio_init.part.0+0x30>)
 8002368:	4c0b      	ldr	r4, [pc, #44]	; (8002398 <global_stdio_init.part.0+0x34>)
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <global_stdio_init.part.0+0x38>)
 800236c:	4620      	mov	r0, r4
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	2104      	movs	r1, #4
 8002372:	2200      	movs	r2, #0
 8002374:	f7ff ff94 	bl	80022a0 <std>
 8002378:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800237c:	2201      	movs	r2, #1
 800237e:	2109      	movs	r1, #9
 8002380:	f7ff ff8e 	bl	80022a0 <std>
 8002384:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002388:	2202      	movs	r2, #2
 800238a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800238e:	2112      	movs	r1, #18
 8002390:	f7ff bf86 	b.w	80022a0 <std>
 8002394:	20000258 	.word	0x20000258
 8002398:	20000120 	.word	0x20000120
 800239c:	0800230d 	.word	0x0800230d

080023a0 <__sfp_lock_acquire>:
 80023a0:	4801      	ldr	r0, [pc, #4]	; (80023a8 <__sfp_lock_acquire+0x8>)
 80023a2:	f000 b9fe 	b.w	80027a2 <__retarget_lock_acquire_recursive>
 80023a6:	bf00      	nop
 80023a8:	20000261 	.word	0x20000261

080023ac <__sfp_lock_release>:
 80023ac:	4801      	ldr	r0, [pc, #4]	; (80023b4 <__sfp_lock_release+0x8>)
 80023ae:	f000 b9f9 	b.w	80027a4 <__retarget_lock_release_recursive>
 80023b2:	bf00      	nop
 80023b4:	20000261 	.word	0x20000261

080023b8 <__sinit>:
 80023b8:	b510      	push	{r4, lr}
 80023ba:	4604      	mov	r4, r0
 80023bc:	f7ff fff0 	bl	80023a0 <__sfp_lock_acquire>
 80023c0:	6a23      	ldr	r3, [r4, #32]
 80023c2:	b11b      	cbz	r3, 80023cc <__sinit+0x14>
 80023c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c8:	f7ff bff0 	b.w	80023ac <__sfp_lock_release>
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__sinit+0x28>)
 80023ce:	6223      	str	r3, [r4, #32]
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__sinit+0x2c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f5      	bne.n	80023c4 <__sinit+0xc>
 80023d8:	f7ff ffc4 	bl	8002364 <global_stdio_init.part.0>
 80023dc:	e7f2      	b.n	80023c4 <__sinit+0xc>
 80023de:	bf00      	nop
 80023e0:	08002325 	.word	0x08002325
 80023e4:	20000258 	.word	0x20000258

080023e8 <_fwalk_sglue>:
 80023e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023ec:	4607      	mov	r7, r0
 80023ee:	4688      	mov	r8, r1
 80023f0:	4614      	mov	r4, r2
 80023f2:	2600      	movs	r6, #0
 80023f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023f8:	f1b9 0901 	subs.w	r9, r9, #1
 80023fc:	d505      	bpl.n	800240a <_fwalk_sglue+0x22>
 80023fe:	6824      	ldr	r4, [r4, #0]
 8002400:	2c00      	cmp	r4, #0
 8002402:	d1f7      	bne.n	80023f4 <_fwalk_sglue+0xc>
 8002404:	4630      	mov	r0, r6
 8002406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800240a:	89ab      	ldrh	r3, [r5, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d907      	bls.n	8002420 <_fwalk_sglue+0x38>
 8002410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002414:	3301      	adds	r3, #1
 8002416:	d003      	beq.n	8002420 <_fwalk_sglue+0x38>
 8002418:	4629      	mov	r1, r5
 800241a:	4638      	mov	r0, r7
 800241c:	47c0      	blx	r8
 800241e:	4306      	orrs	r6, r0
 8002420:	3568      	adds	r5, #104	; 0x68
 8002422:	e7e9      	b.n	80023f8 <_fwalk_sglue+0x10>

08002424 <iprintf>:
 8002424:	b40f      	push	{r0, r1, r2, r3}
 8002426:	b507      	push	{r0, r1, r2, lr}
 8002428:	4906      	ldr	r1, [pc, #24]	; (8002444 <iprintf+0x20>)
 800242a:	ab04      	add	r3, sp, #16
 800242c:	6808      	ldr	r0, [r1, #0]
 800242e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002432:	6881      	ldr	r1, [r0, #8]
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	f000 fad3 	bl	80029e0 <_vfiprintf_r>
 800243a:	b003      	add	sp, #12
 800243c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002440:	b004      	add	sp, #16
 8002442:	4770      	bx	lr
 8002444:	20000064 	.word	0x20000064

08002448 <_puts_r>:
 8002448:	6a03      	ldr	r3, [r0, #32]
 800244a:	b570      	push	{r4, r5, r6, lr}
 800244c:	4605      	mov	r5, r0
 800244e:	460e      	mov	r6, r1
 8002450:	6884      	ldr	r4, [r0, #8]
 8002452:	b90b      	cbnz	r3, 8002458 <_puts_r+0x10>
 8002454:	f7ff ffb0 	bl	80023b8 <__sinit>
 8002458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800245a:	07db      	lsls	r3, r3, #31
 800245c:	d405      	bmi.n	800246a <_puts_r+0x22>
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	0598      	lsls	r0, r3, #22
 8002462:	d402      	bmi.n	800246a <_puts_r+0x22>
 8002464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002466:	f000 f99c 	bl	80027a2 <__retarget_lock_acquire_recursive>
 800246a:	89a3      	ldrh	r3, [r4, #12]
 800246c:	0719      	lsls	r1, r3, #28
 800246e:	d513      	bpl.n	8002498 <_puts_r+0x50>
 8002470:	6923      	ldr	r3, [r4, #16]
 8002472:	b18b      	cbz	r3, 8002498 <_puts_r+0x50>
 8002474:	3e01      	subs	r6, #1
 8002476:	68a3      	ldr	r3, [r4, #8]
 8002478:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800247c:	3b01      	subs	r3, #1
 800247e:	60a3      	str	r3, [r4, #8]
 8002480:	b9e9      	cbnz	r1, 80024be <_puts_r+0x76>
 8002482:	2b00      	cmp	r3, #0
 8002484:	da2e      	bge.n	80024e4 <_puts_r+0x9c>
 8002486:	4622      	mov	r2, r4
 8002488:	210a      	movs	r1, #10
 800248a:	4628      	mov	r0, r5
 800248c:	f000 f87b 	bl	8002586 <__swbuf_r>
 8002490:	3001      	adds	r0, #1
 8002492:	d007      	beq.n	80024a4 <_puts_r+0x5c>
 8002494:	250a      	movs	r5, #10
 8002496:	e007      	b.n	80024a8 <_puts_r+0x60>
 8002498:	4621      	mov	r1, r4
 800249a:	4628      	mov	r0, r5
 800249c:	f000 f8b0 	bl	8002600 <__swsetup_r>
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d0e7      	beq.n	8002474 <_puts_r+0x2c>
 80024a4:	f04f 35ff 	mov.w	r5, #4294967295
 80024a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024aa:	07da      	lsls	r2, r3, #31
 80024ac:	d405      	bmi.n	80024ba <_puts_r+0x72>
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	059b      	lsls	r3, r3, #22
 80024b2:	d402      	bmi.n	80024ba <_puts_r+0x72>
 80024b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024b6:	f000 f975 	bl	80027a4 <__retarget_lock_release_recursive>
 80024ba:	4628      	mov	r0, r5
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
 80024be:	2b00      	cmp	r3, #0
 80024c0:	da04      	bge.n	80024cc <_puts_r+0x84>
 80024c2:	69a2      	ldr	r2, [r4, #24]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	dc06      	bgt.n	80024d6 <_puts_r+0x8e>
 80024c8:	290a      	cmp	r1, #10
 80024ca:	d004      	beq.n	80024d6 <_puts_r+0x8e>
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	6022      	str	r2, [r4, #0]
 80024d2:	7019      	strb	r1, [r3, #0]
 80024d4:	e7cf      	b.n	8002476 <_puts_r+0x2e>
 80024d6:	4622      	mov	r2, r4
 80024d8:	4628      	mov	r0, r5
 80024da:	f000 f854 	bl	8002586 <__swbuf_r>
 80024de:	3001      	adds	r0, #1
 80024e0:	d1c9      	bne.n	8002476 <_puts_r+0x2e>
 80024e2:	e7df      	b.n	80024a4 <_puts_r+0x5c>
 80024e4:	250a      	movs	r5, #10
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	6022      	str	r2, [r4, #0]
 80024ec:	701d      	strb	r5, [r3, #0]
 80024ee:	e7db      	b.n	80024a8 <_puts_r+0x60>

080024f0 <puts>:
 80024f0:	4b02      	ldr	r3, [pc, #8]	; (80024fc <puts+0xc>)
 80024f2:	4601      	mov	r1, r0
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	f7ff bfa7 	b.w	8002448 <_puts_r>
 80024fa:	bf00      	nop
 80024fc:	20000064 	.word	0x20000064

08002500 <__sread>:
 8002500:	b510      	push	{r4, lr}
 8002502:	460c      	mov	r4, r1
 8002504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002508:	f000 f8fc 	bl	8002704 <_read_r>
 800250c:	2800      	cmp	r0, #0
 800250e:	bfab      	itete	ge
 8002510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002512:	89a3      	ldrhlt	r3, [r4, #12]
 8002514:	181b      	addge	r3, r3, r0
 8002516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800251a:	bfac      	ite	ge
 800251c:	6563      	strge	r3, [r4, #84]	; 0x54
 800251e:	81a3      	strhlt	r3, [r4, #12]
 8002520:	bd10      	pop	{r4, pc}

08002522 <__swrite>:
 8002522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002526:	461f      	mov	r7, r3
 8002528:	898b      	ldrh	r3, [r1, #12]
 800252a:	4605      	mov	r5, r0
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	460c      	mov	r4, r1
 8002530:	4616      	mov	r6, r2
 8002532:	d505      	bpl.n	8002540 <__swrite+0x1e>
 8002534:	2302      	movs	r3, #2
 8002536:	2200      	movs	r2, #0
 8002538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800253c:	f000 f8d0 	bl	80026e0 <_lseek_r>
 8002540:	89a3      	ldrh	r3, [r4, #12]
 8002542:	4632      	mov	r2, r6
 8002544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002548:	81a3      	strh	r3, [r4, #12]
 800254a:	4628      	mov	r0, r5
 800254c:	463b      	mov	r3, r7
 800254e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002556:	f000 b8e7 	b.w	8002728 <_write_r>

0800255a <__sseek>:
 800255a:	b510      	push	{r4, lr}
 800255c:	460c      	mov	r4, r1
 800255e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002562:	f000 f8bd 	bl	80026e0 <_lseek_r>
 8002566:	1c43      	adds	r3, r0, #1
 8002568:	89a3      	ldrh	r3, [r4, #12]
 800256a:	bf15      	itete	ne
 800256c:	6560      	strne	r0, [r4, #84]	; 0x54
 800256e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002576:	81a3      	strheq	r3, [r4, #12]
 8002578:	bf18      	it	ne
 800257a:	81a3      	strhne	r3, [r4, #12]
 800257c:	bd10      	pop	{r4, pc}

0800257e <__sclose>:
 800257e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002582:	f000 b89d 	b.w	80026c0 <_close_r>

08002586 <__swbuf_r>:
 8002586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002588:	460e      	mov	r6, r1
 800258a:	4614      	mov	r4, r2
 800258c:	4605      	mov	r5, r0
 800258e:	b118      	cbz	r0, 8002598 <__swbuf_r+0x12>
 8002590:	6a03      	ldr	r3, [r0, #32]
 8002592:	b90b      	cbnz	r3, 8002598 <__swbuf_r+0x12>
 8002594:	f7ff ff10 	bl	80023b8 <__sinit>
 8002598:	69a3      	ldr	r3, [r4, #24]
 800259a:	60a3      	str	r3, [r4, #8]
 800259c:	89a3      	ldrh	r3, [r4, #12]
 800259e:	071a      	lsls	r2, r3, #28
 80025a0:	d525      	bpl.n	80025ee <__swbuf_r+0x68>
 80025a2:	6923      	ldr	r3, [r4, #16]
 80025a4:	b31b      	cbz	r3, 80025ee <__swbuf_r+0x68>
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	6922      	ldr	r2, [r4, #16]
 80025aa:	b2f6      	uxtb	r6, r6
 80025ac:	1a98      	subs	r0, r3, r2
 80025ae:	6963      	ldr	r3, [r4, #20]
 80025b0:	4637      	mov	r7, r6
 80025b2:	4283      	cmp	r3, r0
 80025b4:	dc04      	bgt.n	80025c0 <__swbuf_r+0x3a>
 80025b6:	4621      	mov	r1, r4
 80025b8:	4628      	mov	r0, r5
 80025ba:	f000 fd41 	bl	8003040 <_fflush_r>
 80025be:	b9e0      	cbnz	r0, 80025fa <__swbuf_r+0x74>
 80025c0:	68a3      	ldr	r3, [r4, #8]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	60a3      	str	r3, [r4, #8]
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	6022      	str	r2, [r4, #0]
 80025cc:	701e      	strb	r6, [r3, #0]
 80025ce:	6962      	ldr	r2, [r4, #20]
 80025d0:	1c43      	adds	r3, r0, #1
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d004      	beq.n	80025e0 <__swbuf_r+0x5a>
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	07db      	lsls	r3, r3, #31
 80025da:	d506      	bpl.n	80025ea <__swbuf_r+0x64>
 80025dc:	2e0a      	cmp	r6, #10
 80025de:	d104      	bne.n	80025ea <__swbuf_r+0x64>
 80025e0:	4621      	mov	r1, r4
 80025e2:	4628      	mov	r0, r5
 80025e4:	f000 fd2c 	bl	8003040 <_fflush_r>
 80025e8:	b938      	cbnz	r0, 80025fa <__swbuf_r+0x74>
 80025ea:	4638      	mov	r0, r7
 80025ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ee:	4621      	mov	r1, r4
 80025f0:	4628      	mov	r0, r5
 80025f2:	f000 f805 	bl	8002600 <__swsetup_r>
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d0d5      	beq.n	80025a6 <__swbuf_r+0x20>
 80025fa:	f04f 37ff 	mov.w	r7, #4294967295
 80025fe:	e7f4      	b.n	80025ea <__swbuf_r+0x64>

08002600 <__swsetup_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <__swsetup_r+0xac>)
 8002604:	4605      	mov	r5, r0
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	460c      	mov	r4, r1
 800260a:	b118      	cbz	r0, 8002614 <__swsetup_r+0x14>
 800260c:	6a03      	ldr	r3, [r0, #32]
 800260e:	b90b      	cbnz	r3, 8002614 <__swsetup_r+0x14>
 8002610:	f7ff fed2 	bl	80023b8 <__sinit>
 8002614:	89a3      	ldrh	r3, [r4, #12]
 8002616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800261a:	0718      	lsls	r0, r3, #28
 800261c:	d422      	bmi.n	8002664 <__swsetup_r+0x64>
 800261e:	06d9      	lsls	r1, r3, #27
 8002620:	d407      	bmi.n	8002632 <__swsetup_r+0x32>
 8002622:	2309      	movs	r3, #9
 8002624:	602b      	str	r3, [r5, #0]
 8002626:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800262a:	f04f 30ff 	mov.w	r0, #4294967295
 800262e:	81a3      	strh	r3, [r4, #12]
 8002630:	e034      	b.n	800269c <__swsetup_r+0x9c>
 8002632:	0758      	lsls	r0, r3, #29
 8002634:	d512      	bpl.n	800265c <__swsetup_r+0x5c>
 8002636:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002638:	b141      	cbz	r1, 800264c <__swsetup_r+0x4c>
 800263a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800263e:	4299      	cmp	r1, r3
 8002640:	d002      	beq.n	8002648 <__swsetup_r+0x48>
 8002642:	4628      	mov	r0, r5
 8002644:	f000 f8b0 	bl	80027a8 <_free_r>
 8002648:	2300      	movs	r3, #0
 800264a:	6363      	str	r3, [r4, #52]	; 0x34
 800264c:	89a3      	ldrh	r3, [r4, #12]
 800264e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002652:	81a3      	strh	r3, [r4, #12]
 8002654:	2300      	movs	r3, #0
 8002656:	6063      	str	r3, [r4, #4]
 8002658:	6923      	ldr	r3, [r4, #16]
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	81a3      	strh	r3, [r4, #12]
 8002664:	6923      	ldr	r3, [r4, #16]
 8002666:	b94b      	cbnz	r3, 800267c <__swsetup_r+0x7c>
 8002668:	89a3      	ldrh	r3, [r4, #12]
 800266a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800266e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002672:	d003      	beq.n	800267c <__swsetup_r+0x7c>
 8002674:	4621      	mov	r1, r4
 8002676:	4628      	mov	r0, r5
 8002678:	f000 fd2f 	bl	80030da <__smakebuf_r>
 800267c:	89a0      	ldrh	r0, [r4, #12]
 800267e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002682:	f010 0301 	ands.w	r3, r0, #1
 8002686:	d00a      	beq.n	800269e <__swsetup_r+0x9e>
 8002688:	2300      	movs	r3, #0
 800268a:	60a3      	str	r3, [r4, #8]
 800268c:	6963      	ldr	r3, [r4, #20]
 800268e:	425b      	negs	r3, r3
 8002690:	61a3      	str	r3, [r4, #24]
 8002692:	6923      	ldr	r3, [r4, #16]
 8002694:	b943      	cbnz	r3, 80026a8 <__swsetup_r+0xa8>
 8002696:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800269a:	d1c4      	bne.n	8002626 <__swsetup_r+0x26>
 800269c:	bd38      	pop	{r3, r4, r5, pc}
 800269e:	0781      	lsls	r1, r0, #30
 80026a0:	bf58      	it	pl
 80026a2:	6963      	ldrpl	r3, [r4, #20]
 80026a4:	60a3      	str	r3, [r4, #8]
 80026a6:	e7f4      	b.n	8002692 <__swsetup_r+0x92>
 80026a8:	2000      	movs	r0, #0
 80026aa:	e7f7      	b.n	800269c <__swsetup_r+0x9c>
 80026ac:	20000064 	.word	0x20000064

080026b0 <memset>:
 80026b0:	4603      	mov	r3, r0
 80026b2:	4402      	add	r2, r0
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d100      	bne.n	80026ba <memset+0xa>
 80026b8:	4770      	bx	lr
 80026ba:	f803 1b01 	strb.w	r1, [r3], #1
 80026be:	e7f9      	b.n	80026b4 <memset+0x4>

080026c0 <_close_r>:
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	2300      	movs	r3, #0
 80026c4:	4d05      	ldr	r5, [pc, #20]	; (80026dc <_close_r+0x1c>)
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	602b      	str	r3, [r5, #0]
 80026cc:	f7fd ff8f 	bl	80005ee <_close>
 80026d0:	1c43      	adds	r3, r0, #1
 80026d2:	d102      	bne.n	80026da <_close_r+0x1a>
 80026d4:	682b      	ldr	r3, [r5, #0]
 80026d6:	b103      	cbz	r3, 80026da <_close_r+0x1a>
 80026d8:	6023      	str	r3, [r4, #0]
 80026da:	bd38      	pop	{r3, r4, r5, pc}
 80026dc:	2000025c 	.word	0x2000025c

080026e0 <_lseek_r>:
 80026e0:	b538      	push	{r3, r4, r5, lr}
 80026e2:	4604      	mov	r4, r0
 80026e4:	4608      	mov	r0, r1
 80026e6:	4611      	mov	r1, r2
 80026e8:	2200      	movs	r2, #0
 80026ea:	4d05      	ldr	r5, [pc, #20]	; (8002700 <_lseek_r+0x20>)
 80026ec:	602a      	str	r2, [r5, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f7fd ffa1 	bl	8000636 <_lseek>
 80026f4:	1c43      	adds	r3, r0, #1
 80026f6:	d102      	bne.n	80026fe <_lseek_r+0x1e>
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	b103      	cbz	r3, 80026fe <_lseek_r+0x1e>
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	bd38      	pop	{r3, r4, r5, pc}
 8002700:	2000025c 	.word	0x2000025c

08002704 <_read_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	2200      	movs	r2, #0
 800270e:	4d05      	ldr	r5, [pc, #20]	; (8002724 <_read_r+0x20>)
 8002710:	602a      	str	r2, [r5, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	f7fd ff32 	bl	800057c <_read>
 8002718:	1c43      	adds	r3, r0, #1
 800271a:	d102      	bne.n	8002722 <_read_r+0x1e>
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	b103      	cbz	r3, 8002722 <_read_r+0x1e>
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	bd38      	pop	{r3, r4, r5, pc}
 8002724:	2000025c 	.word	0x2000025c

08002728 <_write_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4604      	mov	r4, r0
 800272c:	4608      	mov	r0, r1
 800272e:	4611      	mov	r1, r2
 8002730:	2200      	movs	r2, #0
 8002732:	4d05      	ldr	r5, [pc, #20]	; (8002748 <_write_r+0x20>)
 8002734:	602a      	str	r2, [r5, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	f7fd ff3d 	bl	80005b6 <_write>
 800273c:	1c43      	adds	r3, r0, #1
 800273e:	d102      	bne.n	8002746 <_write_r+0x1e>
 8002740:	682b      	ldr	r3, [r5, #0]
 8002742:	b103      	cbz	r3, 8002746 <_write_r+0x1e>
 8002744:	6023      	str	r3, [r4, #0]
 8002746:	bd38      	pop	{r3, r4, r5, pc}
 8002748:	2000025c 	.word	0x2000025c

0800274c <__errno>:
 800274c:	4b01      	ldr	r3, [pc, #4]	; (8002754 <__errno+0x8>)
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000064 	.word	0x20000064

08002758 <__libc_init_array>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2600      	movs	r6, #0
 800275c:	4d0c      	ldr	r5, [pc, #48]	; (8002790 <__libc_init_array+0x38>)
 800275e:	4c0d      	ldr	r4, [pc, #52]	; (8002794 <__libc_init_array+0x3c>)
 8002760:	1b64      	subs	r4, r4, r5
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	42a6      	cmp	r6, r4
 8002766:	d109      	bne.n	800277c <__libc_init_array+0x24>
 8002768:	f000 fd34 	bl	80031d4 <_init>
 800276c:	2600      	movs	r6, #0
 800276e:	4d0a      	ldr	r5, [pc, #40]	; (8002798 <__libc_init_array+0x40>)
 8002770:	4c0a      	ldr	r4, [pc, #40]	; (800279c <__libc_init_array+0x44>)
 8002772:	1b64      	subs	r4, r4, r5
 8002774:	10a4      	asrs	r4, r4, #2
 8002776:	42a6      	cmp	r6, r4
 8002778:	d105      	bne.n	8002786 <__libc_init_array+0x2e>
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002780:	4798      	blx	r3
 8002782:	3601      	adds	r6, #1
 8002784:	e7ee      	b.n	8002764 <__libc_init_array+0xc>
 8002786:	f855 3b04 	ldr.w	r3, [r5], #4
 800278a:	4798      	blx	r3
 800278c:	3601      	adds	r6, #1
 800278e:	e7f2      	b.n	8002776 <__libc_init_array+0x1e>
 8002790:	080032c0 	.word	0x080032c0
 8002794:	080032c0 	.word	0x080032c0
 8002798:	080032c0 	.word	0x080032c0
 800279c:	080032c4 	.word	0x080032c4

080027a0 <__retarget_lock_init_recursive>:
 80027a0:	4770      	bx	lr

080027a2 <__retarget_lock_acquire_recursive>:
 80027a2:	4770      	bx	lr

080027a4 <__retarget_lock_release_recursive>:
 80027a4:	4770      	bx	lr
	...

080027a8 <_free_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4605      	mov	r5, r0
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d040      	beq.n	8002832 <_free_r+0x8a>
 80027b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b4:	1f0c      	subs	r4, r1, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bfb8      	it	lt
 80027ba:	18e4      	addlt	r4, r4, r3
 80027bc:	f000 f8dc 	bl	8002978 <__malloc_lock>
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <_free_r+0x8c>)
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	b933      	cbnz	r3, 80027d4 <_free_r+0x2c>
 80027c6:	6063      	str	r3, [r4, #4]
 80027c8:	6014      	str	r4, [r2, #0]
 80027ca:	4628      	mov	r0, r5
 80027cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027d0:	f000 b8d8 	b.w	8002984 <__malloc_unlock>
 80027d4:	42a3      	cmp	r3, r4
 80027d6:	d908      	bls.n	80027ea <_free_r+0x42>
 80027d8:	6820      	ldr	r0, [r4, #0]
 80027da:	1821      	adds	r1, r4, r0
 80027dc:	428b      	cmp	r3, r1
 80027de:	bf01      	itttt	eq
 80027e0:	6819      	ldreq	r1, [r3, #0]
 80027e2:	685b      	ldreq	r3, [r3, #4]
 80027e4:	1809      	addeq	r1, r1, r0
 80027e6:	6021      	streq	r1, [r4, #0]
 80027e8:	e7ed      	b.n	80027c6 <_free_r+0x1e>
 80027ea:	461a      	mov	r2, r3
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	b10b      	cbz	r3, 80027f4 <_free_r+0x4c>
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	d9fa      	bls.n	80027ea <_free_r+0x42>
 80027f4:	6811      	ldr	r1, [r2, #0]
 80027f6:	1850      	adds	r0, r2, r1
 80027f8:	42a0      	cmp	r0, r4
 80027fa:	d10b      	bne.n	8002814 <_free_r+0x6c>
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	4401      	add	r1, r0
 8002800:	1850      	adds	r0, r2, r1
 8002802:	4283      	cmp	r3, r0
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	d1e0      	bne.n	80027ca <_free_r+0x22>
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4408      	add	r0, r1
 800280e:	6010      	str	r0, [r2, #0]
 8002810:	6053      	str	r3, [r2, #4]
 8002812:	e7da      	b.n	80027ca <_free_r+0x22>
 8002814:	d902      	bls.n	800281c <_free_r+0x74>
 8002816:	230c      	movs	r3, #12
 8002818:	602b      	str	r3, [r5, #0]
 800281a:	e7d6      	b.n	80027ca <_free_r+0x22>
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	1821      	adds	r1, r4, r0
 8002820:	428b      	cmp	r3, r1
 8002822:	bf01      	itttt	eq
 8002824:	6819      	ldreq	r1, [r3, #0]
 8002826:	685b      	ldreq	r3, [r3, #4]
 8002828:	1809      	addeq	r1, r1, r0
 800282a:	6021      	streq	r1, [r4, #0]
 800282c:	6063      	str	r3, [r4, #4]
 800282e:	6054      	str	r4, [r2, #4]
 8002830:	e7cb      	b.n	80027ca <_free_r+0x22>
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	20000264 	.word	0x20000264

08002838 <sbrk_aligned>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	4e0e      	ldr	r6, [pc, #56]	; (8002874 <sbrk_aligned+0x3c>)
 800283c:	460c      	mov	r4, r1
 800283e:	6831      	ldr	r1, [r6, #0]
 8002840:	4605      	mov	r5, r0
 8002842:	b911      	cbnz	r1, 800284a <sbrk_aligned+0x12>
 8002844:	f000 fca8 	bl	8003198 <_sbrk_r>
 8002848:	6030      	str	r0, [r6, #0]
 800284a:	4621      	mov	r1, r4
 800284c:	4628      	mov	r0, r5
 800284e:	f000 fca3 	bl	8003198 <_sbrk_r>
 8002852:	1c43      	adds	r3, r0, #1
 8002854:	d00a      	beq.n	800286c <sbrk_aligned+0x34>
 8002856:	1cc4      	adds	r4, r0, #3
 8002858:	f024 0403 	bic.w	r4, r4, #3
 800285c:	42a0      	cmp	r0, r4
 800285e:	d007      	beq.n	8002870 <sbrk_aligned+0x38>
 8002860:	1a21      	subs	r1, r4, r0
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fc98 	bl	8003198 <_sbrk_r>
 8002868:	3001      	adds	r0, #1
 800286a:	d101      	bne.n	8002870 <sbrk_aligned+0x38>
 800286c:	f04f 34ff 	mov.w	r4, #4294967295
 8002870:	4620      	mov	r0, r4
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	20000268 	.word	0x20000268

08002878 <_malloc_r>:
 8002878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800287c:	1ccd      	adds	r5, r1, #3
 800287e:	f025 0503 	bic.w	r5, r5, #3
 8002882:	3508      	adds	r5, #8
 8002884:	2d0c      	cmp	r5, #12
 8002886:	bf38      	it	cc
 8002888:	250c      	movcc	r5, #12
 800288a:	2d00      	cmp	r5, #0
 800288c:	4607      	mov	r7, r0
 800288e:	db01      	blt.n	8002894 <_malloc_r+0x1c>
 8002890:	42a9      	cmp	r1, r5
 8002892:	d905      	bls.n	80028a0 <_malloc_r+0x28>
 8002894:	230c      	movs	r3, #12
 8002896:	2600      	movs	r6, #0
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4630      	mov	r0, r6
 800289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002974 <_malloc_r+0xfc>
 80028a4:	f000 f868 	bl	8002978 <__malloc_lock>
 80028a8:	f8d8 3000 	ldr.w	r3, [r8]
 80028ac:	461c      	mov	r4, r3
 80028ae:	bb5c      	cbnz	r4, 8002908 <_malloc_r+0x90>
 80028b0:	4629      	mov	r1, r5
 80028b2:	4638      	mov	r0, r7
 80028b4:	f7ff ffc0 	bl	8002838 <sbrk_aligned>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	4604      	mov	r4, r0
 80028bc:	d155      	bne.n	800296a <_malloc_r+0xf2>
 80028be:	f8d8 4000 	ldr.w	r4, [r8]
 80028c2:	4626      	mov	r6, r4
 80028c4:	2e00      	cmp	r6, #0
 80028c6:	d145      	bne.n	8002954 <_malloc_r+0xdc>
 80028c8:	2c00      	cmp	r4, #0
 80028ca:	d048      	beq.n	800295e <_malloc_r+0xe6>
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	4631      	mov	r1, r6
 80028d0:	4638      	mov	r0, r7
 80028d2:	eb04 0903 	add.w	r9, r4, r3
 80028d6:	f000 fc5f 	bl	8003198 <_sbrk_r>
 80028da:	4581      	cmp	r9, r0
 80028dc:	d13f      	bne.n	800295e <_malloc_r+0xe6>
 80028de:	6821      	ldr	r1, [r4, #0]
 80028e0:	4638      	mov	r0, r7
 80028e2:	1a6d      	subs	r5, r5, r1
 80028e4:	4629      	mov	r1, r5
 80028e6:	f7ff ffa7 	bl	8002838 <sbrk_aligned>
 80028ea:	3001      	adds	r0, #1
 80028ec:	d037      	beq.n	800295e <_malloc_r+0xe6>
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	442b      	add	r3, r5
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	f8d8 3000 	ldr.w	r3, [r8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d038      	beq.n	800296e <_malloc_r+0xf6>
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	42a2      	cmp	r2, r4
 8002900:	d12b      	bne.n	800295a <_malloc_r+0xe2>
 8002902:	2200      	movs	r2, #0
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e00f      	b.n	8002928 <_malloc_r+0xb0>
 8002908:	6822      	ldr	r2, [r4, #0]
 800290a:	1b52      	subs	r2, r2, r5
 800290c:	d41f      	bmi.n	800294e <_malloc_r+0xd6>
 800290e:	2a0b      	cmp	r2, #11
 8002910:	d917      	bls.n	8002942 <_malloc_r+0xca>
 8002912:	1961      	adds	r1, r4, r5
 8002914:	42a3      	cmp	r3, r4
 8002916:	6025      	str	r5, [r4, #0]
 8002918:	bf18      	it	ne
 800291a:	6059      	strne	r1, [r3, #4]
 800291c:	6863      	ldr	r3, [r4, #4]
 800291e:	bf08      	it	eq
 8002920:	f8c8 1000 	streq.w	r1, [r8]
 8002924:	5162      	str	r2, [r4, r5]
 8002926:	604b      	str	r3, [r1, #4]
 8002928:	4638      	mov	r0, r7
 800292a:	f104 060b 	add.w	r6, r4, #11
 800292e:	f000 f829 	bl	8002984 <__malloc_unlock>
 8002932:	f026 0607 	bic.w	r6, r6, #7
 8002936:	1d23      	adds	r3, r4, #4
 8002938:	1af2      	subs	r2, r6, r3
 800293a:	d0ae      	beq.n	800289a <_malloc_r+0x22>
 800293c:	1b9b      	subs	r3, r3, r6
 800293e:	50a3      	str	r3, [r4, r2]
 8002940:	e7ab      	b.n	800289a <_malloc_r+0x22>
 8002942:	42a3      	cmp	r3, r4
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	d1dd      	bne.n	8002904 <_malloc_r+0x8c>
 8002948:	f8c8 2000 	str.w	r2, [r8]
 800294c:	e7ec      	b.n	8002928 <_malloc_r+0xb0>
 800294e:	4623      	mov	r3, r4
 8002950:	6864      	ldr	r4, [r4, #4]
 8002952:	e7ac      	b.n	80028ae <_malloc_r+0x36>
 8002954:	4634      	mov	r4, r6
 8002956:	6876      	ldr	r6, [r6, #4]
 8002958:	e7b4      	b.n	80028c4 <_malloc_r+0x4c>
 800295a:	4613      	mov	r3, r2
 800295c:	e7cc      	b.n	80028f8 <_malloc_r+0x80>
 800295e:	230c      	movs	r3, #12
 8002960:	4638      	mov	r0, r7
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	f000 f80e 	bl	8002984 <__malloc_unlock>
 8002968:	e797      	b.n	800289a <_malloc_r+0x22>
 800296a:	6025      	str	r5, [r4, #0]
 800296c:	e7dc      	b.n	8002928 <_malloc_r+0xb0>
 800296e:	605b      	str	r3, [r3, #4]
 8002970:	deff      	udf	#255	; 0xff
 8002972:	bf00      	nop
 8002974:	20000264 	.word	0x20000264

08002978 <__malloc_lock>:
 8002978:	4801      	ldr	r0, [pc, #4]	; (8002980 <__malloc_lock+0x8>)
 800297a:	f7ff bf12 	b.w	80027a2 <__retarget_lock_acquire_recursive>
 800297e:	bf00      	nop
 8002980:	20000260 	.word	0x20000260

08002984 <__malloc_unlock>:
 8002984:	4801      	ldr	r0, [pc, #4]	; (800298c <__malloc_unlock+0x8>)
 8002986:	f7ff bf0d 	b.w	80027a4 <__retarget_lock_release_recursive>
 800298a:	bf00      	nop
 800298c:	20000260 	.word	0x20000260

08002990 <__sfputc_r>:
 8002990:	6893      	ldr	r3, [r2, #8]
 8002992:	b410      	push	{r4}
 8002994:	3b01      	subs	r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	6093      	str	r3, [r2, #8]
 800299a:	da07      	bge.n	80029ac <__sfputc_r+0x1c>
 800299c:	6994      	ldr	r4, [r2, #24]
 800299e:	42a3      	cmp	r3, r4
 80029a0:	db01      	blt.n	80029a6 <__sfputc_r+0x16>
 80029a2:	290a      	cmp	r1, #10
 80029a4:	d102      	bne.n	80029ac <__sfputc_r+0x1c>
 80029a6:	bc10      	pop	{r4}
 80029a8:	f7ff bded 	b.w	8002586 <__swbuf_r>
 80029ac:	6813      	ldr	r3, [r2, #0]
 80029ae:	1c58      	adds	r0, r3, #1
 80029b0:	6010      	str	r0, [r2, #0]
 80029b2:	7019      	strb	r1, [r3, #0]
 80029b4:	4608      	mov	r0, r1
 80029b6:	bc10      	pop	{r4}
 80029b8:	4770      	bx	lr

080029ba <__sfputs_r>:
 80029ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029bc:	4606      	mov	r6, r0
 80029be:	460f      	mov	r7, r1
 80029c0:	4614      	mov	r4, r2
 80029c2:	18d5      	adds	r5, r2, r3
 80029c4:	42ac      	cmp	r4, r5
 80029c6:	d101      	bne.n	80029cc <__sfputs_r+0x12>
 80029c8:	2000      	movs	r0, #0
 80029ca:	e007      	b.n	80029dc <__sfputs_r+0x22>
 80029cc:	463a      	mov	r2, r7
 80029ce:	4630      	mov	r0, r6
 80029d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029d4:	f7ff ffdc 	bl	8002990 <__sfputc_r>
 80029d8:	1c43      	adds	r3, r0, #1
 80029da:	d1f3      	bne.n	80029c4 <__sfputs_r+0xa>
 80029dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029e0 <_vfiprintf_r>:
 80029e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e4:	460d      	mov	r5, r1
 80029e6:	4614      	mov	r4, r2
 80029e8:	4698      	mov	r8, r3
 80029ea:	4606      	mov	r6, r0
 80029ec:	b09d      	sub	sp, #116	; 0x74
 80029ee:	b118      	cbz	r0, 80029f8 <_vfiprintf_r+0x18>
 80029f0:	6a03      	ldr	r3, [r0, #32]
 80029f2:	b90b      	cbnz	r3, 80029f8 <_vfiprintf_r+0x18>
 80029f4:	f7ff fce0 	bl	80023b8 <__sinit>
 80029f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029fa:	07d9      	lsls	r1, r3, #31
 80029fc:	d405      	bmi.n	8002a0a <_vfiprintf_r+0x2a>
 80029fe:	89ab      	ldrh	r3, [r5, #12]
 8002a00:	059a      	lsls	r2, r3, #22
 8002a02:	d402      	bmi.n	8002a0a <_vfiprintf_r+0x2a>
 8002a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a06:	f7ff fecc 	bl	80027a2 <__retarget_lock_acquire_recursive>
 8002a0a:	89ab      	ldrh	r3, [r5, #12]
 8002a0c:	071b      	lsls	r3, r3, #28
 8002a0e:	d501      	bpl.n	8002a14 <_vfiprintf_r+0x34>
 8002a10:	692b      	ldr	r3, [r5, #16]
 8002a12:	b99b      	cbnz	r3, 8002a3c <_vfiprintf_r+0x5c>
 8002a14:	4629      	mov	r1, r5
 8002a16:	4630      	mov	r0, r6
 8002a18:	f7ff fdf2 	bl	8002600 <__swsetup_r>
 8002a1c:	b170      	cbz	r0, 8002a3c <_vfiprintf_r+0x5c>
 8002a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a20:	07dc      	lsls	r4, r3, #31
 8002a22:	d504      	bpl.n	8002a2e <_vfiprintf_r+0x4e>
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	b01d      	add	sp, #116	; 0x74
 8002a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2e:	89ab      	ldrh	r3, [r5, #12]
 8002a30:	0598      	lsls	r0, r3, #22
 8002a32:	d4f7      	bmi.n	8002a24 <_vfiprintf_r+0x44>
 8002a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a36:	f7ff feb5 	bl	80027a4 <__retarget_lock_release_recursive>
 8002a3a:	e7f3      	b.n	8002a24 <_vfiprintf_r+0x44>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a40:	2320      	movs	r3, #32
 8002a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a46:	2330      	movs	r3, #48	; 0x30
 8002a48:	f04f 0901 	mov.w	r9, #1
 8002a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a50:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002c00 <_vfiprintf_r+0x220>
 8002a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a58:	4623      	mov	r3, r4
 8002a5a:	469a      	mov	sl, r3
 8002a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a60:	b10a      	cbz	r2, 8002a66 <_vfiprintf_r+0x86>
 8002a62:	2a25      	cmp	r2, #37	; 0x25
 8002a64:	d1f9      	bne.n	8002a5a <_vfiprintf_r+0x7a>
 8002a66:	ebba 0b04 	subs.w	fp, sl, r4
 8002a6a:	d00b      	beq.n	8002a84 <_vfiprintf_r+0xa4>
 8002a6c:	465b      	mov	r3, fp
 8002a6e:	4622      	mov	r2, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	4630      	mov	r0, r6
 8002a74:	f7ff ffa1 	bl	80029ba <__sfputs_r>
 8002a78:	3001      	adds	r0, #1
 8002a7a:	f000 80a9 	beq.w	8002bd0 <_vfiprintf_r+0x1f0>
 8002a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a80:	445a      	add	r2, fp
 8002a82:	9209      	str	r2, [sp, #36]	; 0x24
 8002a84:	f89a 3000 	ldrb.w	r3, [sl]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a1 	beq.w	8002bd0 <_vfiprintf_r+0x1f0>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a98:	f10a 0a01 	add.w	sl, sl, #1
 8002a9c:	9304      	str	r3, [sp, #16]
 8002a9e:	9307      	str	r3, [sp, #28]
 8002aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8002aa6:	4654      	mov	r4, sl
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aae:	4854      	ldr	r0, [pc, #336]	; (8002c00 <_vfiprintf_r+0x220>)
 8002ab0:	f000 fb82 	bl	80031b8 <memchr>
 8002ab4:	9a04      	ldr	r2, [sp, #16]
 8002ab6:	b9d8      	cbnz	r0, 8002af0 <_vfiprintf_r+0x110>
 8002ab8:	06d1      	lsls	r1, r2, #27
 8002aba:	bf44      	itt	mi
 8002abc:	2320      	movmi	r3, #32
 8002abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ac2:	0713      	lsls	r3, r2, #28
 8002ac4:	bf44      	itt	mi
 8002ac6:	232b      	movmi	r3, #43	; 0x2b
 8002ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002acc:	f89a 3000 	ldrb.w	r3, [sl]
 8002ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad2:	d015      	beq.n	8002b00 <_vfiprintf_r+0x120>
 8002ad4:	4654      	mov	r4, sl
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f04f 0c0a 	mov.w	ip, #10
 8002adc:	9a07      	ldr	r2, [sp, #28]
 8002ade:	4621      	mov	r1, r4
 8002ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ae4:	3b30      	subs	r3, #48	; 0x30
 8002ae6:	2b09      	cmp	r3, #9
 8002ae8:	d94d      	bls.n	8002b86 <_vfiprintf_r+0x1a6>
 8002aea:	b1b0      	cbz	r0, 8002b1a <_vfiprintf_r+0x13a>
 8002aec:	9207      	str	r2, [sp, #28]
 8002aee:	e014      	b.n	8002b1a <_vfiprintf_r+0x13a>
 8002af0:	eba0 0308 	sub.w	r3, r0, r8
 8002af4:	fa09 f303 	lsl.w	r3, r9, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	46a2      	mov	sl, r4
 8002afc:	9304      	str	r3, [sp, #16]
 8002afe:	e7d2      	b.n	8002aa6 <_vfiprintf_r+0xc6>
 8002b00:	9b03      	ldr	r3, [sp, #12]
 8002b02:	1d19      	adds	r1, r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	9103      	str	r1, [sp, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bfbb      	ittet	lt
 8002b0c:	425b      	neglt	r3, r3
 8002b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8002b12:	9307      	strge	r3, [sp, #28]
 8002b14:	9307      	strlt	r3, [sp, #28]
 8002b16:	bfb8      	it	lt
 8002b18:	9204      	strlt	r2, [sp, #16]
 8002b1a:	7823      	ldrb	r3, [r4, #0]
 8002b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b1e:	d10c      	bne.n	8002b3a <_vfiprintf_r+0x15a>
 8002b20:	7863      	ldrb	r3, [r4, #1]
 8002b22:	2b2a      	cmp	r3, #42	; 0x2a
 8002b24:	d134      	bne.n	8002b90 <_vfiprintf_r+0x1b0>
 8002b26:	9b03      	ldr	r3, [sp, #12]
 8002b28:	3402      	adds	r4, #2
 8002b2a:	1d1a      	adds	r2, r3, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	9203      	str	r2, [sp, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bfb8      	it	lt
 8002b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b38:	9305      	str	r3, [sp, #20]
 8002b3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c04 <_vfiprintf_r+0x224>
 8002b3e:	2203      	movs	r2, #3
 8002b40:	4650      	mov	r0, sl
 8002b42:	7821      	ldrb	r1, [r4, #0]
 8002b44:	f000 fb38 	bl	80031b8 <memchr>
 8002b48:	b138      	cbz	r0, 8002b5a <_vfiprintf_r+0x17a>
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	9b04      	ldr	r3, [sp, #16]
 8002b4e:	eba0 000a 	sub.w	r0, r0, sl
 8002b52:	4082      	lsls	r2, r0
 8002b54:	4313      	orrs	r3, r2
 8002b56:	3401      	adds	r4, #1
 8002b58:	9304      	str	r3, [sp, #16]
 8002b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b5e:	2206      	movs	r2, #6
 8002b60:	4829      	ldr	r0, [pc, #164]	; (8002c08 <_vfiprintf_r+0x228>)
 8002b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b66:	f000 fb27 	bl	80031b8 <memchr>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d03f      	beq.n	8002bee <_vfiprintf_r+0x20e>
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <_vfiprintf_r+0x22c>)
 8002b70:	bb1b      	cbnz	r3, 8002bba <_vfiprintf_r+0x1da>
 8002b72:	9b03      	ldr	r3, [sp, #12]
 8002b74:	3307      	adds	r3, #7
 8002b76:	f023 0307 	bic.w	r3, r3, #7
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	9303      	str	r3, [sp, #12]
 8002b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b80:	443b      	add	r3, r7
 8002b82:	9309      	str	r3, [sp, #36]	; 0x24
 8002b84:	e768      	b.n	8002a58 <_vfiprintf_r+0x78>
 8002b86:	460c      	mov	r4, r1
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b8e:	e7a6      	b.n	8002ade <_vfiprintf_r+0xfe>
 8002b90:	2300      	movs	r3, #0
 8002b92:	f04f 0c0a 	mov.w	ip, #10
 8002b96:	4619      	mov	r1, r3
 8002b98:	3401      	adds	r4, #1
 8002b9a:	9305      	str	r3, [sp, #20]
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ba2:	3a30      	subs	r2, #48	; 0x30
 8002ba4:	2a09      	cmp	r2, #9
 8002ba6:	d903      	bls.n	8002bb0 <_vfiprintf_r+0x1d0>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0c6      	beq.n	8002b3a <_vfiprintf_r+0x15a>
 8002bac:	9105      	str	r1, [sp, #20]
 8002bae:	e7c4      	b.n	8002b3a <_vfiprintf_r+0x15a>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bb8:	e7f0      	b.n	8002b9c <_vfiprintf_r+0x1bc>
 8002bba:	ab03      	add	r3, sp, #12
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	462a      	mov	r2, r5
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <_vfiprintf_r+0x230>)
 8002bc4:	a904      	add	r1, sp, #16
 8002bc6:	f3af 8000 	nop.w
 8002bca:	4607      	mov	r7, r0
 8002bcc:	1c78      	adds	r0, r7, #1
 8002bce:	d1d6      	bne.n	8002b7e <_vfiprintf_r+0x19e>
 8002bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bd2:	07d9      	lsls	r1, r3, #31
 8002bd4:	d405      	bmi.n	8002be2 <_vfiprintf_r+0x202>
 8002bd6:	89ab      	ldrh	r3, [r5, #12]
 8002bd8:	059a      	lsls	r2, r3, #22
 8002bda:	d402      	bmi.n	8002be2 <_vfiprintf_r+0x202>
 8002bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bde:	f7ff fde1 	bl	80027a4 <__retarget_lock_release_recursive>
 8002be2:	89ab      	ldrh	r3, [r5, #12]
 8002be4:	065b      	lsls	r3, r3, #25
 8002be6:	f53f af1d 	bmi.w	8002a24 <_vfiprintf_r+0x44>
 8002bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bec:	e71c      	b.n	8002a28 <_vfiprintf_r+0x48>
 8002bee:	ab03      	add	r3, sp, #12
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	462a      	mov	r2, r5
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <_vfiprintf_r+0x230>)
 8002bf8:	a904      	add	r1, sp, #16
 8002bfa:	f000 f87d 	bl	8002cf8 <_printf_i>
 8002bfe:	e7e4      	b.n	8002bca <_vfiprintf_r+0x1ea>
 8002c00:	0800328a 	.word	0x0800328a
 8002c04:	08003290 	.word	0x08003290
 8002c08:	08003294 	.word	0x08003294
 8002c0c:	00000000 	.word	0x00000000
 8002c10:	080029bb 	.word	0x080029bb

08002c14 <_printf_common>:
 8002c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c18:	4616      	mov	r6, r2
 8002c1a:	4699      	mov	r9, r3
 8002c1c:	688a      	ldr	r2, [r1, #8]
 8002c1e:	690b      	ldr	r3, [r1, #16]
 8002c20:	4607      	mov	r7, r0
 8002c22:	4293      	cmp	r3, r2
 8002c24:	bfb8      	it	lt
 8002c26:	4613      	movlt	r3, r2
 8002c28:	6033      	str	r3, [r6, #0]
 8002c2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c2e:	460c      	mov	r4, r1
 8002c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c34:	b10a      	cbz	r2, 8002c3a <_printf_common+0x26>
 8002c36:	3301      	adds	r3, #1
 8002c38:	6033      	str	r3, [r6, #0]
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	0699      	lsls	r1, r3, #26
 8002c3e:	bf42      	ittt	mi
 8002c40:	6833      	ldrmi	r3, [r6, #0]
 8002c42:	3302      	addmi	r3, #2
 8002c44:	6033      	strmi	r3, [r6, #0]
 8002c46:	6825      	ldr	r5, [r4, #0]
 8002c48:	f015 0506 	ands.w	r5, r5, #6
 8002c4c:	d106      	bne.n	8002c5c <_printf_common+0x48>
 8002c4e:	f104 0a19 	add.w	sl, r4, #25
 8002c52:	68e3      	ldr	r3, [r4, #12]
 8002c54:	6832      	ldr	r2, [r6, #0]
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	42ab      	cmp	r3, r5
 8002c5a:	dc2b      	bgt.n	8002cb4 <_printf_common+0xa0>
 8002c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c60:	1e13      	subs	r3, r2, #0
 8002c62:	6822      	ldr	r2, [r4, #0]
 8002c64:	bf18      	it	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	0692      	lsls	r2, r2, #26
 8002c6a:	d430      	bmi.n	8002cce <_printf_common+0xba>
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	4638      	mov	r0, r7
 8002c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c74:	47c0      	blx	r8
 8002c76:	3001      	adds	r0, #1
 8002c78:	d023      	beq.n	8002cc2 <_printf_common+0xae>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	6922      	ldr	r2, [r4, #16]
 8002c7e:	f003 0306 	and.w	r3, r3, #6
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf14      	ite	ne
 8002c86:	2500      	movne	r5, #0
 8002c88:	6833      	ldreq	r3, [r6, #0]
 8002c8a:	f04f 0600 	mov.w	r6, #0
 8002c8e:	bf08      	it	eq
 8002c90:	68e5      	ldreq	r5, [r4, #12]
 8002c92:	f104 041a 	add.w	r4, r4, #26
 8002c96:	bf08      	it	eq
 8002c98:	1aed      	subeq	r5, r5, r3
 8002c9a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c9e:	bf08      	it	eq
 8002ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	bfc4      	itt	gt
 8002ca8:	1a9b      	subgt	r3, r3, r2
 8002caa:	18ed      	addgt	r5, r5, r3
 8002cac:	42b5      	cmp	r5, r6
 8002cae:	d11a      	bne.n	8002ce6 <_printf_common+0xd2>
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	e008      	b.n	8002cc6 <_printf_common+0xb2>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	4652      	mov	r2, sl
 8002cb8:	4649      	mov	r1, r9
 8002cba:	4638      	mov	r0, r7
 8002cbc:	47c0      	blx	r8
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	d103      	bne.n	8002cca <_printf_common+0xb6>
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cca:	3501      	adds	r5, #1
 8002ccc:	e7c1      	b.n	8002c52 <_printf_common+0x3e>
 8002cce:	2030      	movs	r0, #48	; 0x30
 8002cd0:	18e1      	adds	r1, r4, r3
 8002cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cdc:	4422      	add	r2, r4
 8002cde:	3302      	adds	r3, #2
 8002ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ce4:	e7c2      	b.n	8002c6c <_printf_common+0x58>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4622      	mov	r2, r4
 8002cea:	4649      	mov	r1, r9
 8002cec:	4638      	mov	r0, r7
 8002cee:	47c0      	blx	r8
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d0e6      	beq.n	8002cc2 <_printf_common+0xae>
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e7d9      	b.n	8002cac <_printf_common+0x98>

08002cf8 <_printf_i>:
 8002cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	7e0f      	ldrb	r7, [r1, #24]
 8002cfe:	4691      	mov	r9, r2
 8002d00:	2f78      	cmp	r7, #120	; 0x78
 8002d02:	4680      	mov	r8, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	469a      	mov	sl, r3
 8002d08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d0e:	d807      	bhi.n	8002d20 <_printf_i+0x28>
 8002d10:	2f62      	cmp	r7, #98	; 0x62
 8002d12:	d80a      	bhi.n	8002d2a <_printf_i+0x32>
 8002d14:	2f00      	cmp	r7, #0
 8002d16:	f000 80d5 	beq.w	8002ec4 <_printf_i+0x1cc>
 8002d1a:	2f58      	cmp	r7, #88	; 0x58
 8002d1c:	f000 80c1 	beq.w	8002ea2 <_printf_i+0x1aa>
 8002d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d28:	e03a      	b.n	8002da0 <_printf_i+0xa8>
 8002d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d2e:	2b15      	cmp	r3, #21
 8002d30:	d8f6      	bhi.n	8002d20 <_printf_i+0x28>
 8002d32:	a101      	add	r1, pc, #4	; (adr r1, 8002d38 <_printf_i+0x40>)
 8002d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d38:	08002d91 	.word	0x08002d91
 8002d3c:	08002da5 	.word	0x08002da5
 8002d40:	08002d21 	.word	0x08002d21
 8002d44:	08002d21 	.word	0x08002d21
 8002d48:	08002d21 	.word	0x08002d21
 8002d4c:	08002d21 	.word	0x08002d21
 8002d50:	08002da5 	.word	0x08002da5
 8002d54:	08002d21 	.word	0x08002d21
 8002d58:	08002d21 	.word	0x08002d21
 8002d5c:	08002d21 	.word	0x08002d21
 8002d60:	08002d21 	.word	0x08002d21
 8002d64:	08002eab 	.word	0x08002eab
 8002d68:	08002dd1 	.word	0x08002dd1
 8002d6c:	08002e65 	.word	0x08002e65
 8002d70:	08002d21 	.word	0x08002d21
 8002d74:	08002d21 	.word	0x08002d21
 8002d78:	08002ecd 	.word	0x08002ecd
 8002d7c:	08002d21 	.word	0x08002d21
 8002d80:	08002dd1 	.word	0x08002dd1
 8002d84:	08002d21 	.word	0x08002d21
 8002d88:	08002d21 	.word	0x08002d21
 8002d8c:	08002e6d 	.word	0x08002e6d
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	1d1a      	adds	r2, r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	602a      	str	r2, [r5, #0]
 8002d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0a0      	b.n	8002ee6 <_printf_i+0x1ee>
 8002da4:	6820      	ldr	r0, [r4, #0]
 8002da6:	682b      	ldr	r3, [r5, #0]
 8002da8:	0607      	lsls	r7, r0, #24
 8002daa:	f103 0104 	add.w	r1, r3, #4
 8002dae:	6029      	str	r1, [r5, #0]
 8002db0:	d501      	bpl.n	8002db6 <_printf_i+0xbe>
 8002db2:	681e      	ldr	r6, [r3, #0]
 8002db4:	e003      	b.n	8002dbe <_printf_i+0xc6>
 8002db6:	0646      	lsls	r6, r0, #25
 8002db8:	d5fb      	bpl.n	8002db2 <_printf_i+0xba>
 8002dba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002dbe:	2e00      	cmp	r6, #0
 8002dc0:	da03      	bge.n	8002dca <_printf_i+0xd2>
 8002dc2:	232d      	movs	r3, #45	; 0x2d
 8002dc4:	4276      	negs	r6, r6
 8002dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dca:	230a      	movs	r3, #10
 8002dcc:	4859      	ldr	r0, [pc, #356]	; (8002f34 <_printf_i+0x23c>)
 8002dce:	e012      	b.n	8002df6 <_printf_i+0xfe>
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	6820      	ldr	r0, [r4, #0]
 8002dd4:	1d19      	adds	r1, r3, #4
 8002dd6:	6029      	str	r1, [r5, #0]
 8002dd8:	0605      	lsls	r5, r0, #24
 8002dda:	d501      	bpl.n	8002de0 <_printf_i+0xe8>
 8002ddc:	681e      	ldr	r6, [r3, #0]
 8002dde:	e002      	b.n	8002de6 <_printf_i+0xee>
 8002de0:	0641      	lsls	r1, r0, #25
 8002de2:	d5fb      	bpl.n	8002ddc <_printf_i+0xe4>
 8002de4:	881e      	ldrh	r6, [r3, #0]
 8002de6:	2f6f      	cmp	r7, #111	; 0x6f
 8002de8:	bf0c      	ite	eq
 8002dea:	2308      	moveq	r3, #8
 8002dec:	230a      	movne	r3, #10
 8002dee:	4851      	ldr	r0, [pc, #324]	; (8002f34 <_printf_i+0x23c>)
 8002df0:	2100      	movs	r1, #0
 8002df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002df6:	6865      	ldr	r5, [r4, #4]
 8002df8:	2d00      	cmp	r5, #0
 8002dfa:	bfa8      	it	ge
 8002dfc:	6821      	ldrge	r1, [r4, #0]
 8002dfe:	60a5      	str	r5, [r4, #8]
 8002e00:	bfa4      	itt	ge
 8002e02:	f021 0104 	bicge.w	r1, r1, #4
 8002e06:	6021      	strge	r1, [r4, #0]
 8002e08:	b90e      	cbnz	r6, 8002e0e <_printf_i+0x116>
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	d04b      	beq.n	8002ea6 <_printf_i+0x1ae>
 8002e0e:	4615      	mov	r5, r2
 8002e10:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e14:	fb03 6711 	mls	r7, r3, r1, r6
 8002e18:	5dc7      	ldrb	r7, [r0, r7]
 8002e1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e1e:	4637      	mov	r7, r6
 8002e20:	42bb      	cmp	r3, r7
 8002e22:	460e      	mov	r6, r1
 8002e24:	d9f4      	bls.n	8002e10 <_printf_i+0x118>
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d10b      	bne.n	8002e42 <_printf_i+0x14a>
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	07de      	lsls	r6, r3, #31
 8002e2e:	d508      	bpl.n	8002e42 <_printf_i+0x14a>
 8002e30:	6923      	ldr	r3, [r4, #16]
 8002e32:	6861      	ldr	r1, [r4, #4]
 8002e34:	4299      	cmp	r1, r3
 8002e36:	bfde      	ittt	le
 8002e38:	2330      	movle	r3, #48	; 0x30
 8002e3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e42:	1b52      	subs	r2, r2, r5
 8002e44:	6122      	str	r2, [r4, #16]
 8002e46:	464b      	mov	r3, r9
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	f8cd a000 	str.w	sl, [sp]
 8002e50:	aa03      	add	r2, sp, #12
 8002e52:	f7ff fedf 	bl	8002c14 <_printf_common>
 8002e56:	3001      	adds	r0, #1
 8002e58:	d14a      	bne.n	8002ef0 <_printf_i+0x1f8>
 8002e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5e:	b004      	add	sp, #16
 8002e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	f043 0320 	orr.w	r3, r3, #32
 8002e6a:	6023      	str	r3, [r4, #0]
 8002e6c:	2778      	movs	r7, #120	; 0x78
 8002e6e:	4832      	ldr	r0, [pc, #200]	; (8002f38 <_printf_i+0x240>)
 8002e70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	6829      	ldr	r1, [r5, #0]
 8002e78:	061f      	lsls	r7, r3, #24
 8002e7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e7e:	d402      	bmi.n	8002e86 <_printf_i+0x18e>
 8002e80:	065f      	lsls	r7, r3, #25
 8002e82:	bf48      	it	mi
 8002e84:	b2b6      	uxthmi	r6, r6
 8002e86:	07df      	lsls	r7, r3, #31
 8002e88:	bf48      	it	mi
 8002e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8002e8e:	6029      	str	r1, [r5, #0]
 8002e90:	bf48      	it	mi
 8002e92:	6023      	strmi	r3, [r4, #0]
 8002e94:	b91e      	cbnz	r6, 8002e9e <_printf_i+0x1a6>
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	f023 0320 	bic.w	r3, r3, #32
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	2310      	movs	r3, #16
 8002ea0:	e7a6      	b.n	8002df0 <_printf_i+0xf8>
 8002ea2:	4824      	ldr	r0, [pc, #144]	; (8002f34 <_printf_i+0x23c>)
 8002ea4:	e7e4      	b.n	8002e70 <_printf_i+0x178>
 8002ea6:	4615      	mov	r5, r2
 8002ea8:	e7bd      	b.n	8002e26 <_printf_i+0x12e>
 8002eaa:	682b      	ldr	r3, [r5, #0]
 8002eac:	6826      	ldr	r6, [r4, #0]
 8002eae:	1d18      	adds	r0, r3, #4
 8002eb0:	6961      	ldr	r1, [r4, #20]
 8002eb2:	6028      	str	r0, [r5, #0]
 8002eb4:	0635      	lsls	r5, r6, #24
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	d501      	bpl.n	8002ebe <_printf_i+0x1c6>
 8002eba:	6019      	str	r1, [r3, #0]
 8002ebc:	e002      	b.n	8002ec4 <_printf_i+0x1cc>
 8002ebe:	0670      	lsls	r0, r6, #25
 8002ec0:	d5fb      	bpl.n	8002eba <_printf_i+0x1c2>
 8002ec2:	8019      	strh	r1, [r3, #0]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4615      	mov	r5, r2
 8002ec8:	6123      	str	r3, [r4, #16]
 8002eca:	e7bc      	b.n	8002e46 <_printf_i+0x14e>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	1d1a      	adds	r2, r3, #4
 8002ed2:	602a      	str	r2, [r5, #0]
 8002ed4:	681d      	ldr	r5, [r3, #0]
 8002ed6:	6862      	ldr	r2, [r4, #4]
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 f96d 	bl	80031b8 <memchr>
 8002ede:	b108      	cbz	r0, 8002ee4 <_printf_i+0x1ec>
 8002ee0:	1b40      	subs	r0, r0, r5
 8002ee2:	6060      	str	r0, [r4, #4]
 8002ee4:	6863      	ldr	r3, [r4, #4]
 8002ee6:	6123      	str	r3, [r4, #16]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eee:	e7aa      	b.n	8002e46 <_printf_i+0x14e>
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	47d0      	blx	sl
 8002efa:	3001      	adds	r0, #1
 8002efc:	d0ad      	beq.n	8002e5a <_printf_i+0x162>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	079b      	lsls	r3, r3, #30
 8002f02:	d413      	bmi.n	8002f2c <_printf_i+0x234>
 8002f04:	68e0      	ldr	r0, [r4, #12]
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	4298      	cmp	r0, r3
 8002f0a:	bfb8      	it	lt
 8002f0c:	4618      	movlt	r0, r3
 8002f0e:	e7a6      	b.n	8002e5e <_printf_i+0x166>
 8002f10:	2301      	movs	r3, #1
 8002f12:	4632      	mov	r2, r6
 8002f14:	4649      	mov	r1, r9
 8002f16:	4640      	mov	r0, r8
 8002f18:	47d0      	blx	sl
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d09d      	beq.n	8002e5a <_printf_i+0x162>
 8002f1e:	3501      	adds	r5, #1
 8002f20:	68e3      	ldr	r3, [r4, #12]
 8002f22:	9903      	ldr	r1, [sp, #12]
 8002f24:	1a5b      	subs	r3, r3, r1
 8002f26:	42ab      	cmp	r3, r5
 8002f28:	dcf2      	bgt.n	8002f10 <_printf_i+0x218>
 8002f2a:	e7eb      	b.n	8002f04 <_printf_i+0x20c>
 8002f2c:	2500      	movs	r5, #0
 8002f2e:	f104 0619 	add.w	r6, r4, #25
 8002f32:	e7f5      	b.n	8002f20 <_printf_i+0x228>
 8002f34:	0800329b 	.word	0x0800329b
 8002f38:	080032ac 	.word	0x080032ac

08002f3c <__sflush_r>:
 8002f3c:	898a      	ldrh	r2, [r1, #12]
 8002f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f40:	4605      	mov	r5, r0
 8002f42:	0710      	lsls	r0, r2, #28
 8002f44:	460c      	mov	r4, r1
 8002f46:	d457      	bmi.n	8002ff8 <__sflush_r+0xbc>
 8002f48:	684b      	ldr	r3, [r1, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	dc04      	bgt.n	8002f58 <__sflush_r+0x1c>
 8002f4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dc01      	bgt.n	8002f58 <__sflush_r+0x1c>
 8002f54:	2000      	movs	r0, #0
 8002f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f5a:	2e00      	cmp	r6, #0
 8002f5c:	d0fa      	beq.n	8002f54 <__sflush_r+0x18>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f64:	682f      	ldr	r7, [r5, #0]
 8002f66:	6a21      	ldr	r1, [r4, #32]
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	d032      	beq.n	8002fd2 <__sflush_r+0x96>
 8002f6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f6e:	89a3      	ldrh	r3, [r4, #12]
 8002f70:	075a      	lsls	r2, r3, #29
 8002f72:	d505      	bpl.n	8002f80 <__sflush_r+0x44>
 8002f74:	6863      	ldr	r3, [r4, #4]
 8002f76:	1ac0      	subs	r0, r0, r3
 8002f78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f7a:	b10b      	cbz	r3, 8002f80 <__sflush_r+0x44>
 8002f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f7e:	1ac0      	subs	r0, r0, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	4602      	mov	r2, r0
 8002f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f86:	4628      	mov	r0, r5
 8002f88:	6a21      	ldr	r1, [r4, #32]
 8002f8a:	47b0      	blx	r6
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	89a3      	ldrh	r3, [r4, #12]
 8002f90:	d106      	bne.n	8002fa0 <__sflush_r+0x64>
 8002f92:	6829      	ldr	r1, [r5, #0]
 8002f94:	291d      	cmp	r1, #29
 8002f96:	d82b      	bhi.n	8002ff0 <__sflush_r+0xb4>
 8002f98:	4a28      	ldr	r2, [pc, #160]	; (800303c <__sflush_r+0x100>)
 8002f9a:	410a      	asrs	r2, r1
 8002f9c:	07d6      	lsls	r6, r2, #31
 8002f9e:	d427      	bmi.n	8002ff0 <__sflush_r+0xb4>
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	6062      	str	r2, [r4, #4]
 8002fa4:	6922      	ldr	r2, [r4, #16]
 8002fa6:	04d9      	lsls	r1, r3, #19
 8002fa8:	6022      	str	r2, [r4, #0]
 8002faa:	d504      	bpl.n	8002fb6 <__sflush_r+0x7a>
 8002fac:	1c42      	adds	r2, r0, #1
 8002fae:	d101      	bne.n	8002fb4 <__sflush_r+0x78>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	b903      	cbnz	r3, 8002fb6 <__sflush_r+0x7a>
 8002fb4:	6560      	str	r0, [r4, #84]	; 0x54
 8002fb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fb8:	602f      	str	r7, [r5, #0]
 8002fba:	2900      	cmp	r1, #0
 8002fbc:	d0ca      	beq.n	8002f54 <__sflush_r+0x18>
 8002fbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fc2:	4299      	cmp	r1, r3
 8002fc4:	d002      	beq.n	8002fcc <__sflush_r+0x90>
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f7ff fbee 	bl	80027a8 <_free_r>
 8002fcc:	2000      	movs	r0, #0
 8002fce:	6360      	str	r0, [r4, #52]	; 0x34
 8002fd0:	e7c1      	b.n	8002f56 <__sflush_r+0x1a>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b0      	blx	r6
 8002fd8:	1c41      	adds	r1, r0, #1
 8002fda:	d1c8      	bne.n	8002f6e <__sflush_r+0x32>
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0c5      	beq.n	8002f6e <__sflush_r+0x32>
 8002fe2:	2b1d      	cmp	r3, #29
 8002fe4:	d001      	beq.n	8002fea <__sflush_r+0xae>
 8002fe6:	2b16      	cmp	r3, #22
 8002fe8:	d101      	bne.n	8002fee <__sflush_r+0xb2>
 8002fea:	602f      	str	r7, [r5, #0]
 8002fec:	e7b2      	b.n	8002f54 <__sflush_r+0x18>
 8002fee:	89a3      	ldrh	r3, [r4, #12]
 8002ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	e7ae      	b.n	8002f56 <__sflush_r+0x1a>
 8002ff8:	690f      	ldr	r7, [r1, #16]
 8002ffa:	2f00      	cmp	r7, #0
 8002ffc:	d0aa      	beq.n	8002f54 <__sflush_r+0x18>
 8002ffe:	0793      	lsls	r3, r2, #30
 8003000:	bf18      	it	ne
 8003002:	2300      	movne	r3, #0
 8003004:	680e      	ldr	r6, [r1, #0]
 8003006:	bf08      	it	eq
 8003008:	694b      	ldreq	r3, [r1, #20]
 800300a:	1bf6      	subs	r6, r6, r7
 800300c:	600f      	str	r7, [r1, #0]
 800300e:	608b      	str	r3, [r1, #8]
 8003010:	2e00      	cmp	r6, #0
 8003012:	dd9f      	ble.n	8002f54 <__sflush_r+0x18>
 8003014:	4633      	mov	r3, r6
 8003016:	463a      	mov	r2, r7
 8003018:	4628      	mov	r0, r5
 800301a:	6a21      	ldr	r1, [r4, #32]
 800301c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003020:	47e0      	blx	ip
 8003022:	2800      	cmp	r0, #0
 8003024:	dc06      	bgt.n	8003034 <__sflush_r+0xf8>
 8003026:	89a3      	ldrh	r3, [r4, #12]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	e790      	b.n	8002f56 <__sflush_r+0x1a>
 8003034:	4407      	add	r7, r0
 8003036:	1a36      	subs	r6, r6, r0
 8003038:	e7ea      	b.n	8003010 <__sflush_r+0xd4>
 800303a:	bf00      	nop
 800303c:	dfbffffe 	.word	0xdfbffffe

08003040 <_fflush_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	690b      	ldr	r3, [r1, #16]
 8003044:	4605      	mov	r5, r0
 8003046:	460c      	mov	r4, r1
 8003048:	b913      	cbnz	r3, 8003050 <_fflush_r+0x10>
 800304a:	2500      	movs	r5, #0
 800304c:	4628      	mov	r0, r5
 800304e:	bd38      	pop	{r3, r4, r5, pc}
 8003050:	b118      	cbz	r0, 800305a <_fflush_r+0x1a>
 8003052:	6a03      	ldr	r3, [r0, #32]
 8003054:	b90b      	cbnz	r3, 800305a <_fflush_r+0x1a>
 8003056:	f7ff f9af 	bl	80023b8 <__sinit>
 800305a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f3      	beq.n	800304a <_fflush_r+0xa>
 8003062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003064:	07d0      	lsls	r0, r2, #31
 8003066:	d404      	bmi.n	8003072 <_fflush_r+0x32>
 8003068:	0599      	lsls	r1, r3, #22
 800306a:	d402      	bmi.n	8003072 <_fflush_r+0x32>
 800306c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800306e:	f7ff fb98 	bl	80027a2 <__retarget_lock_acquire_recursive>
 8003072:	4628      	mov	r0, r5
 8003074:	4621      	mov	r1, r4
 8003076:	f7ff ff61 	bl	8002f3c <__sflush_r>
 800307a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800307c:	4605      	mov	r5, r0
 800307e:	07da      	lsls	r2, r3, #31
 8003080:	d4e4      	bmi.n	800304c <_fflush_r+0xc>
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	059b      	lsls	r3, r3, #22
 8003086:	d4e1      	bmi.n	800304c <_fflush_r+0xc>
 8003088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800308a:	f7ff fb8b 	bl	80027a4 <__retarget_lock_release_recursive>
 800308e:	e7dd      	b.n	800304c <_fflush_r+0xc>

08003090 <__swhatbuf_r>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	460c      	mov	r4, r1
 8003094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003098:	4615      	mov	r5, r2
 800309a:	2900      	cmp	r1, #0
 800309c:	461e      	mov	r6, r3
 800309e:	b096      	sub	sp, #88	; 0x58
 80030a0:	da0c      	bge.n	80030bc <__swhatbuf_r+0x2c>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	2100      	movs	r1, #0
 80030a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030aa:	bf0c      	ite	eq
 80030ac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80030b0:	2340      	movne	r3, #64	; 0x40
 80030b2:	2000      	movs	r0, #0
 80030b4:	6031      	str	r1, [r6, #0]
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	b016      	add	sp, #88	; 0x58
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	466a      	mov	r2, sp
 80030be:	f000 f849 	bl	8003154 <_fstat_r>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	dbed      	blt.n	80030a2 <__swhatbuf_r+0x12>
 80030c6:	9901      	ldr	r1, [sp, #4]
 80030c8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80030cc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80030d0:	4259      	negs	r1, r3
 80030d2:	4159      	adcs	r1, r3
 80030d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d8:	e7eb      	b.n	80030b2 <__swhatbuf_r+0x22>

080030da <__smakebuf_r>:
 80030da:	898b      	ldrh	r3, [r1, #12]
 80030dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030de:	079d      	lsls	r5, r3, #30
 80030e0:	4606      	mov	r6, r0
 80030e2:	460c      	mov	r4, r1
 80030e4:	d507      	bpl.n	80030f6 <__smakebuf_r+0x1c>
 80030e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030ea:	6023      	str	r3, [r4, #0]
 80030ec:	6123      	str	r3, [r4, #16]
 80030ee:	2301      	movs	r3, #1
 80030f0:	6163      	str	r3, [r4, #20]
 80030f2:	b002      	add	sp, #8
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
 80030f6:	466a      	mov	r2, sp
 80030f8:	ab01      	add	r3, sp, #4
 80030fa:	f7ff ffc9 	bl	8003090 <__swhatbuf_r>
 80030fe:	9900      	ldr	r1, [sp, #0]
 8003100:	4605      	mov	r5, r0
 8003102:	4630      	mov	r0, r6
 8003104:	f7ff fbb8 	bl	8002878 <_malloc_r>
 8003108:	b948      	cbnz	r0, 800311e <__smakebuf_r+0x44>
 800310a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800310e:	059a      	lsls	r2, r3, #22
 8003110:	d4ef      	bmi.n	80030f2 <__smakebuf_r+0x18>
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	81a3      	strh	r3, [r4, #12]
 800311c:	e7e3      	b.n	80030e6 <__smakebuf_r+0xc>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	6020      	str	r0, [r4, #0]
 8003122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003126:	81a3      	strh	r3, [r4, #12]
 8003128:	9b00      	ldr	r3, [sp, #0]
 800312a:	6120      	str	r0, [r4, #16]
 800312c:	6163      	str	r3, [r4, #20]
 800312e:	9b01      	ldr	r3, [sp, #4]
 8003130:	b15b      	cbz	r3, 800314a <__smakebuf_r+0x70>
 8003132:	4630      	mov	r0, r6
 8003134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003138:	f000 f81e 	bl	8003178 <_isatty_r>
 800313c:	b128      	cbz	r0, 800314a <__smakebuf_r+0x70>
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	f023 0303 	bic.w	r3, r3, #3
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	81a3      	strh	r3, [r4, #12]
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	431d      	orrs	r5, r3
 800314e:	81a5      	strh	r5, [r4, #12]
 8003150:	e7cf      	b.n	80030f2 <__smakebuf_r+0x18>
	...

08003154 <_fstat_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	2300      	movs	r3, #0
 8003158:	4d06      	ldr	r5, [pc, #24]	; (8003174 <_fstat_r+0x20>)
 800315a:	4604      	mov	r4, r0
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	602b      	str	r3, [r5, #0]
 8003162:	f7fd fa4f 	bl	8000604 <_fstat>
 8003166:	1c43      	adds	r3, r0, #1
 8003168:	d102      	bne.n	8003170 <_fstat_r+0x1c>
 800316a:	682b      	ldr	r3, [r5, #0]
 800316c:	b103      	cbz	r3, 8003170 <_fstat_r+0x1c>
 800316e:	6023      	str	r3, [r4, #0]
 8003170:	bd38      	pop	{r3, r4, r5, pc}
 8003172:	bf00      	nop
 8003174:	2000025c 	.word	0x2000025c

08003178 <_isatty_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	2300      	movs	r3, #0
 800317c:	4d05      	ldr	r5, [pc, #20]	; (8003194 <_isatty_r+0x1c>)
 800317e:	4604      	mov	r4, r0
 8003180:	4608      	mov	r0, r1
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	f7fd fa4d 	bl	8000622 <_isatty>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_isatty_r+0x1a>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	b103      	cbz	r3, 8003192 <_isatty_r+0x1a>
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	2000025c 	.word	0x2000025c

08003198 <_sbrk_r>:
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	2300      	movs	r3, #0
 800319c:	4d05      	ldr	r5, [pc, #20]	; (80031b4 <_sbrk_r+0x1c>)
 800319e:	4604      	mov	r4, r0
 80031a0:	4608      	mov	r0, r1
 80031a2:	602b      	str	r3, [r5, #0]
 80031a4:	f7fd fa54 	bl	8000650 <_sbrk>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d102      	bne.n	80031b2 <_sbrk_r+0x1a>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	b103      	cbz	r3, 80031b2 <_sbrk_r+0x1a>
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	2000025c 	.word	0x2000025c

080031b8 <memchr>:
 80031b8:	4603      	mov	r3, r0
 80031ba:	b510      	push	{r4, lr}
 80031bc:	b2c9      	uxtb	r1, r1
 80031be:	4402      	add	r2, r0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	d101      	bne.n	80031ca <memchr+0x12>
 80031c6:	2000      	movs	r0, #0
 80031c8:	e003      	b.n	80031d2 <memchr+0x1a>
 80031ca:	7804      	ldrb	r4, [r0, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	428c      	cmp	r4, r1
 80031d0:	d1f6      	bne.n	80031c0 <memchr+0x8>
 80031d2:	bd10      	pop	{r4, pc}

080031d4 <_init>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	bf00      	nop
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr

080031e0 <_fini>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr
